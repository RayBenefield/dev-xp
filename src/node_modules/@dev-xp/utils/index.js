import * as R from 'ramda'
import * as RA from 'ramda-adjunct'
import merge from 'lodash.merge'

export * from 'ramda'
export { concat as prefix } from 'ramda'
export { head as first } from 'ramda'
export const suffix = R.flip(R.concat)
export const mapIndexed = R.addIndex(R.map)
export const mapToLists = R.map(R.pipe(RA.list, RA.flattenDepth(1)))

export { isTrue, isFalse } from 'ramda-adjunct'
export { isPlainObject as isObject } from 'ramda-adjunct'
export { list } from 'ramda-adjunct'
export { isArray } from 'ramda-adjunct'
export { flattenDepth } from 'ramda-adjunct'

const prop = R.useWith(R.lensPath, [R.split('.')])

export const getProp = R.curryN(2, (key = '', value = {}) => {
    if (!RA.isString(key) || !RA.isPlainObject(value)) return value

    return R.pipe(R.useWith(R.view, [prop]), R.defaultTo(value))(key, value)
})

export const setProp = R.useWith(R.set, [prop])

export const $ = obj => ({
    pipe: operators => R.reduce(R.applyTo, obj, operators),
})

// Utils that start with $, mutate the underlying object
export const $extend = merge
