/* eslint-disable no-console */
import { isolate } from 'transmutation';
import { red } from 'chalk';
import parse from 'minimist';
import prettyJson from 'jsome';

import createSearcher from '@kli-tool/searcher';
import createExecutor from '@kli-tool/executor';

export const jsonRender = prop => results => prettyJson(isolate(prop)(results));

const configureKli = ({ defaultStyle, defaultRenderer = console.log } = {}) => (
    { commands = [] } = {},
) => {
    if (!Array.isArray(commands)) throw new Error('Commands must be an array');
    if (commands.length === 0) throw new Error('No commands defined');

    commands.forEach(c => {
        if (typeof c.run !== 'function')
            throw new Error('All commands must have a run method');
    });

    if (commands.length === 1) return { execute: () => commands[0].run() };

    const searcher = createSearcher({ commands });
    const executor = createExecutor({ defaultStyle, defaultRenderer });

    return {
        execute: unparsed => {
            const args = parse(unparsed);
            const command = searcher.get(args._[0])[0];
            try {
                return executor(command)();
            } catch (err) {
                return console.log(
                    red(`No command associated with \`${args._[0]}\``),
                );
            }
        },
    };
};

export const configure = configureKli;
export const kli = configureKli({ defaultRenderer: console.log });

export default configureKli({ defaultRenderer: console.log });
