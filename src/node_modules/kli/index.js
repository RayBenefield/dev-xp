/* eslint-disable no-console */
import { red } from 'chalk'
import parse from 'minimist'
import RenderKid from 'renderkid'
import { isolate } from 'transmutation'
import convertArgs from '@kli-tool/convert-args'
import { render as prettyJson } from 'prettyjson'
import createSearcher from '@kli-tool/searcher'

export const jsonRender = prop => results =>
    console.log(prettyJson(isolate(prop)(results)))

const configureKli = ({
    defaultStyle,
    defaultRenderer = console.log,
} = {}) => ({ commands = [] } = {}) => {
    if (!Array.isArray(commands)) throw new Error('Commands must be an array')
    if (commands.length === 0) throw new Error('No commands defined')

    commands.forEach(c => {
        if (typeof c.run !== 'function')
            throw new Error('All commands must have a run method')
    })

    const searcher = createSearcher({ commands })

    return {
        execute: (unparsed = ['']) => {
            const parsed = parse(unparsed, { boolean: true })
            const { _, commit, json } = parsed
            const results = searcher.get(_[0])
            const command =
                results.length === 0 && commands.length === 1
                    ? commands[0]
                    : results[0]

            if (!command)
                return console.log(
                    red(`No command associated with \`${_[0]}\``)
                )
            const args = convertArgs(
                { ...parsed, _: parsed._.slice(1) },
                command.args
            )
            const result = Promise.resolve(command.run(args))

            if (json)
                return result.then(jsonRender(json === true || json.split(',')))

            const renderer = command.renderer || defaultRenderer
            const formatter = new RenderKid()
            formatter.style(defaultStyle)
            return result.then(unformatted => {
                renderer(
                    command.template
                        ? formatter.render(command.template(unformatted))
                        : unformatted
                )
                if (command.effect && commit) command.effect(unformatted)
            })
        },
    }
}

export const configure = configureKli
export const kli = configureKli({ defaultRenderer: console.log })

export default configureKli({ defaultRenderer: console.log })
