/* eslint-disable no-console */
import { red } from 'chalk';
import parse from 'minimist';
import prettyJson from 'jsome';
import RenderKid from 'renderkid';
import { isolate } from 'transmutation';

import createSearcher from '@kli-tool/searcher';

export const jsonRender = prop => results => prettyJson(isolate(prop)(results));

const configureKli = ({ defaultStyle, defaultRenderer = console.log } = {}) => (
    { commands = [] } = {},
) => {
    if (!Array.isArray(commands)) throw new Error('Commands must be an array');
    if (commands.length === 0) throw new Error('No commands defined');

    commands.forEach(c => {
        if (typeof c.run !== 'function')
            throw new Error('All commands must have a run method');
    });

    if (commands.length === 1) return { execute: () => commands[0].run() };

    const searcher = createSearcher({ commands });

    return {
        execute: unparsed => {
            const { _, commit, json } = parse(unparsed, { boolean: true });
            const command = searcher.get(_[0])[0];
            if (!command)
                return console.log(
                    red(`No command associated with \`${_[0]}\``),
                );
            const result = Promise.resolve(command.run());

            if (json)
                return result.then(
                    jsonRender(json === true || json.split(',')),
                );

            const renderer = command.renderer || defaultRenderer;
            const formatter = new RenderKid();
            formatter.style(defaultStyle);
            return result.then(unformatted => {
                renderer(
                    command.template
                        ? formatter.render(command.template(unformatted))
                        : unformatted,
                );
                if (command.effect && commit) command.effect(unformatted);
            });
        },
    };
};

export const configure = configureKli;
export const kli = configureKli({ defaultRenderer: console.log });

export default configureKli({ defaultRenderer: console.log });
