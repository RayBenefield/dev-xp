import { configure } from 'kli';
import describe from '@kikd/tape';

const kli = configure({ defaultRenderer: () => {} });

describe('KLI', it => {
    it('should error when no commands are given', assert =>
        assert.throws(() => kli(), 'No commands defined'));

    it('should error when commands is not an array', assert =>
        assert.throws(
            () => kli({ commands: {} }),
            'Commands must be an array',
        ));

    it('should have an execute command', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'test',
                    run: () => {},
                },
            ],
        });
        assert.ok(cli.execute);
    });

    it('should error if any command does not have a run method', assert =>
        assert.throws(
            () =>
                kli({
                    commands: [
                        {
                            name: 'test',
                        },
                    ],
                }),
            'All commands must have a run method',
        ));

    it('should run test command when it is the only command', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'test',
                    run: () => assert.pass(),
                },
            ],
        });
        cli.execute();
    });

    it('should run test command when requested with full name', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'test',
                    run: () => assert.pass(),
                },
            ],
        });
        cli.execute(['test']);
    });

    it('should run test command when requested with full name vs other command', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'run',
                    run: () => assert.fail(),
                },
                {
                    name: 'test',
                    run: () => assert.pass(),
                },
            ],
        });
        cli.execute(['test']);
    });

    it('should run test command when requested with first letter vs other command', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'run',
                    run: () => assert.fail(),
                },
                {
                    name: 'test',
                    run: () => assert.pass(),
                },
            ],
        });
        cli.execute(['t']);
    });

    it('should run test command when alias is used vs other command', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'run',
                    run: () => assert.fail(),
                },
                {
                    name: 'test',
                    aliases: ['alias'],
                    run: () => assert.pass(),
                },
            ],
        });
        cli.execute(['alias']);
    });

    it('should run test command when first letter of alias is used vs other command', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'run',
                    run: () => assert.fail(),
                },
                {
                    name: 'test',
                    aliases: ['alias'],
                    run: () => assert.pass(),
                },
            ],
        });
        cli.execute(['a']);
    });

    it('should run test command with a promise', assert => {
        const cli = kli({
            commands: [
                {
                    name: 'test',
                    aliases: ['alias'],
                    run: () => new Promise(res => res(assert.pass())),
                },
            ],
        });
        cli.execute(['a']);
    });
});
