import { resolve } from 'path';
import { minify } from 'uglify-es';
import babel from 'rollup-plugin-babel';
import uglify from 'rollup-plugin-uglify';
import filesize from 'rollup-plugin-filesize';
import nodeResolve from 'rollup-plugin-node-resolve';
import executable from 'rollup-plugin-executable';

const babelConfig = {
    babelrc: false,
    presets: [['env', { modules: false, targets: { node: '6' } }], 'stage-0'],
    plugins: ['external-helpers'],
    exclude: ['node_modules/**'],
};

export default ({ packages = [] } = {}) =>
    new Promise(res =>
        res(
            [].concat(
                ...packages
                    .filter(p => p.bin)
                    .filter(p => p.bin.constructor === Object)
                    .map(p =>
                        Object.values(p.bin).map(file => ({
                            input: `src/node_modules/${p.name}/${file}`,
                            external: [
                                // ...Object.keys(pkg.dependencies),
                                'fs',
                                'path',
                            ],
                            output: [
                                {
                                    file: resolve('dist', `${p.name}/${file}`),
                                    format: 'cjs',
                                },
                            ],
                            banner: '#!/usr/bin/env node',
                            plugins: [
                                nodeResolve({
                                    customResolveOptions: {
                                        moduleDirectory: 'src/node_modules',
                                    },
                                    preferBuiltins: true,
                                }),
                                babel(babelConfig),
                                uglify({}, minify),
                                executable(),
                                filesize(),
                            ],
                        })),
                    ),
            ),
        ),
    );
