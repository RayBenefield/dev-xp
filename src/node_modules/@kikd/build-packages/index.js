import cpx from 'cpx';
import rimraf from 'rimraf';
import pick from 'lodash.pick';
import { resolve } from 'path';
import jsonFile from 'jsonfile';
import { rollup } from 'rollup';
import promisify from 'es6-promisify';

const removeDir = promisify(rimraf);
const copy = promisify(cpx.copy);
const writeJson = promisify(jsonFile.writeFile);

const requiredProps = [
    'description',
    'homepage',
    'author',
    'repository',
    'bugs',
    'license',
    'dependencies',
];
export default ({ root, baseConfig, configs = [] } = {}) =>
    removeDir(resolve(root, 'dist')).then(() =>
        Promise.all(
            configs.map(config =>
                rollup({
                    input: config.input,
                    external: config.external,
                    plugins: config.plugins,
                })
                    .then(bundle =>
                        Promise.all(
                            config.output.map(out =>
                                bundle.write({
                                    file: out.file,
                                    format: out.format,
                                    banner: config.banner,
                                }),
                            ),
                        ),
                    )
                    .then(() =>
                        Promise.all([
                            copy(
                                resolve(root, 'LICENSE'),
                                resolve(config.destDir),
                                { dereference: true },
                            ),
                            copy(
                                resolve(config.srcDir, 'readme.md'),
                                resolve(config.destDir),
                                { dereference: true },
                            ),
                            writeJson(
                                resolve(config.destDir, 'package.json'),
                                {
                                    ...config.packageConfig,
                                    ...pick(baseConfig, requiredProps),
                                },
                                { spaces: 4 },
                            ),
                        ]),
                    ),
            ),
        ),
    );
