/* eslint-disable no-console */
import { existsSync, mkdirSync } from 'fs'
import { join, basename } from 'path'

import git from '@kikd/git'
import jsonFile from 'jsonfile'
import promisify from 'es6-promisify'
import transmute from 'transmutation'
import template from '@kikd/template-initialize'

const writeJson = promisify(jsonFile.writeFile)

const isGitDirCheck = dir => existsSync(join(dir, '.git'))
const packageJsonExistsCheck = dir => existsSync(join(dir, 'package.json'))
const modulesDirExistsCheck = dir => existsSync(join(dir, 'src/node_modules'))

function collectInfo() {
    return transmute({})
        .extend('root', process.cwd())
        .extend('monorepoName', ({ root }) => basename(root))
        .extend('isGitDir', ({ root }) => isGitDirCheck(root))
        .extend('packageJsonExists', ({ root }) => packageJsonExistsCheck(root))
        .extend('modulesDirExists', ({ root }) => modulesDirExistsCheck(root))
}

export default function initialize() {
    // eslint-disable-next-line complexity
    return ({
        root,
        monorepoName,
        isGitDir,
        packageJsonExists,
        modulesDirExists,
    }) => {
        if (isGitDir && packageJsonExists && modulesDirExists)
            throw new Error(`[${monorepoName}] is already a KIKD monorepo.`)

        if (!isGitDir) git.init()

        const manifestPath = join(root, 'package.json')
        if (!packageJsonExists) {
            writeJson(manifestPath, { name: monorepoName }, { spaces: 4 })
            console.log('Package.json created.')
        }

        const modulesPath = join(root, 'src/node_modules')
        if (!modulesDirExists) {
            mkdirSync(modulesPath, { recursive: true })
            console.log('src/node_modules created.')
        }
    }
}

export const command = () => ({
    name: 'initialize',
    run: collectInfo,
    effect: initialize,
    template,
    autoCommit: true,
})
