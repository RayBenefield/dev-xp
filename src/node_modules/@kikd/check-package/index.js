import fs from 'fs'
import { resolve } from 'path'

import promisify from 'es6-promisify'

const lstat = promisify(fs.lstat)

// eslint-disable-next-line complexity
export default async ({
    name,
    root = '.',
    structure: { srcDir = '.', files = [] } = {},
    manifest: { main, bin, version } = {},
} = {}) => {
    const checks = {
        'has readme file': files.includes('readme.md'),
    }

    try {
        if (main || !bin) {
            const mainFilePath = resolve(root, srcDir, main || 'index.js')
            const mainFile = await lstat(mainFilePath)
            checks['has main and/or all bin files'] = !!mainFile.isFile
        }

        if (bin) {
            const bins = Object.values(bin)
            const binFiles = await Promise.all(
                bins.map(b => resolve(root, srcDir, b)).map(async b => lstat(b))
            )
            const notFile = file => !file.isFile
            checks['has main and/or all bin files'] = !binFiles.some(notFile)
        }
    } catch (err) {
        checks['has main and/or all bin files'] = false
    }

    checks['has a version number'] = !!version

    const failed = check => !check

    if (Object.values(checks).some(failed)) {
        return {
            [name]: {
                ...checks,
                publishable: false,
            },
        }
    }

    return { [name]: { ...checks, publishable: true } }
}
