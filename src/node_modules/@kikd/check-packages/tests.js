import { resolve } from 'path';
import describe from '@kikd/tape';
import checkPackages from '@kikd/check-packages';

const packages = dir => ({
    packages: [
        {
            dir: resolve(__dirname, `fixtures/${dir}`),
            // eslint-disable-next-line global-require, import/no-dynamic-require
            ...require(resolve(__dirname, `fixtures/${dir}/package.json`)),
        },
    ],
});

describe('Check Packages', it => {
    it('should return empty results when no arguments are given', assert =>
        checkPackages().then(result => assert.deepEqual(result, [])));

    it('should return empty results with empty packages', assert =>
        checkPackages({ packages: [] }).then(result =>
            assert.deepEqual(result, []),
        ));

    it('should return a failing check for a package with no package.json', assert =>
        checkPackages({
            packages: [
                {
                    dir: resolve(__dirname, 'fixtures/empty-dir'),
                },
            ],
        }).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/empty-dir'),
                    publishable: false,
                },
            ]),
        ));

    it('should return a failing check for a package with no name', assert =>
        checkPackages(packages('module-empty-package-json')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(
                        __dirname,
                        'fixtures/module-empty-package-json',
                    ),
                    publishable: false,
                },
            ]),
        ));

    it('should return a failing check for a package with no main file', assert =>
        checkPackages(packages('no-main')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/no-main'),
                    name: 'no-main',
                    publishable: false,
                },
            ]),
        ));

    it('should return a failing check for a package with main index.js, but no readme', assert =>
        checkPackages(packages('main-index-js')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/main-index-js'),
                    name: 'main-index-js',
                    publishable: false,
                },
            ]),
        ));

    it('should return a failing check for a package with a defined main app.js, but no readme', assert =>
        checkPackages(packages('main-app-js')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/main-app-js'),
                    name: 'main-app-js',
                    main: 'app.js',
                    publishable: false,
                },
            ]),
        ));

    it('should return a passing check for a package with a defined main app.js and readme', assert =>
        checkPackages(packages('main-app-js-readme')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/main-app-js-readme'),
                    name: 'main-app-js-readme',
                    main: 'app.js',
                    publishable: true,
                },
            ]),
        ));

    it('should return a passing check for a package with main index.js and readme', assert =>
        checkPackages(packages('main-index-js-readme')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/main-index-js-readme'),
                    name: 'main-index-js-readme',
                    publishable: true,
                },
            ]),
        ));

    it('should return a failing check for a package with a defined bin cli.js, but no readme', assert =>
        checkPackages(packages('bin-cli-js')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/bin-cli-js'),
                    name: 'bin-cli-js',
                    bin: {
                        cli: 'cli.js',
                    },
                    publishable: false,
                },
            ]),
        ));

    it('should return a passing check for a package with a defined bin cli.js and a readme', assert =>
        checkPackages(packages('bin-cli-js-readme')).then(result =>
            assert.deepEqual(result, [
                {
                    dir: resolve(__dirname, 'fixtures/bin-cli-js-readme'),
                    name: 'bin-cli-js-readme',
                    bin: {
                        cli: 'cli.js',
                    },
                    publishable: true,
                },
            ]),
        ));
});
