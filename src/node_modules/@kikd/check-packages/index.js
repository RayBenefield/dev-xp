import fs from 'fs';
import { resolve } from 'path';
import promisify from 'es6-promisify';

const lstat = promisify(fs.lstat);

export default ({ packages = [] } = {}) =>
    new Promise(async res => {
        if (packages.length === 0) return res([]);
        const results = await Promise.all(
            packages.map(async pkg => {
                const checks = {};

                checks['has package name'] = !!pkg.name;

                try {
                    const readmeFile = resolve(pkg.dir, 'readme.md');
                    const readme = await lstat(readmeFile);
                    checks['has readme file'] = !!readme.isFile;
                } catch (err) {
                    checks['has readme file'] = false;
                }

                try {
                    if (pkg.main || !pkg.bin) {
                        const mainFile = resolve(
                            pkg.dir,
                            pkg.main || 'index.js',
                        );
                        const main = await lstat(mainFile);
                        checks['has main or all bin files'] = !!main.isFile;
                    } else if (pkg.bin) {
                        const bins = Object.values(pkg.bin);
                        const binFiles = await Promise.all(
                            bins
                                .map(bin => resolve(pkg.dir, bin))
                                .map(async bin => lstat(bin)),
                        );
                        const notFile = file => !file.isFile;
                        checks['has main or all bin files'] = !binFiles.some(
                            notFile,
                        );
                    }
                } catch (err) {
                    checks['has main or all bin files'] = false;
                }

                const failed = check => !check;

                if (Object.values(checks).some(failed)) {
                    return {
                        ...pkg,
                        checks,
                        publishable: false,
                    };
                }

                return {
                    ...pkg,
                    checks,
                    publishable: true,
                };
            }),
        );
        return res(results);
    });
