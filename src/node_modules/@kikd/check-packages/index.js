import fs from 'fs';
import { resolve } from 'path';
import promisify from 'es6-promisify';

const lstat = promisify(fs.lstat);

export default ({ packages = [] } = {}) =>
    new Promise(async res => {
        if (packages.length === 0) return res([]);
        const results = await Promise.all(
            packages.map(async pkg => {
                if (!pkg.name) {
                    return {
                        ...pkg,
                        publishable: false,
                    };
                }

                try {
                    const mainFile = resolve(pkg.dir, pkg.main || 'index.js');
                    const main = await lstat(mainFile);
                    if (!main.isFile) {
                        return {
                            ...pkg,
                            publishable: false,
                        };
                    }
                } catch (err) {
                    return {
                        ...pkg,
                        publishable: false,
                    };
                }

                try {
                    const readmeFile = resolve(pkg.dir, 'readme.md');
                    const readme = await lstat(readmeFile);
                    if (!readme.isFile) {
                        return {
                            ...pkg,
                            publishable: false,
                        };
                    }
                } catch (err) {
                    return {
                        ...pkg,
                        publishable: false,
                    };
                }

                return {
                    ...pkg,
                    publishable: true,
                };
            }),
        );
        return res(results);
    });
