import { join } from 'path'

import transmute from 'transmutation'
import template from '@kikd/template-new'
import findRepoRoot from '@dev-xp/root'
import requestPackageType from '@kikd/request-package-type'
import requestPackageName from '@kikd/request-package-name'

function collectInfo(config = {}) {
    const { plugins = {} } = config

    return transmute({})
        .extend('root', findRepoRoot)
        .extend('rootManifestPath', ({ root }) => join(root, 'package.json'))
        .extend('type', requestPackageType(config))
        .extend('name', requestPackageName(config))
        .extend('packagePath', ({ root, name }) =>
            join(root, 'src/node_modules', name)
        )
        .extend('extra', data => {
            const { type } = data
            const plugin = plugins[type]
            if ('preCreate' in plugin) return plugin.preCreate(data)

            return {}
        })
}

export default function create({ plugins = {} } = {}) {
    return data => {
        const { type } = data
        return plugins[type].create(data)
    }
}

export const command = () => ({
    name: 'new',
    run: collectInfo,
    template,
    effect: create,
    autoCommit: true,
    args: { _: 'packageName' },
})
