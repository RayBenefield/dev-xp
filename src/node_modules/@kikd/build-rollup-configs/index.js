import pick from 'lodash.pick';
import { minify } from 'uglify-es';
import babel from 'rollup-plugin-babel';
import uglify from 'rollup-plugin-uglify';
import filesize from 'rollup-plugin-filesize';
import intersection from 'lodash.intersection';
import resolve from 'rollup-plugin-node-resolve';
import executable from 'rollup-plugin-executable';

const babelConfig = {
    babelrc: false,
    presets: [['env', { modules: false, targets: { node: '6' } }], 'stage-0'],
    plugins: ['external-helpers'],
    exclude: ['node_modules/**'],
};

const basePackageInfo = ({ pkg, dependencies, baseConfig }) => ({
    name: pkg.name,
    srcDir: `./src/node_modules/${pkg.name}`,
    destDir: `./dist/${pkg.name}`,
    packageConfig: pkg.config,
    input: `./src/node_modules/${pkg.name}/${pkg.file}`,
    dependencyVersions: pick(
        baseConfig.dependencies,
        intersection(
            dependencies[pkg.name].external,
            Object.keys(baseConfig.dependencies),
        ),
    ),
});

const plugins = [
    resolve({
        customResolveOptions: {
            moduleDirectory: 'src/node_modules',
        },
    }),
    babel(babelConfig),
    uglify({}, minify),
    filesize(),
];

const binConfigs = ({ packages, baseConfig, dependencies }) =>
    packages
        .filter(p => p.bin)
        .filter(p => p.bin.constructor === Object)
        .map(pkg =>
            Object.values(pkg.bin).map(file => ({
                ...basePackageInfo({
                    pkg: { ...pkg, file },
                    baseConfig,
                    dependencies,
                }),
                external: dependencies[pkg.name].external,
                output: [
                    {
                        file: `./dist/${pkg.name}/${file}`,
                        format: 'cjs',
                    },
                ],
                banner: '#!/usr/bin/env node',
                plugins: [...plugins, executable()],
            })),
        );

const mainConfigs = ({ packages, baseConfig, dependencies }) =>
    packages
        .filter(p => !p.bin)
        .map(p => ({
            ...p,
            file: p.main || 'index.js',
        }))
        .map(pkg => ({
            ...basePackageInfo({ pkg, baseConfig, dependencies }),
            external: dependencies[pkg.name].external,
            output: [
                {
                    file: `./dist/${pkg.name}/${pkg.file}`,
                    format: 'cjs',
                },
            ],
            plugins,
        }));

export default ({ packages = [], baseConfig, dependencies } = {}) =>
    new Promise(res =>
        res(
            [].concat(
                ...binConfigs({ packages, baseConfig, dependencies }),
                ...mainConfigs({ packages, baseConfig, dependencies }),
            ),
        ),
    );
