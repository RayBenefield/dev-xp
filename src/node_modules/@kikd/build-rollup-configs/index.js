import pick from 'lodash.pick';
import { minify } from 'uglify-es';
import babel from 'rollup-plugin-babel';
import uglify from 'rollup-plugin-uglify';
import filesize from 'rollup-plugin-filesize';
import intersection from 'lodash.intersection';
import resolve from 'rollup-plugin-node-resolve';
import executable from 'rollup-plugin-executable';

const babelConfig = {
    babelrc: false,
    presets: [['env', { modules: false, targets: { node: '6' } }], 'stage-0'],
    plugins: ['external-helpers'],
    exclude: ['node_modules/**'],
};

const common = [
    resolve({ customResolveOptions: { moduleDirectory: 'src/node_modules' } }),
    babel(babelConfig),
    uglify({}, minify),
    filesize(),
];

const input = ({ pkg, plugins, dependencies }) => ({
    input: `./src/node_modules/${pkg.name}/${pkg.file}`,
    external: dependencies[pkg.name].external,
    plugins,
});
const cjsOutput = ({ pkg, banner }) => ({
    file: `./dist/${pkg.name}/${pkg.file}`,
    format: 'cjs',
    banner,
});
const postInfo = ({ pkg, dependencies, baseConfig }) => ({
    name: pkg.name,
    srcDir: `./src/node_modules/${pkg.name}`,
    destDir: `./dist/${pkg.name}`,
    packageConfig: pkg.config,
    dependencyVersions: pick(
        baseConfig.dependencies,
        intersection(
            dependencies[pkg.name].external,
            Object.keys(baseConfig.dependencies),
        ),
    ),
});

const binConfigs = ({ packages, baseConfig, dependencies }) =>
    packages
        .filter(p => p.bin)
        .filter(p => p.bin.constructor === Object)
        .map(p =>
            Object.values(p.bin)
                .map(file => ({ ...p, file }))
                .map(pkg => ({
                    in: input({
                        pkg,
                        dependencies,
                        plugins: [...common, executable()],
                    }),
                    out: [cjsOutput({ pkg, banner: '#!/usr/bin/env node' })],
                    post: postInfo({ pkg, baseConfig, dependencies }),
                })),
        );

const mainConfigs = ({ packages, baseConfig, dependencies }) =>
    packages
        .filter(p => !p.bin)
        .map(p => ({ ...p, file: p.main || 'index.js' }))
        .map(pkg => ({
            in: input({ pkg, dependencies, plugins: common }),
            out: [cjsOutput({ pkg })],
            post: postInfo({ pkg, baseConfig, dependencies }),
        }));

export default ({ packages = [], baseConfig, dependencies } = {}) =>
    [].concat(
        ...binConfigs({ packages, baseConfig, dependencies }),
        ...mainConfigs({ packages, baseConfig, dependencies }),
    );
