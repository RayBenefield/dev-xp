/* eslint-disable indent */
const regex = /^([^A-Z]*)\(((?:[^A-Z*]*)|\*)\): ([^a-z].*\.)$/;

const toHeaderOrBody = ({ body, matches: [, type, scopes, subject] }) =>
    type
        ? {
              type,
              scopes: scopes.split(',').map(s => s.trim()),
              subject,
          }
        : { body };

const intoSingleCommits = (combined, line) => {
    if (combined.length === 0) return [line];

    const [last, ...rest] = combined.reverse();

    // We use `in` since body can be an empty string,
    // which returns falsy in (last.body && line.body)
    if ('body' in last && 'body' in line) {
        return [
            ...rest,
            {
                ...last,
                body: [last.body, line.body].join('\n'),
            },
        ];
    }

    if (line.type) {
        return [...combined, line];
    }

    return [...rest, { ...last, ...line }];
};

const trimmedBodies = combined =>
    combined.body ? { ...combined, body: combined.body.trim() } : combined;

export default ({ commits = [] } = {}) =>
    Array.prototype.concat(
        ...commits.map(commit => commit.split(/\r?\n/)).map(lines =>
            lines
                .map(line => ({
                    body: line,
                    matches: line.match(regex) || [],
                }))
                .map(toHeaderOrBody)
                .reduce(intoSingleCommits, [])
                .map(trimmedBodies),
        ),
    );
