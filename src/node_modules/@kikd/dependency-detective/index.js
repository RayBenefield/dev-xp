import fs from 'fs'
import { extname, resolve } from 'path'

import detective from 'detective-es6'
import promisify from 'es6-promisify'
import collapse from '@kikd/collapse'
import parseSfp from '@entyre/parse-sfp'
import { sync as exists } from 'file-exists'

const readFile = promisify(fs.readFile)
const cache = {}

export default ({ root, locals = [], structures = {}, manifests = {} }) =>
    async function detect(name) {
        if (!name) return {}
        const { main, bin } = manifests[name] || {}
        const { srcDir, files } = structures[name] || {}

        const sourceFile =
            main ||
            (bin
                ? Object.values(bin)[0]
                : files.includes('index.md') ? 'index.md' : 'index.js')

        if (!exists(resolve(root, srcDir, sourceFile))) return {}

        return readFile(resolve(root, srcDir, sourceFile), 'utf-8')
            .then(
                content =>
                    extname(sourceFile) === '.md'
                        ? parseSfp({ content }).code
                        : content
            )
            .then(detective)
            .then(result =>
                Promise.all(
                    result.map(async dependency => {
                        if (!locals.includes(dependency))
                            return { [dependency]: false }

                        if (dependency in cache) return cache[dependency]

                        return detect(dependency)
                            .then(
                                deps =>
                                    Object.keys(deps).length === 0 &&
                                    deps.constructor === Object
                                        ? { [dependency]: false }
                                        : { [dependency]: deps }
                            )
                            .then(tree => {
                                cache[dependency] = tree
                                return tree
                            })
                    })
                ).then(results => results.reduce(collapse, {}))
            )
    }
