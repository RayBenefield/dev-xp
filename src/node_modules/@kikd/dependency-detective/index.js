import fs from 'fs';
import { resolve } from 'path';
import detective from 'detective-es6';
import promisify from 'es6-promisify';
import collapse from '@kikd/collapse';

const lstat = promisify(fs.lstat);
const readFile = promisify(fs.readFile);
const cache = {};

export default root =>
    async function detect(start) {
        if (!start) return {};
        const dir = resolve(root, start);
        let main;

        try {
            // eslint-disable-next-line global-require, import/no-dynamic-require
            const config = require(resolve(dir, 'package.json'));
            // eslint-disable-next-line no-nested-ternary
            main = config.main
                ? config.main
                : config.bin ? Object.values(config.bin)[0] : 'index.js';
        } catch (e) {
            main = 'index.js';
        }

        return readFile(resolve(dir, main), 'utf-8')
            .then(detective)
            .then(result =>
                Promise.all(
                    result.map(async dependency => {
                        try {
                            if (dependency in cache) return cache[dependency];

                            const depDir = resolve(root, dependency);
                            await lstat(depDir);
                            return detect(dependency)
                                .then(
                                    deps =>
                                        Object.keys(deps).length === 0 &&
                                        deps.constructor === Object
                                            ? { [dependency]: false }
                                            : { [dependency]: deps },
                                )
                                .then(tree => {
                                    cache[dependency] = tree;
                                    return tree;
                                });
                        } catch (e) {
                            return { [dependency]: false };
                        }
                    }),
                ).then(results => results.reduce(collapse, {})),
            );
    };
