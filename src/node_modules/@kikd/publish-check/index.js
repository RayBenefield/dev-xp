import fs from 'fs';
import { resolve } from 'path';
import promisify from 'es6-promisify';

import checkPackage from '@kikd/check-package';

const lstat = promisify(fs.lstat);

export default ({ root, packages = [] } = {}) =>
    new Promise(async res => {
        if (packages.length === 0) return res([]);
        const packageChecks = await Promise.all(
            packages.map(pkg => checkPackage(pkg, root)),
        );
        const rootChecks = {};

        try {
            const licenseFile = resolve(root, 'LICENSE');
            const license = await lstat(licenseFile);
            rootChecks['has root license'] = !!license.isFile;
        } catch (e) {
            rootChecks['has root license'] = false;
        }

        return res({
            root: rootChecks,
            packages: packageChecks.reduce((all, curr) => {
                if (curr.undefined) {
                    const und = all.undefined
                        ? [...all.undefined, curr.undefined]
                        : [curr.undefined];
                    return {
                        ...all,
                        undefined: und,
                    };
                }
                return Object.assign(all, curr);
            }, {}),
        });
    });
