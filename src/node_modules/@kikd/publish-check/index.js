import fs from 'fs'
import { resolve } from 'path'

import has from 'lodash.has'
import every from 'lodash.every'
import partial from 'lodash.partial'
import promisify from 'es6-promisify'
import collapse from '@kikd/collapse'
import checkPackage from '@kikd/check-package'

const lstat = promisify(fs.lstat)

export default ({
    root,
    rootManifest = {},
    packageNames = [],
    structures = {},
    manifests = {},
} = {}) =>
    new Promise(async res => {
        if (packageNames.length === 0) return res([])
        const packageChecks = await Promise.all(
            packageNames.map(name =>
                checkPackage({
                    structure: structures[name],
                    manifest: manifests[name],
                }).then(checks => ({ [name]: checks }))
            )
        ).then(checks => checks.reduce(collapse, {}))

        const rootChecks = {}

        try {
            const licenseFile = resolve(root, 'LICENSE')
            const license = await lstat(licenseFile)
            rootChecks['has root license'] = !!license.isFile
        } catch (e) {
            rootChecks['has root license'] = false
        }

        const isIn = obj => partial(has, obj)
        const requiredProps = [
            'description',
            'homepage',
            'author',
            'repository',
            'bugs',
            'license',
            'dependencies',
        ]
        rootChecks['has required package.json fields'] = every(
            requiredProps,
            isIn(rootManifest)
        )

        return res({ root: rootChecks, packages: packageChecks })
    })
