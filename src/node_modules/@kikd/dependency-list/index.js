import uniq from 'lodash.uniq';
import { resolve } from 'path';
import find from 'lodash.find';
import collapsePackages from '@kikd/collapse';
import detective from '@kikd/dependency-detective';

export default ({ root, packages = [] } = {}) => {
    if (!root) return {};
    if (packages.length <= 0) return {};

    const packageDir = resolve(root, 'src', 'node_modules');
    const findDependencies = detective(packageDir);
    return Promise.all(
        packages.filter(({ name }) => name).map(({ name }) =>
            findDependencies(name)
                .then(deps =>
                    Object.entries(deps).reduce(function addDeps(
                        list,
                        [dep, depsOfDep],
                    ) {
                        return [
                            ...list,
                            dep,
                            ...Object.entries(depsOfDep).reduce(addDeps, []),
                        ];
                    },
                    []),
                )
                .then(uniq)
                .then(deps => ({
                    [name]: {
                        local: deps.filter(dep =>
                            find(packages, { name: dep }),
                        ),
                        external: deps.filter(
                            dep => !find(packages, { name: dep }),
                        ),
                    },
                })),
        ),
    ).then(results => results.reduce(collapsePackages, {}));
};
