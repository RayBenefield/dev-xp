import transmute from 'transmutation'
import uniq from 'lodash.uniq'
import collapse from '@kikd/collapse'
import detective from '@kikd/dependency-detective'
import findPackages from '@kikd/find-packages'
import getStructures from '@kikd/package-structure'
import getPackageDetails from '@kikd/package-details'

export default async ({ root, exclude, packageNames = [] } = {}) => {
    if (!root) return {}
    if (packageNames.length <= 0) return {}

    const config = transmute({ root, exclude })
        .extend('packageNames', findPackages)
        .extend('structures', getStructures)
        .extend('manifests', getPackageDetails)
    const { packageNames: locals, structures, manifests } = await config

    const findDependencies = detective({ root, locals, structures, manifests })
    return Promise.all(
        packageNames.map(name =>
            findDependencies(name)
                .then(deps =>
                    Object.entries(deps).reduce(function addDeps(
                        list,
                        [dep, depsOfDep]
                    ) {
                        return [
                            ...list,
                            dep,
                            ...Object.entries(depsOfDep).reduce(addDeps, []),
                        ]
                    },
                    [])
                )
                .then(uniq)
                .then(deps => ({
                    [name]: {
                        local: deps.filter(dep => locals.includes(dep)),
                        external: deps.filter(dep => !locals.includes(dep)),
                    },
                }))
        )
    ).then(results => results.reduce(collapse, {}))
}
