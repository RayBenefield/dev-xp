import filter from 'lodash.filter';
import { lt as lessThan, inc } from 'semver';

import collapsePackages from '@kikd/collapse';

export default (
    // eslint-disable-next-line no-unused-vars
    { publishable = [], packages = [], dependencies = [], changes = [] } = {},
) => {
    if (!publishable || publishable.length <= 0) return {};

    return publishable
        .filter(pkg => pkg.name)
        .map(pkg => {
            /*

            Packages without a `version` field in their `package.json` will not
            be considered for versioning.

             */
            if (!pkg.version) return undefined;

            /*

            Packages with a `version` set to `0.0.0` will increase their `patch`
            version as their initial public release and become `0.0.1` no matter
            what other changes exist.

            */
            if (pkg.version === '0.0.0') {
                return {
                    [pkg.name]: {
                        type: 'patch',
                        old: pkg.version,
                        new: '0.0.1',
                        reason: 'Prereleased',
                    },
                };
            }

            /*

            INCOMPLETE: Still needs to account for itself or dependencies changing

            Packages with a `version` less than `0.1.0` will increase their
            `patch` version if they or any of their dependencies are updated due
            to being in "development".

            */
            if (lessThan(pkg.version, '0.1.0')) {
                const pkgChanges = filter(
                    changes,
                    change =>
                        change.scopes
                            ? change.scopes.includes(pkg.name)
                            : false,
                );

                if (pkgChanges.length > 0)
                    return {
                        [pkg.name]: {
                            type: 'patch',
                            old: pkg.version,
                            new: inc(pkg.version, 'patch'),
                            reason: 'This was updated in development.',
                        },
                    };

                return undefined;
            }

            return undefined;
        })
        .filter(pkg => pkg)
        .reduce(collapsePackages, {});
};
