/* eslint-disable no-console */
import map from 'lodash.map';
import { resolve } from 'path';
import jsonFile from 'jsonfile';
import promisify from 'es6-promisify';
import configureGit from 'simple-git/promise';

const readJson = promisify(jsonFile.readFile);
const writeJson = promisify(jsonFile.writeFile);
const git = configureGit();

export default ({ root, updates, publishable, latest }) => {
    console.log('Updating package.json files...');
    return Promise.all(
        publishable.filter(pkg => pkg.name in updates).map(({ name, dir }) => {
            const jsonPath = resolve(root, dir, 'package.json');
            return readJson(jsonPath)
                .then(config => ({ ...config, version: updates[name].new }))
                .then(config =>
                    writeJson(jsonPath, config, {
                        spaces: 4,
                    }),
                )
                .then(() => ({
                    name,
                    version: updates[name].new,
                    file: jsonPath,
                }));
        }),
    )
        .then(async changes => {
            console.log('Staging files for commit...');
            await git.add(map(changes, 'file'));
            return changes;
        })
        .then(async changes => {
            console.log('Committing updates...');
            await git.commit(`docs(version): Update package versions.
        
${changes.map(({ name, version }) => `v${version} ${name}`).join('\n')}

[skip ci]
`);
            return changes;
        })
        .then(changes => {
            console.log('Tagging commit with package versions...');
            return Promise.all(
                changes.map(({ name, version }) =>
                    git.addTag(`${name}-v${version}`),
                ),
            );
        })
        .then(() => {
            console.log('Tagging commit with new latest release tag...');
            return git.addTag(`#${latest.releaseNumber + 1}`);
        });
};
