import { transmute, isolate } from 'transmutation'

import npmCli from '@kikd/plugin-build-npm-cli'
import findRepoRoot from '@kikd/find-repo-root'
import entyrePackage from '@entyre/kikd-plugin'
import buildPackages from '@kikd/build-packages'
import getDependencies from '@kikd/command-deps'
import vueSite from '@kikd/plugin-build-vue-site'
import findBaseConfig from '@kikd/find-base-config'
import getPackageDetails from '@kikd/package-details'
import npmPackage from '@kikd/plugin-build-npm-package'
import getPublishablePackages from '@kikd/command-publish'
import buildRollupConfigs from '@kikd/build-rollup-configs'

const plugins = [npmPackage, npmCli, vueSite, entyrePackage].reduce(
    (all, plugin) => ({ ...all, [plugin.type]: plugin }),
    {}
)

export default function build(config) {
    const { packageNames } = config
    const packages =
        packageNames.length > 0
            ? transmute({ packageNames })
                  .extend('root', findRepoRoot)
                  .extend('packages', getPackageDetails)
                  .extend('baseConfig', findBaseConfig)
            : transmute(
                  getPublishablePackages(config).then(obj => ({
                      ...obj,
                      packages: obj.publishable,
                  }))
              )

    return packages
        .extend(
            'dependencies',
            getDependencies(config).then(isolate('dependencies'))
        )
        .extend('configs', buildRollupConfigs(plugins))
}

export const command = () => ({
    name: 'build',
    renderer: () => {},
    run: build,
    effect: buildPackages(plugins),
    args: { _: 'packageNames' },
})
