import { isolate } from 'transmutation'
import template from '@kikd/template-building'
import collapse from '@kikd/collapse'
import getPackages, { packageFilters } from '@kikd/command-list'
import buildPackages from '@kikd/build-packages'
import deps from '@kikd/command-deps'
import buildConfigs from '@kikd/build-configs'

const filter = ({ allPackages, changedAndPublishable, needsPublishing }) =>
    !allPackages && !changedAndPublishable && !needsPublishing
        ? { onlyPublishable: true }
        : {}

export default function build(config) {
    const newConfig = { ...config, ...filter(config) }

    return (
        getPackages(newConfig)
            .extend(
                'dependencies',
                deps(newConfig).then(isolate('dependencies'))
            )
            // TODO: Revert back to when it works for promises:
            // .extendEach('configs', 'packageNames', buildConfigs(newConfig))
            // TEST: `yarn kd build minotaur-core`
            .extend('configs', snowball =>
                Promise.all(
                    snowball.packageNames.map(name =>
                        buildConfigs(newConfig)(name, snowball)
                    )
                ).then(results => results.reduce(collapse, {}))
            )
    )
}

export const command = () => ({
    name: 'build',
    run: build,
    template,
    effect: buildPackages,
    args: packageFilters,
})
