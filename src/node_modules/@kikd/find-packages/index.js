import { relative, resolve } from 'path'

import unglob from 'glob'
import log from '@dev-xp/log'
import match from 'minimatch'
import { lstat } from '@dev-xp/fs'
import promisify from 'es6-promisify'

const glob = promisify(unglob)
const have = file => path => match(file, path)

export default async ({ root = '.', exclude = [], include = [] } = {}) => {
    const packagesDir = resolve(root, 'src/node_modules')
    const stats = await lstat(packagesDir)
    const includes = include.map(_ => `**/${_}/**`)

    if (!stats.isDirectory)
        throw new Error('The `src/node_modules` directory does not exist!')

    const paths = resolve(packagesDir, '{[^@]*/,@*/*/}')
    const packageDirs = await glob(paths)
    const packageNames = packageDirs
        .filter(dir => (includes.length > 0 ? includes.some(have(dir)) : true))
        .filter(dir => !exclude.some(have(dir)))
        .map(dir => relative(resolve(root, 'src/node_modules'), dir))

    return packageNames
}
