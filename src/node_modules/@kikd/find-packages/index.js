import fs from 'fs';
import unglob from 'glob';
import match from 'minimatch';
import promisify from 'es6-promisify';
import { relative, dirname, resolve } from 'path';

const glob = promisify(unglob);
const lstat = promisify(fs.lstat);
const have = file => path => match(file, path);

export default ({ root = '.', exclude = [] } = {}) =>
    new Promise(async (res, rej) => {
        try {
            const packagesDir = resolve(root, 'src/node_modules');
            const stats = await lstat(packagesDir);

            if (!stats.isDirectory) return rej('NO');
            const paths = resolve(packagesDir, '**/package.json');
            const packageJsons = await glob(paths);
            const packages = packageJsons
                .filter(json => !exclude.some(have(json)))
                .map(json => ({
                    json,
                    // eslint-disable-next-line global-require, import/no-dynamic-require
                    config: require(json),
                }))
                .filter(({ config }) => config.name)
                .map(({ json, config }) => ({
                    dir: relative(root, dirname(json)),
                    distDir: relative(root, resolve(root, 'dist', config.name)),
                    name: config.name,
                    version: config.version,
                    bin: config.bin,
                    main: config.main,
                    config,
                }));

            return res(packages);
        } catch (error) {
            return rej(error);
        }
    });
