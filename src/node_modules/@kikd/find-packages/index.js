import fs from 'fs';
import unglob from 'glob';
import fileIsInPath from 'path-is-inside';
import promisify from 'es6-promisify';
import { dirname, resolve } from 'path';

const glob = promisify(unglob);
const lstat = promisify(fs.lstat);
const have = file => path => fileIsInPath(file, path);

export default ({ root = '.', ignore = [] } = {}) =>
    new Promise(async (res, rej) => {
        try {
            const packagesDir = resolve(root, 'src/node_modules');
            const stats = await lstat(packagesDir);

            if (!stats.isDirectory) return rej('NO');
            const paths = resolve(packagesDir, '**/package.json');
            const ignorePaths = ignore.map(p => resolve(packagesDir, p));
            const packageJsons = await glob(paths);
            const packages = packageJsons
                .filter(json => !ignorePaths.some(have(json)))
                .map(json => {
                    // eslint-disable-next-line global-require, import/no-dynamic-require
                    const config = require(json);
                    return {
                        dir: dirname(json),
                        name: config.name,
                        bin: config.bin,
                        main: config.main,
                        config,
                    };
                })
                .filter(config => config.name);

            return res(packages);
        } catch (error) {
            return rej(error);
        }
    });
