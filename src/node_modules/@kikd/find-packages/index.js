import { relative, resolve } from 'path'

import unglob from 'glob'
import match from 'minimatch'
import { lstat } from '@dev-xp/fs'
import promisify from 'es6-promisify'

const glob = promisify(unglob)
const have = file => path => match(file, path)

export default ({ root = '.', exclude = [] } = {}) =>
    new Promise(async (res, rej) => {
        try {
            const packagesDir = resolve(root, 'src/node_modules')
            const stats = await lstat(packagesDir)

            if (!stats.isDirectory)
                return rej('The `src/node_modules` directory does not exist!')

            const paths = resolve(packagesDir, '{[^@]*/,@*/*/}')
            const packageDirs = await glob(paths)
            const packageNames = packageDirs
                .filter(dir => !exclude.some(have(dir)))
                .map(dir => relative(resolve(root, 'src/node_modules'), dir))

            return res(packageNames)
        } catch (error) {
            return rej(error)
        }
    })
