import pick from 'lodash.pick'
import { minify } from 'uglify-es'
import babel from 'rollup-plugin-babel'
import uglify from 'rollup-plugin-uglify'
import filesize from 'rollup-plugin-filesize'
import intersection from 'lodash.intersection'
import resolve from 'rollup-plugin-node-resolve'

const babelConfig = {
    babelrc: false,
    presets: [['env', { modules: false, targets: { node: '6' } }], 'stage-0'],
    plugins: ['external-helpers'],
    exclude: ['node_modules/**'],
}

export const commonPlugins = [
    resolve({
        customResolveOptions: {
            moduleDirectory: ['src/node_modules', 'node_modules'],
        },
    }),
    babel(babelConfig),
    uglify({}, minify),
    filesize(),
]

export const input = ({ pkg, plugins, dependencies }) => ({
    input: `./src/node_modules/${pkg.name}/${pkg.file}`,
    external: dependencies[pkg.name].external,
    plugins,
})

export const output = ({ format, pkg, banner }) => ({
    file: `./dist/${pkg.name}/${pkg.file}`,
    format,
    banner,
})

export const postInfo = ({ pkg, dependencies, baseConfig }) => ({
    name: pkg.name,
    srcDir: `./src/node_modules/${pkg.name}`,
    destDir: `./dist/${pkg.name}`,
    packageConfig: pkg.config,
    dependencyVersions: pick(
        baseConfig.dependencies,
        intersection(
            dependencies[pkg.name].external,
            Object.keys(baseConfig.dependencies)
        )
    ),
})
