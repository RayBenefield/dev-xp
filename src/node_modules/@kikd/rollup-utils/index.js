import pick from 'lodash.pick';
import { minify } from 'uglify-es';
import babel from 'rollup-plugin-babel';
import uglify from 'rollup-plugin-uglify';
import filesize from 'rollup-plugin-filesize';
import intersection from 'lodash.intersection';
import resolve from 'rollup-plugin-node-resolve';
import exec from 'rollup-plugin-executable';

const babelConfig = {
    babelrc: false,
    presets: [['env', { modules: false, targets: { node: '6' } }], 'stage-0'],
    plugins: ['external-helpers'],
    exclude: ['node_modules/**'],
};

export const plugins = ({ executable = false } = {}) => {
    const common = [
        resolve({
            customResolveOptions: { moduleDirectory: 'src/node_modules' },
        }),
        babel(babelConfig),
        uglify({}, minify),
        filesize(),
    ];
    if (executable) return [...common, exec()];
    return common;
};

export const input = ({ pkg, plugins: plugs, dependencies }) => ({
    input: `./src/node_modules/${pkg.name}/${pkg.file}`,
    external: dependencies[pkg.name].external,
    plugins: plugs,
});

export const cjsOutput = ({ pkg, banner }) => ({
    file: `./dist/${pkg.name}/${pkg.file}`,
    format: 'cjs',
    banner,
});

export const postInfo = ({ pkg, dependencies, baseConfig }) => ({
    name: pkg.name,
    srcDir: `./src/node_modules/${pkg.name}`,
    destDir: `./dist/${pkg.name}`,
    packageConfig: pkg.config,
    dependencyVersions: pick(
        baseConfig.dependencies,
        intersection(
            dependencies[pkg.name].external,
            Object.keys(baseConfig.dependencies),
        ),
    ),
});
