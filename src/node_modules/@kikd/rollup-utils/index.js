import { resolve } from 'path'

import pick from 'lodash.pick'
import { minify } from 'uglify-es'
import babel from 'rollup-plugin-babel'
import uglify from 'rollup-plugin-uglify'
import stripPartImports from '@kikd/strip-part-imports'
import filesize from 'rollup-plugin-filesize'
import markdown from 'rollup-plugin-markdown'
import intersection from 'lodash.intersection'
import nodeResolve from 'rollup-plugin-node-resolve'

const babelConfig = {
    babelrc: false,
    presets: [['env', { modules: false, targets: { node: '6' } }], 'stage-0'],
    plugins: ['external-helpers'],
    exclude: ['node_modules/**'],
}

export const input = ({ file, dependencies, structure, plugins }) => ({
    input: resolve(structure.root, structure.srcDir, file),
    external: dependencies.external,
    plugins,
})

export const output = ({ file, structure, format, banner }) => ({
    file: resolve(structure.root, structure.destDir, file),
    format,
    banner,
})

export const postInfo = ({
    structure: { name, srcDir, destDir },
    manifest,
    dependencies: { external },
    rootManifest: { dependencies: rootDependencies = {} },
}) => ({
    name,
    srcDir,
    destDir,
    packageConfig: manifest,
    dependencyVersions: pick(
        rootDependencies,
        intersection(stripPartImports(external), Object.keys(rootDependencies))
    ),
})

export default ({
    type,
    file,
    outFile,
    dependencies,
    structure,
    manifest,
    rootManifest,
    format,
    banner,
    plugins,
}) => ({
    type,
    in: input({ file, dependencies, structure, plugins }),
    out: [output({ structure, file: outFile || file, format, banner })],
    post: postInfo({ structure, manifest, dependencies, rootManifest }),
})

export const commonPlugins = [
    markdown(),
    nodeResolve({
        extensions: ['.js', '.json', '.md', '.vue'],
        customResolveOptions: {
            moduleDirectory: ['src/node_modules', 'node_modules'],
        },
    }),
    babel(babelConfig),
    uglify({}, minify),
    filesize(),
]
