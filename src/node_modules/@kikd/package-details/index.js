import pick from 'lodash.pick';
import { relative, resolve } from 'path';
import { readdirSync as readDir } from 'fs';
import { sync as exists } from 'file-exists';

export default ({ root = '.', packageNames = [] }) =>
    packageNames
        .map(name => ({
            name,
            dir: relative(root, resolve(root, 'src/node_modules', name)),
            distDir: relative(root, resolve(root, 'dist', name)),
        }))
        .map(details => ({
            ...details,
            files: readDir(resolve(root, details.dir)),
        }))
        .map(details => {
            const packageJson = resolve(root, details.dir, 'package.json');
            if (exists(packageJson, { root })) return details;

            try {
                // eslint-disable-next-line global-require, import/no-dynamic-require
                const config = require(packageJson);
                const props = pick(config, ['version', 'bin', 'main']);

                return { ...details, ...props, config };
            } catch (e) {
                return details;
            }
        });
