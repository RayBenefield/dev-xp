import pick from 'lodash.pick'
import { relative, resolve } from 'path'
import { readdirSync as readDir } from 'fs'
import { sync as exists } from 'file-exists'

const cache = {}

const getDetails = ({ root, name }) => {
    const dir = relative(root, resolve(root, 'src/node_modules', name))
    const distDir = relative(root, resolve(root, 'dist', name))
    const files = readDir(resolve(root, dir))
    const packageJson = resolve(root, dir, 'package.json')
    // eslint-disable-next-line global-require, import/no-dynamic-require
    const config = exists(packageJson) ? require(packageJson) : {}
    const props = pick(config, ['version', 'bin', 'main'])

    const details = { name, dir, distDir, files, config, ...props }
    cache[details.name] = details

    return details
}

export default ({ root = '.', packageNames = [] }) =>
    packageNames.map(
        pkg => (pkg in cache ? cache[pkg] : getDetails({ root, name: pkg }))
    )
