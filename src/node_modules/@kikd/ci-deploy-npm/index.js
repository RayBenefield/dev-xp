import { resolve } from 'path'

import execa from 'execa'
import registryUrl from 'registry-url'
import { log, err } from '@dev-xp/log'
import localOrHomeNpmrc from 'local-or-home-npmrc'
import { readSync, writeSync, exists } from '@dev-xp/fs'

const registry = registryUrl()

const setAuthToken = root =>
    new Promise((res, rej) => {
        process.chdir(root)
        const npmrcFile = localOrHomeNpmrc()
        if (!exists(npmrcFile))
            return rej(new Error('For some reason no npmrc file exists.'))

        const test = `${registry
            .replace('https:', '')
            .replace('http:', '')}:_authToken=`

        // eslint-disable-next-line prefer-template, no-template-curly-in-string
        const token = test + '${NPM_TOKEN}'
        // eslint-disable-next-line prefer-template
        const contents = readSync(npmrcFile, 'utf-8').trim() + '\n'

        if (contents.indexOf(token) !== -1) {
            return res()
        }

        if (contents.indexOf(test) !== -1) {
            err('The .npmrc already has a token for this registry.')
            err(test)
            return rej(new Error(`Auth token for registry exists ${test}`))
        }

        writeSync(npmrcFile, `${contents}${token}\n`, 'utf-8')
        return res()
    })

export default ({ root, publishing }) =>
    setAuthToken(root).then(() =>
        Promise.all(
            publishing.map(name => {
                process.chdir(resolve(root, 'dist', name))
                log(`Publishing [${name}]...`)
                return execa('npm', [
                    'publish',
                    '--registry',
                    registry,
                    '--access',
                    'public',
                ])
                    .then(result => log(result.stdout))
                    .catch(log)
            })
        )
    )
