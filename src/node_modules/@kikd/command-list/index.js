import transmute from 'transmutation'

import findPackages from '@kikd/find-packages'
import publishCheck from '@kikd/publish-check'
import findRepoRoot from '@kikd/find-repo-root'
import template from '@kikd/template-package-list'
import findBaseConfig from '@kikd/find-base-config'
import getPackageDetails from '@kikd/package-details'

export default function list(config) {
    return transmute({})
        .extend('root', findRepoRoot)
        .extend('baseConfig', findBaseConfig)
        .extend('exclude', ['**/fixtures/**'])
        .extend('packageNames', snowball => {
            const { packageNames, onlyPublishable, allPackages } = config

            if (allPackages) return findPackages(snowball)

            if (Array.isArray(packageNames) && packageNames.length > 0)
                return packageNames

            if (onlyPublishable)
                return transmute(snowball)
                    .extend('packageNames', findPackages)
                    .extend('packages', getPackageDetails)
                    .extend('checks', publishCheck)
                    .extend('publishable', ({ packages, checks }) =>
                        packages.filter(
                            pkg => checks.packages[pkg.name].publishable
                        )
                    )
                    .then(obj => obj.publishable.map(pkg => pkg.name))

            return findPackages(snowball)
        })
        .extend('packages', getPackageDetails)
}

export const command = () => ({
    name: 'list',
    aliases: ['ls'],
    run: list,
    template,
    args: { _: 'packageNames', publishable: 'onlyPublishable' },
})
