/* eslint-disable max-lines */
import 'loud-rejection/register';
// eslint-disable-next-line no-unused-vars
import { configure, jsonRender } from 'kli';

import { command as build } from '@kikd/command-build';
import { command as changes } from '@kikd/command-changes';

import style from '@kikd/cli-style';
import packageListTemplate from '@kikd/template-package-list';
import dependenciesTemplate from '@kikd/template-dependencies';
import checkedPackagesTemplate from '@kikd/template-checked-packages';
import updatePackagesTemplate from '@kikd/template-update-packages';
import publishablePackagesTemplate from '@kikd/template-publishable-packages';
import prereleaseTemplate from '@kikd/template-prerelease';

import deps from '@kikd/command-deps';
import list from '@kikd/command-list';
import check from '@kikd/command-check';
import version from '@kikd/command-version';
import publish from '@kikd/command-publish';
import prerelease from '@kikd/command-prerelease';

import updatePackages from '@kikd/update-packages';
import setupGit from '@kikd/ci-setup-git';
import deployGit from '@kikd/ci-deploy-git';
import deployNpm from '@kikd/ci-deploy-npm';
import prereleasePackage from '@kikd/prerelease-package';

const { CI } = process.env;
const kli = configure({ defaultStyle: CI ? {} : style });

const cli = kli({
    commands: [
        build,
        changes,
        {
            name: 'list',
            aliases: ['ls'],
            template: packageListTemplate,
            run: list,
        },
        {
            name: 'check',
            template: checkedPackagesTemplate,
            run: check,
        },
        {
            name: 'version',
            aliases: ['update'],
            template: updatePackagesTemplate,
            run: version,
            effect: (...args) => {
                if (!CI)
                    throw new Error(
                        'Committing new versions should only happen in CI.',
                    );

                return setupGit()
                    .then(() => updatePackages(...args))
                    .then(() => deployGit());
            },
        },
        {
            name: 'publish',
            aliases: ['deploy'],
            template: publishablePackagesTemplate,
            run: publish,
            effect: (...args) => {
                const {
                    NPM_TOKEN,
                    GH_USER,
                    GH_EMAIL,
                    GH_REPO,
                    GH_TOKEN,
                } = process.env;

                if (!NPM_TOKEN)
                    throw new Error('The NPM_TOKEN env variable must be set!');

                if (!GH_USER)
                    throw new Error('The GH_USER env variable must be set!');
                if (!GH_EMAIL)
                    throw new Error('The GH_EMAIL env variable must be set!');
                if (!GH_REPO)
                    throw new Error('The GH_REPO env variable must be set!');
                if (!GH_TOKEN)
                    throw new Error('The GH_TOKEN env variable must be set!');

                return deployNpm(...args);
            },
        },
        {
            name: 'dependencies',
            aliases: ['deps', 'dependents'],
            template: dependenciesTemplate,
            run: deps,
        },
        {
            name: 'prerelease',
            template: prereleaseTemplate,
            run: prerelease,
            effect: prereleasePackage,
        },
    ],
});

cli.execute(process.argv.slice(2));
