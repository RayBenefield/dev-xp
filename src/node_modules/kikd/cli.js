import 'loud-rejection/register';
import { configure } from 'kli';

import style from '@kikd/cli-style';
import packageListTemplate from '@kikd/template-package-list';
import checkedPackagesTemplate from '@kikd/template-checked-packages';
import updatePackagesTemplate from '@kikd/template-update-packages';

import list from '@kikd/command-list';
import check from '@kikd/command-check';
import build from '@kikd/command-build';
import version from '@kikd/command-version';

import buildPackages from '@kikd/build-packages';
import updatePackages from '@kikd/update-packages';
import setupGit from '@kikd/ci-setup-git';
import deployGit from '@kikd/ci-deploy-git';
import deployNpm from '@kikd/ci-deploy-npm';

const { CI } = process.env;
const kli = configure({ defaultStyle: CI ? {} : style });

const cli = kli({
    commands: [
        {
            name: 'list',
            aliases: ['ls'],
            template: packageListTemplate,
            run: list,
        },
        {
            name: 'check',
            template: checkedPackagesTemplate,
            run: check,
        },
        {
            name: 'build',
            renderer: () => {},
            run: build,
            effect: buildPackages,
        },
        {
            name: 'version',
            aliases: ['update'],
            template: updatePackagesTemplate,
            run: version,
            effect: (...args) => {
                if (!CI)
                    throw new Error(
                        'Committing new versions should only happen in CI.',
                    );

                return setupGit()
                    .then(() => updatePackages(...args))
                    .then(() => deployGit());
            },
        },
        {
            name: 'publish',
            aliases: ['deploy'],
            renderer: () => {},
            run: list,
            effect: (...args) => {
                const {
                    NPM_TOKEN,
                    GH_USER,
                    GH_EMAIL,
                    GH_REPO,
                    GH_TOKEN,
                } = process.env;

                if (!NPM_TOKEN)
                    throw new Error('The NPM_TOKEN env variable must be set!');

                if (!GH_USER)
                    throw new Error('The GH_USER env variable must be set!');
                if (!GH_EMAIL)
                    throw new Error('The GH_EMAIL env variable must be set!');
                if (!GH_REPO)
                    throw new Error('The GH_REPO env variable must be set!');
                if (!GH_TOKEN)
                    throw new Error('The GH_TOKEN env variable must be set!');

                return deployNpm(...args);
            },
        },
    ],
});

cli.execute(process.argv.slice(2));
