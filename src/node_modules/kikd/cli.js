import 'loud-rejection/register';
import kli from 'kli';
import render from '@kikd/render';
import { transmute, isolate } from 'transmutation';
import findPackages from '@kikd/find-packages';
import findRepoRoot from '@kikd/find-repo-root';
import checkPackages from '@kikd/check-packages';
import buildPackages from '@kikd/build-packages';
import findBaseConfig from '@kikd/find-base-config';
import formatPackageList from '@kikd/format-package-list';
import buildRollupConfigs from '@kikd/build-rollup-configs';

const cli = kli({
    commands: [
        {
            name: 'list',
            aliases: ['ls'],
            run: () =>
                transmute({})
                    .extend('root', findRepoRoot)
                    .extend('ignore', ['__tests__'])
                    .extend('packages', findPackages)
                    .extend('template', formatPackageList)
                    .extend('output', render)
                    .then(isolate('output')),
        },
        {
            name: 'check',
            run: () =>
                transmute({})
                    .extend('root', findRepoRoot)
                    .extend('baseConfig', findBaseConfig)
                    .extend('ignore', ['__tests__'])
                    .extend('packages', findPackages)
                    .extend('checkedPackages', checkPackages)
                    .then(isolate('checkedPackages')),
        },
        {
            name: 'build',
            run: () =>
                transmute({})
                    .extend('root', findRepoRoot)
                    .extend('baseConfig', findBaseConfig)
                    .extend('ignore', ['__tests__'])
                    .extend('unfiltered', findPackages)
                    .extend('packages', ({ unfiltered }) =>
                        unfiltered.filter(p => p.bin),
                    )
                    .extend('configs', buildRollupConfigs)
                    .then(buildPackages),
        },
    ],
});

cli.execute(process.argv.slice(2));
