import describe from 'kape'
import transmute from 'transmutation'

const promise = new Promise(res => res({ parameter: 'promise' }))
const promiseArray = new Promise(res => res(['promise']))

describe(
    'Extend Operator',
    (...args) => transmute({ parameter: 'roar' }).extend(...args),
    snapshot => {
        snapshot('Basics', [
            [({ parameter }) => ({ [parameter]: 'result' })],
            ['testing.stuff', ({ parameter }) => ({ [parameter]: 'result' })],
            [
                'testing.stuff',
                ({ parameter }) =>
                    new Promise(res => res({ [parameter]: 'result' })),
            ],
            [
                'testing.stuff',
                ({ parameter }) => transmute({ [parameter]: 'result' }),
            ],
            [
                ['testing.stuff', 'second.place'],
                ({ parameter }) => transmute({ [parameter]: 'result' }),
            ],
            [
                ['testing.stuff', 'testing.place'],
                ({ parameter }) => transmute({ [parameter]: 'result' }),
            ],
            [
                ['parameter', 'testing.place'],
                ({ parameter }) => transmute({ [parameter]: 'result' }),
            ],
            [null, ({ parameter }) => transmute({ [parameter]: 'result' })],
            [42, ({ parameter }) => transmute({ [parameter]: 'result' })],
            [{ parameter: 'roar' }],
            [{ roar: 'parameter' }],
            [{ parameter: 'no' }],
            ['extension', 'works'],
            ['parameter', 'blocked'],
            ['jam.test.stuff', promise],
            ['parameter', promiseArray],
            [null],
            [4],
            ['roar'],
            [0, 'ten'],
            // [
            //     [null, 'testing'],
            //     ({ parameter }) => transmute({ [parameter]: 'result' }),
            // ],
            // [
            //     [42, 54, null, 'testing'],
            //     ({ parameter }) => transmute({ [parameter]: 'result' }),
            // ],
        ])
    }
)

describe(
    'Extend Operator, but Deep',
    (...args) => transmute({ parameter: { deep: 'roar' } }).extend(...args),
    snapshot => {
        snapshot('Deep', [[{ parameter: { extension: 'works' } }]])
    }
)

describe(
    'Extend Operator, but with an array',
    (...args) => transmute({ parameter: ['roar'] }).extend(...args),
    snapshot => {
        snapshot('Array', [
            ['parameter', promiseArray],
            [null],
            [4],
            ['roar'],
            [[0, 'ten']],
            [{ parameter: 'roar' }],
        ])
    }
)

describe(
    'Extend Operator, but with a null',
    (...args) => transmute(null).extend(...args),
    snapshot => {
        snapshot('Null', [
            [null],
            [5],
            ['roar'],
            [[0, 'ten']],
            [{ parameter: 'roar' }],
        ])
    }
)

describe(
    'Extend Operator, but with a number',
    (...args) => transmute(5).extend(...args),
    snapshot => {
        snapshot('Number', [
            [null],
            [4],
            ['roar'],
            [[0, 'ten']],
            [{ parameter: 'roar' }],
        ])
    }
)

describe(
    'Extend Operator, but with a string',
    (...args) => transmute('roar').extend(...args),
    snapshot => {
        snapshot('String', [
            [null],
            [4],
            ['roar'],
            [[0, 'ten']],
            [{ parameter: 'roar' }],
        ])
    }
)
