import log from '@dev-xp/log'
import * as _ from '@dev-xp/utils'
import merger from '@transmutation/merging-function'

// eslint-disable-next-line complexity
export default (path, obj) => snowball => {
    const value = _.isObject(snowball) ? { ...snowball } : snowball
    // eslint-disable-next-line no-nested-ternary
    const paths = obj && Array.isArray(path) ? path : !path ? null : [path]
    const finalPath = obj ? paths : null
    const base = obj || path
    let finalObject = null
    try {
        finalObject = typeof base === 'function' ? base(value) : base
    } catch (e) {
        e.value = value
        throw e
    }
    if (finalPath) {
        return Promise.all(
            finalPath.map(single =>
                Promise.resolve(finalObject)
                    .then(o => _.setProp(single.toString(), o, {}))
                    .then(o => merger(value, o))
            )
        )
            .then(o => o.reduce(merger, {}))
            .catch(e => {
                e.value = value
                throw e
            })
    }
    return Promise.resolve(finalObject)
        .then(o => merger(value, o))
        .catch(e => {
            e.value = value
            throw e
        })
}
