import { input } from 'runic'
import * as _ from '@dev-xp/utils'
import symbol from '@sigils/symbols'
import { camelCase, capitalCase } from 'change-case'
import createRune from '@sigils/create-rune'

const makeRune = (params, name) =>
    createRune({
        name: capitalCase(name),
        fn: _[camelCase(name)],
        params,
    })

const runes = {
    add: [input.number('Operand A'), input.number('Operand B')],
    always: [input.any('Constant')],
    dec: [input.number('Number')],
    divide: [input.number('Dividend'), input.number('Divisor')],
    inc: [input.number('Number')],
    isArray: [input.any('Value')],
    isBoolean: [input.any('Value')],
    isFunction: [input.any('Value')],
    isNumber: [input.any('Value')],
    isObject: [input.any('Value')],
    isString: [input.any('Value')],
    _map: [input.function('Transform'), input.functor('Functor')],
    mathMod: [input.number('Dividend'), input.number('Divisor')],
    modulo: [input.number('Dividend'), input.number('Divisor')],
    multiply: [input.number('Operand A'), input.number('Operand B')],
    negate: [input.number('Number')],
    subtract: [input.number('Operand A'), input.number('Operand B')],
    sum: [input['array-number']('Numbers')],
    applyTo: [input.any('Value'), input.function('Thrush')],
}

const customRunes = {
    list: createRune({
        name: 'List',
        symbol: symbol.function,
        fn: _.identity,
        params: [input['array-any']('Items')],
    }),
}

export default { ..._.mapObjIndexed(makeRune, runes), ...customRunes }
