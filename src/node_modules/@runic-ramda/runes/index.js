import { input } from '@runic/io'
import * as _ from '@dev-xp/utils'
import symbol from '@runic/symbols'
import { camelCase, capitalCase } from 'change-case'
import createRune from '@runic/create-rune'

const getRuneName = _.pipe(_.split('.'), _.last, camelCase)
const makeRune = (params, name) =>
    createRune({
        name: capitalCase(getRuneName(name)),
        symbol: symbol.function,
        fn: _[getRuneName(name)],
        params: params(),
    })

const runes = _.flattenObj({
    math: {
        add: () => [input.number('Operand A'), input.number('Operand B')],
        dec: () => [input.number('Number')],
        divide: () => [input.number('Dividend'), input.number('Divisor')],
        inc: () => [input.number('Number')],
        mathMod: () => [input.number('Dividend'), input.number('Divisor')],
        modulo: () => [input.number('Dividend'), input.number('Divisor')],
        multiply: () => [input.number('Operand A'), input.number('Operand B')],
        negate: () => [input.number('Number')],
        subtract: () => [input.number('Operand A'), input.number('Operand B')],
        sum: () => [input['array-number']('Numbers')],
    },
    typeChecks: {
        isArray: () => [input.any('Value')],
        isBoolean: () => [input.any('Value')],
        isFunction: () => [input.any('Value')],
        isNumber: () => [input.any('Value')],
        isObject: () => [input.any('Value')],
        isString: () => [input.any('Value')],
    },
    values: {
        always: () => [input.any('Constant')],
    },
    transform: {
        map: () => [input.function('Transform'), input.functor('Functor')],
        applyTo: () => [input.any('Value'), input.function('Thrush')],
    },
})

const customRunes = _.flattenObj({
    values: {
        list: createRune({
            name: 'List',
            symbol: symbol.function,
            fn: _.identity,
            params: [input['array-any']('Items')],
        }),
    },
})

export default { ..._.mapObjIndexed(makeRune, runes), ...customRunes }
