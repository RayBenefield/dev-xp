import describe from 'kape';
import renderer from 'renderking';

describe('Render King without Style', renderer(), snapshot => {
    snapshot(
        [],
        [''],
        ['Testing'],
        ['<bar/>Testing'],
        ['Testing<bar/>'],
        ['<bar/>Testing<bar/>'],
    );
});

describe(
    'RenderKing with value style',
    renderer({ bar: { value: '────' } }),
    snapshot => {
        snapshot(
            ['Testing'],
            ['<bar/>Testing'],
            ['Testing<bar/>'],
            ['<bar/>Testing<bar/>'],
            ['Text with <bar/> random <bar/> bars that exist here <bar/>.'],
        );
    },
);

describe(
    'RenderKing with colored bars',
    renderer({ bar: { value: '────', font: 'green.bold.bgBlackBright' } }),
    snapshot => {
        snapshot(
            ['Testing'],
            process.env.CI ? false : ['<bar/>Testing'],
            process.env.CI ? false : ['Testing<bar/>'],
            process.env.CI ? false : ['<bar/>Testing<bar/>'],
            process.env.CI
                ? false
                : /* eslint-disable indent */
                  [
                      'Text with <bar/> random <bar/> bars that exist here <bar/>.',
                  ],
        );
    },
);

describe(
    'RenderKing using multilines',
    renderer({ bar: { value: '────' } }),
    snapshot => {
        snapshot(
            [
                `
                Testing`,
            ],
            [
                `
                <bar/>Testing`,
            ],
            [
                `
                Testing<bar/>
            `,
            ],
            [
                `
                <bar/>Testing<bar/>
            `,
            ],
            [
                `
                Text with 
                <bar/> random
                 <bar/> bars that exist 
                here <bar/>
                .
            `,
            ],
        );
    },
);

describe(
    'RenderKing using display block',
    renderer({ bar: { value: '────', display: 'block' } }),
    snapshot =>
        snapshot(
            ['<bar/>'],
            ['<bar/>after'],
            ['before<bar/>'],
            ['before<bar/>after'],
            ['before<bar/>after<bar/>'],
            ['before<bar/>middle<bar/>after'],
            ['<bar/><bar/>'],
            [
                `
                <bar/>`,
            ],
            [
                `<bar/>
            `,
            ],
            [
                `
                <bar/>
            `,
            ],
            [
                `
                before
                <bar/>
            `,
            ],
            [
                `
                before
                <bar/>
                after
            `,
            ],
            [
                `
                <bar/>
                before
                <bar/>
                <bar/>
                after
            `,
            ],
        ),
);
