import createApi from '@rampant-wit/api'
import { prettify } from '@rampant/logger'
import difference from 'lodash.difference'
import createNlp from '@rampant-wit/nlp-extension'
import sanitize from '@rampant-wit/sanitize'
import train from '@rampant-wit/train-samples'

export default ({ token, projectId, db, logger: baseLogger } = {}) => {
    const logger = baseLogger.child({ plugin: 'wit' })
    const api = createApi(token)
    const trainSamples = train({ projectId, api, db })

    logger.plugin('Wit plugin Initialized')

    return {
        getSamples: api.getSamples,
        trainSamples,
        processIntent: ({ name, samples: intentSamples }) => {
            const intent = name || '-negative-'

            if (!intentSamples) {
                logger.detail(`No samples`, { intent })
                return Promise.resolve()
            }

            logger.detail('Processing new training', { intent })
            return db
                .get(`projects/${projectId}/training/${name}`)
                .then(training => {
                    const sanitizedIntents = intentSamples.map(sanitize)
                    const untrainedSamples = training
                        ? difference(sanitizedIntents, training.samples)
                        : sanitizedIntents

                    if (untrainedSamples.length === 0) {
                        logger.detail('No new samples', { intent })
                        return Promise.resolve()
                    }

                    const count = untrainedSamples.length
                    logger.intent(`Training ${count} new samples`, { intent })
                    logger.debug(prettify(untrainedSamples), { intent })
                    return trainSamples(untrainedSamples, name)
                })
        },
        extensions: { nlp: createNlp({ api, projectId, db, logger }) },
    }
}
