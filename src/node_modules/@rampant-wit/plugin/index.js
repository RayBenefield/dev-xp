import get from '@rampant/get'
import createApi from '@rampant-wit/api'
import { of, from } from 'rxjs'
import { mergeMap, map, tap } from 'rxjs/operators'
import difference from 'lodash.difference'
import sanitize from '@rampant-wit/sanitize'
import train from '@rampant-wit/train-samples'

export default ({ token, projectId, db } = {}) => {
    const api = createApi(token)
    const trainSamples = train({ projectId, api, db })

    return {
        getSamples: api.getSamples,
        trainSamples,
        processIntent: ({ name, samples: intentSamples }) =>
            intentSamples &&
            db.get(`projects/${projectId}/training/${name}`).then(training => {
                const sanitizedIntents = intentSamples.map(sanitize)
                const untrainedSamples = training
                    ? difference(sanitizedIntents, training.samples)
                    : sanitizedIntents

                if (untrainedSamples.length === 0) return Promise.resolve()

                return trainSamples(untrainedSamples, name)
            }),
        extensions: {
            nlp: ({ key, value, threshold = 100 }) =>
                mergeMap(payload => {
                    const unsanitizedMessage = get({ $: payload }, value)
                    const message = sanitize(unsanitizedMessage).trim()
                    if (!message || message.length >= 280)
                        return of({ ...payload, [key]: '-unknown-' })

                    return from(
                        db.get(`projects/${projectId}/training`, [
                            ['samples', 'array-contains', message],
                        ])
                    ).pipe(
                        map(docs => Object.keys(docs)),
                        mergeMap(intents => {
                            if (intents.length > 0) return of(intents[0])

                            return from(api.analyze(message)).pipe(
                                map(({ entities }) => ({
                                    ...entities,
                                    intent: entities.intent || [],
                                })),
                                tap(entities =>
                                    db.set(
                                        `projects/${projectId}/untrained/${message}`,
                                        entities
                                    )
                                ),
                                map(
                                    ({ intent }) =>
                                        intent[0] || { value: '-unknown-' }
                                ),
                                tap(r => console.log({ message, ...r })),
                                map(
                                    ({ value: intent, confidence = 0 }) =>
                                        confidence > threshold / 100
                                            ? intent
                                            : 'Unknown'
                                )
                            )
                        }),
                        map(intent => ({ ...payload, [key]: intent }))
                    )
                }),
        },
    }
}
