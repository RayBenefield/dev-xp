import axios from 'axios'
import get from '@rampant/get'
import { mergeMap } from 'rxjs/operators'
import difference from 'lodash.difference'

const sanitizeMessage = str => str.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase()

export default ({ token, projectId, db } = {}) => {
    const request = ({ method, url, params, data }) =>
        axios({
            url: `https://api.wit.ai/${url}`,
            headers: { Authorization: `Bearer ${token}` },
            params: {
                v: '20170307',
                ...params,
            },
            method,
            data,
        })

    return {
        processIntent: ({ name, samples: intentSamples }) =>
            intentSamples &&
            db.get(`projects/${projectId}/training/${name}`).then(training => {
                const sanitizedIntents = intentSamples.map(sanitizeMessage)
                const untrainedSamples = training
                    ? difference(sanitizedIntents, training.samples)
                    : sanitizedIntents

                return Promise.all([
                    request({
                        method: 'post',
                        url: `samples`,
                        data: untrainedSamples.map(text => ({
                            text,
                            entities: [{ entity: 'intent', value: name }],
                        })),
                    }),
                    db.set(`projects/${projectId}/training/${name}`, {
                        samples: sanitizedIntents,
                    }),
                ])
            }),
        extensions: {
            nlp: ({ key, value, threshold = 100 }) =>
                mergeMap(payload => {
                    const q = sanitizeMessage(get({ $: payload }, value)).trim()
                    if (!q)
                        return Promise.resolve({ ...payload, [key]: 'Unknown' })

                    return db
                        .get(`projects/${projectId}/training`, [
                            ['samples', 'array-contains', q],
                        ])
                        .then(docs => Object.keys(docs))
                        .then(
                            intents =>
                                intents.length > 0
                                    ? intents[0]
                                    : /* eslint-disable indent */
                                      request({
                                          method: 'get',
                                          url: 'message',
                                          params: { q },
                                      })
                                          .then(
                                              ({ data }) =>
                                                  data.entities.intent || [
                                                      { value: 'Unknown' },
                                                  ]
                                          )
                                          .then(i => i[0])
                                          .then(
                                              ({
                                                  value: intent,
                                                  confidence = 0,
                                              }) =>
                                                  confidence > threshold / 100
                                                      ? intent
                                                      : 'Unknown'
                                          )
                        )
                        .then(intent => ({ ...payload, [key]: intent }))
                }),
        },
    }
}
