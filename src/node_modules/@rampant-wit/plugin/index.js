import get from '@rampant/get'
import createApi from '@rampant-wit/api'
import { mergeMap } from 'rxjs/operators'
import difference from 'lodash.difference'
import sanitize from '@rampant-wit/sanitize'

export default ({ token, projectId, db } = {}) => {
    const api = createApi(token)

    return {
        processIntent: ({ name, samples: intentSamples }) =>
            intentSamples &&
            db.get(`projects/${projectId}/training/${name}`).then(training => {
                const sanitizedIntents = intentSamples.map(sanitize)
                const untrainedSamples = training
                    ? difference(sanitizedIntents, training.samples)
                    : sanitizedIntents

                return Promise.all([
                    api.samples(untrainedSamples, name),
                    db.set(`projects/${projectId}/training/${name}`, {
                        samples: sanitizedIntents,
                    }),
                ])
            }),
        extensions: {
            nlp: ({ key, value, threshold = 100 }) =>
                mergeMap(payload => {
                    const message = sanitize(get({ $: payload }, value)).trim()
                    if (!message || message.length >= 280)
                        return Promise.resolve({ ...payload, [key]: 'Unknown' })

                    return db
                        .get(`projects/${projectId}/training`, [
                            ['samples', 'array-contains', message],
                        ])
                        .then(docs => Object.keys(docs))
                        .then(
                            intents =>
                                intents.length > 0
                                    ? intents[0]
                                    : /* eslint-disable indent */
                                      api
                                          .analyze(message)
                                          .then(
                                              ({ entities }) =>
                                                  entities.intent
                                                      ? entities
                                                      : {
                                                            ...entities,
                                                            intent: [],
                                                        }
                                          )
                                          .then(
                                              entities =>
                                                  db
                                                      .set(
                                                          `projects/${projectId}/untrained/${message}`,
                                                          entities
                                                      )
                                                      .then(() => entities) // eslint-disable-line max-nested-callbacks
                                          )
                                          .then(
                                              ({ intent }) =>
                                                  intent[0] || {
                                                      value: 'Unknown',
                                                  }
                                          )
                                          .then(
                                              ({
                                                  value: intent,
                                                  confidence = 0,
                                              }) =>
                                                  confidence > threshold / 100
                                                      ? intent
                                                      : 'Unknown'
                                          )
                        )
                        .then(intent => ({ ...payload, [key]: intent }))
                }),
        },
    }
}
