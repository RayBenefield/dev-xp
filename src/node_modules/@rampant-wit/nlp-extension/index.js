import get from '@rampant/get'
import { of, from } from 'rxjs'
import sanitize from '@rampant-wit/sanitize'
import { mergeMap, map, tap } from 'rxjs/operators'

export default ({ projectId, api, db }) => ({ key, value, threshold = 100 }) =>
    mergeMap(payload => {
        const unsanitizedMessage = get({ $: payload }, value)
        const message = sanitize(unsanitizedMessage).trim()
        if (!message || message.length >= 280)
            return of({ ...payload, [key]: '-unknown-' })

        return from(
            db.get(`projects/${projectId}/training`, [
                ['samples', 'array-contains', message],
            ])
        ).pipe(
            map(docs => Object.keys(docs)),
            mergeMap(intents => {
                if (intents.length > 0) return of(intents[0])

                return from(api.analyze(message)).pipe(
                    map(({ entities }) => ({
                        ...entities,
                        intent: entities.intent || [],
                    })),
                    tap(entities =>
                        db.set(
                            `projects/${projectId}/untrained/${message}`,
                            entities
                        )
                    ),
                    map(({ intent }) => intent[0] || { value: '-unknown-' }),
                    tap(r => console.log({ message, ...r })),
                    map(
                        ({ value: intent, confidence = 0 }) =>
                            confidence > threshold / 100 ? intent : 'Unknown'
                    )
                )
            }),
            map(intent => ({ ...payload, [key]: intent }))
        )
    })
