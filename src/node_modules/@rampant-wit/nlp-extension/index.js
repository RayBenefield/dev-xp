/* eslint max-lines: ['warn', { max: 99, skipBlankLines: true }] */
import get from '@rampant/get'
import { of, from } from 'rxjs'
import { prettify } from '@rampant/logger'
import sanitize from '@rampant-wit/sanitize'
import { filter, mergeMap, map, tap } from 'rxjs/operators'

export default ({ projectId, api, db, logger }) => ({
    key,
    value,
    threshold = 100,
}) =>
    mergeMap(payload => {
        const unsanitizedMessage = get({ $: payload }, value)
        logger.detail(`Finding intent for [${unsanitizedMessage}]...`)
        const message = sanitize(unsanitizedMessage).trim()
        logger.debug(`Sanitized [${unsanitizedMessage}] as [${message}]`)
        if (!message || message.length >= 280) {
            logger.warn('Message too long for Wit AI')
            logger.warn(prettify(message))
            return of({ ...payload, [key]: '-unknown-' })
        }

        return from(
            db.get(`projects/${projectId}/training`, [
                ['samples', 'array-contains', message],
            ])
        ).pipe(
            map(docs => Object.keys(docs)),
            mergeMap(intents => {
                if (intents.length > 0) {
                    logger.detail(
                        `Found [${intents}] in training cache for [${message}]`
                    )
                    return of({ intent: intents[0] })
                }

                logger.detail(`Analyzing [${message}]...`)
                return from(api.analyze(message)).pipe(
                    map(({ entities }) => entities),
                    tap(entities => {
                        logger.debug(`Storing untrained sample suggestions`)
                        logger.debug(prettify(entities))
                        db.set(
                            `projects/${projectId}/untrained/${message}`,
                            entities
                        )
                    }),
                    filter(entities => {
                        if ('intent' in entities) return true

                        logger.detail(`No guesses for [${message}]`)
                        return false
                    }),
                    map(({ intent }) => intent[0]),
                    map(({ value: intent, confidence }) => {
                        const score = Math.round(confidence * 10000) / 100
                        const guess = `${intent} (${score}%)`
                        return { intent, guess, score }
                    }),
                    tap(({ guess }) =>
                        logger.extend(`Guessing [${guess}] for [${message}]`)
                    ),
                    filter(({ score, guess }) => {
                        if (score > threshold) return true

                        logger.detail(
                            `Not above [${threshold}%] threshold [${guess}]`
                        )
                        return false
                    })
                )
            }),
            tap(({ intent }) =>
                logger.debug(`Setting [${intent}] as [${key}]`)
            ),
            map(({ intent }) => ({ ...payload, [key]: intent }))
        )
    })
