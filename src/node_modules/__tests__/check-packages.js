import { resolve } from 'path';
import describe from 'tape-bdd';
import 'loud-rejection/register';
import withBlueTape from 'blue-tape';
import checkPackages from '@kikd/check-packages';

describe(
    'Check Packages',
    it => {
        it('should return empty results when no arguments are given', assert =>
            checkPackages().then(result => assert.deepEqual(result, [])));

        it('should return empty results with empty packages', assert =>
            checkPackages({ packages: [] }).then(result =>
                assert.deepEqual(result, []),
            ));

        it('should return a failing check for a package with no package.json', assert =>
            checkPackages({
                packages: [
                    {
                        dir: resolve(__dirname, 'fixtures/modules/empty-dir'),
                    },
                ],
            }).then(result =>
                assert.deepEqual(result, [
                    {
                        dir: resolve(__dirname, 'fixtures/modules/empty-dir'),
                        publishable: false,
                    },
                ]),
            ));

        it('should return a failing check for a package with no name', assert =>
            checkPackages({
                packages: [
                    {
                        dir: resolve(
                            __dirname,
                            'fixtures/modules/module-empty-package-json',
                        ),
                        // eslint-disable-next-line global-require, import/no-dynamic-require
                        ...require(resolve(
                            __dirname,
                            'fixtures/modules/module-empty-package-json/package.json',
                        )),
                    },
                ],
            }).then(result =>
                assert.deepEqual(result, [
                    {
                        dir: resolve(
                            __dirname,
                            'fixtures/modules/module-empty-package-json',
                        ),
                        publishable: false,
                    },
                ]),
            ));

        it('should return a failing check for a package with main index.js, but no readme', assert =>
            checkPackages({
                packages: [
                    {
                        dir: resolve(
                            __dirname,
                            'fixtures/modules/main-index-js',
                        ),
                        // eslint-disable-next-line global-require, import/no-dynamic-require
                        ...require(resolve(
                            __dirname,
                            'fixtures/modules/main-index-js/package.json',
                        )),
                    },
                ],
            }).then(result =>
                assert.deepEqual(result, [
                    {
                        dir: resolve(
                            __dirname,
                            'fixtures/modules/main-index-js',
                        ),
                        name: 'main-index-js',
                        publishable: false,
                    },
                ]),
            ));

        it('should return a failing check for a package with a defined main app.js, but no readme', assert =>
            checkPackages({
                packages: [
                    {
                        dir: resolve(__dirname, 'fixtures/modules/main-app-js'),
                        // eslint-disable-next-line global-require, import/no-dynamic-require
                        ...require(resolve(
                            __dirname,
                            'fixtures/modules/main-app-js/package.json',
                        )),
                    },
                ],
            }).then(result =>
                assert.deepEqual(result, [
                    {
                        dir: resolve(__dirname, 'fixtures/modules/main-app-js'),
                        name: 'main-app-js',
                        main: 'app.js',
                        publishable: false,
                    },
                ]),
            ));

        it('should return a passing check for a package with a defined main app.js and readme', assert =>
            checkPackages({
                packages: [
                    {
                        dir: resolve(
                            __dirname,
                            'fixtures/modules/main-app-js-readme',
                        ),
                        // eslint-disable-next-line global-require, import/no-dynamic-require
                        ...require(resolve(
                            __dirname,
                            'fixtures/modules/main-app-js-readme/package.json',
                        )),
                    },
                ],
            }).then(result =>
                assert.deepEqual(result, [
                    {
                        dir: resolve(
                            __dirname,
                            'fixtures/modules/main-app-js-readme',
                        ),
                        name: 'main-app-js-readme',
                        main: 'app.js',
                        publishable: true,
                    },
                ]),
            ));
    },
    withBlueTape,
);
