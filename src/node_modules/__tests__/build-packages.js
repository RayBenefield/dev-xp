import { resolve } from 'path';
import describe from 'tape-bdd';
import withBlueTape from 'blue-tape';
import buildPackages from '@kikd/build-packages';

const packages = dir => ({
    packages: [
        {
            dir: resolve(__dirname, `fixtures/${dir}`),
            // eslint-disable-next-line global-require, import/no-dynamic-require
            ...require(resolve(__dirname, `fixtures/${dir}/package.json`)),
        },
    ],
});

describe(
    'Build Packages',
    it => {
        it('should return empty configs with no arguments', assert =>
            buildPackages().then(result => assert.deepEqual(result, [])));

        it('should return empty configs with no packages', assert =>
            buildPackages({ packages: [] }).then(result =>
                assert.deepEqual(result, []),
            ));

        it('should return empty configs when no package has a bin field', assert =>
            buildPackages(packages('no-bin')).then(result =>
                assert.deepEqual(result, []),
            ));

        it('should return empty configs when no package has a bin field', assert =>
            buildPackages(packages('non-object-bin')).then(result =>
                assert.deepEqual(result, []),
            ));

        it('should return rollup config for simple cli', assert =>
            buildPackages(packages('cli-simple-hello')).then(result =>
                assert.pass(result),
            ));
    },
    withBlueTape,
);
