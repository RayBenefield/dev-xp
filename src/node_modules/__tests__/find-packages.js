import { resolve } from 'path';
import describe from 'tape-bdd';
import 'loud-rejection/register';
import withBlueTape from 'blue-tape';
import findPackages from '@kikd/find-packages';

const root = dir => ({ root: `./__tests__/fixtures/repos/${dir}` });
const ignore = (...paths) => ({ ignore: paths });

describe(
    'Find Packages',
    it => {
        it('should error for an empty folder', assert =>
            findPackages(root('empty-dir')).catch(() => assert.pass()));

        it('should error for only a src folder', assert =>
            findPackages(root('empty-src')).catch(() => assert.pass()));

        it('should pass with src/node_modules folder', assert =>
            findPackages(root('no-modules')).then(() => assert.pass()));

        it('should return no projects for an empty modules folder', assert =>
            findPackages(root('no-modules')).then(result =>
                assert.deepEqual(result, []),
            ));

        it('should return no projects for modules folder with no package.json', assert =>
            findPackages(root('no-package-json')).then(result =>
                assert.deepEqual(result, []),
            ));

        it('should return no projects for a module with an empty package.json', assert =>
            findPackages(root('empty-package-json')).then(result =>
                assert.deepEqual(result, []),
            ));

        it('should return a single project', assert =>
            findPackages(root('one-named-package')).then(result =>
                assert.ok(result, [
                    {
                        name: 'module',
                        dir: resolve(
                            __dirname,
                            'fixtures/repos/one-named-package/src/node_modules/module',
                        ),
                        config: { name: 'module' },
                    },
                ]),
            ));

        it('should return multiple projects with depth', assert =>
            findPackages(root('multiple-packages')).then(result => {
                const names = result.map(o => o.name);
                const dirs = result.map(o => o.dir);
                assert.ok(
                    result.length === 3 &&
                        names.includes('module') &&
                        names.includes('@module/test') &&
                        names.includes('@module/another') &&
                        dirs.includes(
                            resolve(
                                __dirname,
                                'fixtures/repos/multiple-packages/src/node_modules/module',
                            ),
                        ) &&
                        dirs.includes(
                            resolve(
                                __dirname,
                                'fixtures/repos/multiple-packages/src/node_modules/@module/test',
                            ),
                        ) &&
                        dirs.includes(
                            resolve(
                                __dirname,
                                'fixtures/repos/multiple-packages/src/node_modules/@module/another',
                            ),
                        ),
                );
            }));

        it('should return a single project after ignore', assert =>
            findPackages({
                ...root('multiple-packages'),
                ...ignore('@module'),
            }).then(result => {
                const names = result.map(o => o.name);
                const dirs = result.map(o => o.dir);
                assert.ok(
                    result.length === 1 &&
                        names.includes('module') &&
                        dirs.includes(
                            resolve(
                                __dirname,
                                'fixtures/repos/multiple-packages/src/node_modules/module',
                            ),
                        ),
                );
            }));
    },
    withBlueTape,
);
