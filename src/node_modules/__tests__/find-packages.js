import mock from 'mock-fs';
import describe from 'tape-bdd';
import findPackages from '@kikd/find-packages';

describe('Find Packages', (it) => {
    it('should error for an empty folder', (assert) => {
        mock({});
        findPackages()
            .catch(() => assert.pass());
        mock.restore();
    });

    it('should error for only a src folder', (assert) => {
        mock({
            src: {},
        });
        findPackages()
            .catch(() => assert.pass());
        mock.restore();
    });

    it('should pass with src/node_modules folder', (assert) => {
        mock({
            src: {
                node_modules: {},
            },
        });
        findPackages()
            .then(() => assert.pass());
        mock.restore();
    });

    it('should return no projects for an empty modules folder', (assert) => {
        mock({
            src: {
                node_modules: {},
            },
        });
        findPackages()
            .then(result => assert.deepEqual(result, []));
        mock.restore();
    });

    it('should return no projects for modules folder with no package.json', (assert) => {
        mock({
            src: {
                node_modules: {
                    empty_module: {},
                },
            },
        });
        findPackages()
            .then(result => assert.deepEqual(result, []));
        mock.restore();
    });

    it('should return no projects for a module with an empty package.json', (assert) => {
        mock({
            src: {
                node_modules: {
                    empty_module: {
                        'package.json': '',
                    },
                },
            },
        });
        findPackages()
            .then(result => assert.deepEqual(result, []));
        mock.restore();
    });
});
