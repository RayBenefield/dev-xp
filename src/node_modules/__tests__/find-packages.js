import blue from 'blue-tape';
import describe from 'tape-bdd';
import findPackages from '@kikd/find-packages';

const root = dir => ({ root: `./__tests__/fixtures/${dir}` });

describe('Find Packages', (it) => {
    it('should error for an empty folder', assert =>
        findPackages(root('empty-dir'))
            .catch(() => assert.pass())
    );

    it('should error for only a src folder', assert =>
        findPackages(root('empty-src'))
            .catch(() => assert.pass())
    );

    it('should pass with src/node_modules folder', assert =>
        findPackages(root('no-modules'))
            .then(() => assert.pass())
    );

    it('should return no projects for an empty modules folder', assert =>
        findPackages(root('no-modules'))
            .then(result => assert.deepEqual(result, []))
    );

    it('should return no projects for modules folder with no package.json', assert =>
        findPackages(root('no-package-json'))
            .then(result => assert.deepEqual(result, []))
    );

    it('should return no projects for a module with an empty package.json', assert =>
        findPackages(root('empty-package-json'))
            .then(result => assert.deepEqual(result, []))
    );

    it('should return a single project', assert =>
        findPackages(root('one-named-package'))
            .then(result => assert.deepEqual(result, [{
                name: 'module',
            }]))
    );
}, blue);
