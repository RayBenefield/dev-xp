import filter from 'lodash.filter'
import intersect from 'lodash.intersection'
import { lt as lessThan, inc } from 'semver'
import collapsePackages from '@kikd/collapse'

const createPatch = ({ name, version, reason }) => ({
    [name]: {
        type: 'patch',
        old: version,
        new: inc(version, 'patch'),
        reason,
    },
})

export default (
    // eslint-disable-next-line no-unused-vars
    { packageNames = [], dependencies = {}, manifests = {}, changes = [] } = {}
) => {
    if (packageNames.length <= 0) return {}

    return (
        packageNames
            // eslint-disable-next-line complexity
            .map(name => {
                const { version } = manifests[name] || {}

                /*

                Packages without a `version` field in their `package.json` will not
                be considered for versioning.

                */
                if (!version) return undefined

                /*

                Packages with a `version` set to `0.0.0` will increase their `patch`
                version as their initial public release and become `0.0.1` no matter
                what other changes exist.

                */
                if (version === '0.0.0') {
                    return {
                        [name]: {
                            type: 'patch',
                            old: version,
                            new: '0.0.1',
                            reason: 'Prereleased',
                        },
                    }
                }

                /*

                Packages with a `version` less than `0.1.0` will increase their
                `patch` version if they or any of their dependencies are updated due
                to being in "development".

                */
                if (lessThan(version, '0.1.0')) {
                    const pkgChanges = filter(
                        changes,
                        change =>
                            change.scopes ? change.scopes.includes(name) : false
                    )

                    if (pkgChanges.length > 0)
                        return createPatch({
                            name,
                            version,
                            reason: `This had ${
                                pkgChanges.length === 1
                                    ? '1 change'
                                    : `${pkgChanges.length} changes`
                            } while in development.`,
                        })

                    if (!dependencies[name]) return undefined

                    const depChanges = filter(
                        changes,
                        change =>
                            change.scopes
                                ? intersect(
                                      dependencies[name].local,
                                      change.scopes
                                  ).length > 0
                                : false
                    )

                    if (depChanges.length > 0)
                        return createPatch({
                            name,
                            version,
                            reason: `There ${
                                depChanges.length === 1
                                    ? 'was 1 change'
                                    : `were ${depChanges.length} changes`
                            } in dependencies while in development.`,
                        })

                    return undefined
                }

                return undefined
            })
            .filter(patch => patch)
            .reduce(collapsePackages, {})
    )
}
