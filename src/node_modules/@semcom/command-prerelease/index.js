import collapse from '@kikd/collapse';
import getContents from '@kikd/prompt-editor';
import effect from '@semcom/prerelease-package';
import template from '@kikd/template-prerelease';
import pickPackage from '@kikd/prompt-pick-package';
import getCheckedPackages from '@kikd/command-check';

const solvable = ['has readme file'];
const fixers = {
    'has readme file': pkg =>
        getContents({
            message: `Write your readme.md for ${pkg.name}`,
            contents: `# ${pkg.name}`,
        }),
};

export default function prerelease(...args) {
    return getCheckedPackages(...args)
        .extend('unpublishable', ({ packages, checks }) =>
            packages.filter(pkg => !checks.packages[pkg.name].publishable),
        )
        .extend('package', ({ unpublishable }) =>
            pickPackage({
                message: 'Which package should we prerelease?',
                packages: unpublishable,
            }),
        )
        .extend('fixable', ({ package: { name }, checks }) =>
            Object.entries(checks.packages[name])
                .filter(([check]) => solvable.includes(check))
                .filter(([, passing]) => !passing)
                .map(([fixable]) => fixable),
        )
        .extend('fixes', ({ package: pkg, fixable }) =>
            Promise.all(
                fixable.map(fix =>
                    fixers[fix](pkg).then(result => ({ [fix]: result })),
                ),
            ).then(results => results.reduce(collapse, {})),
        );
}

export const command = {
    name: 'prerelease',
    run: prerelease,
    template,
    effect,
};
