import collapse from '@kikd/collapse'
import getContents from '@kikd/prompt-editor'
import effect from '@semcom/prerelease-package'
import template from '@semcom/template-prerelease'
import pickPackage from '@kikd/prompt-pick-package'
import getCheckedPackages from '@kikd/command-check'
import getStructures from '@kikd/package-structure'

const solvable = ['has readme file']
const fixers = {
    'has readme file': name =>
        getContents({
            message: `Write your readme.md for ${name}`,
            contents: `# ${name}`,
        }),
}

export default function prerelease(config) {
    return getCheckedPackages(config)
        .extend('unpublishable', ({ packageNames, checks }) =>
            packageNames.filter(name => !checks.packages[name].publishable)
        )
        .extend('name', ({ unpublishable }) =>
            pickPackage({
                message: 'Which package should we prerelease?',
                packageNames: unpublishable,
            })
        )
        .extend(
            'structure',
            ({ name }) => getStructures({ packageNames: [name] })[name]
        )
        .extend('fixable', ({ name, checks }) =>
            Object.entries(checks.packages[name])
                .filter(([check]) => solvable.includes(check))
                .filter(([, passing]) => !passing)
                .map(([fixable]) => fixable)
        )
        .extend('fixes', ({ name, fixable }) =>
            Promise.all(
                fixable.map(fix =>
                    fixers[fix](name).then(result => ({ [fix]: result }))
                )
            ).then(results => results.reduce(collapse, {}))
        )
}

export const command = () => ({
    name: 'prerelease',
    run: prerelease,
    template,
    effect,
})
