import merge from '@transmutation/merging-function'

export default ({ statusFiles = {}, filesToCommit = [] }) => {
    const { staged = [], partial = [] } = statusFiles
    const allFiles = Array.concat([], ...Object.values(statusFiles))
    const keyedFilesToCommit = filesToCommit.reduce((files, file) => {
        if (typeof file === 'string') return merge(files, { [file]: file })
        return merge(files, { [file.file]: { [file.status]: true } })
    }, {})

    // eslint-disable-next-line complexity
    return allFiles.reduce((modifications, file) => {
        if (partial.includes(file) && !(file in keyedFilesToCommit))
            return merge(modifications, { reset: [file] })

        if (
            partial.includes(file) &&
            'staged' in keyedFilesToCommit[file] &&
            !('modified' in keyedFilesToCommit[file])
        )
            return modifications

        if (file in keyedFilesToCommit && !staged.includes(file))
            return merge(modifications, { add: [file] })

        if (staged.includes(file) && !(file in keyedFilesToCommit))
            return merge(modifications, { reset: [file] })

        return modifications
    }, {})
}
