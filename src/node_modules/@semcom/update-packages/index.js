import { resolve } from 'path'

import map from 'lodash.map'
import log from '@dev-xp/log'
import { write, read } from '@dev-xp/json'
import configureGit from 'simple-git/promise'

const git = configureGit()

export default ({
    root,
    updates,
    packageNames = [],
    structures = {},
    latest,
}) => {
    const newReleaseNumber = latest.releaseNumber + 1
    log(`Starting release #${newReleaseNumber}`)

    log('Updating package.json files...')
    return Promise.all(
        packageNames
            .filter(name => name in updates)
            .map(name => {
                const { srcDir } = structures[name] || {}
                const jsonPath = resolve(root, srcDir, 'package.json')
                return read(jsonPath)
                    .then(config => ({ ...config, version: updates[name].new }))
                    .then(config => write(jsonPath, config))
                    .then(() => ({
                        name,
                        version: updates[name].new,
                        file: jsonPath,
                    }))
            })
    )
        .then(async packageUpdates => {
            log('Staging files for commit...')
            await git.add(map(packageUpdates, 'file'))
            return packageUpdates
        })
        .then(async packageUpdates => {
            log('Committing updates...')
            await git.commit(`release(${newReleaseNumber}): Update package versions for ${
                packageUpdates.length > 1
                    ? `${packageUpdates.length} packages.`
                    : '1 package.'
            }
        
${packageUpdates.map(({ name, version }) => `v${version} ${name}`).join('\n')}

[skip ci]
`)
            return packageUpdates
        })
        .then(packageUpdates => {
            log('Tagging commit with package versions...')
            return Promise.all(
                packageUpdates.map(({ name, version }) =>
                    git.addTag(`${name}-v${version}`)
                )
            )
        })
        .then(() => {
            log('Tagging commit with new latest release tag...')
            return git.addTag(`#${newReleaseNumber}`)
        })
}
