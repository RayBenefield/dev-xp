/* eslint-disable no-console */
import { resolve } from 'path'

import map from 'lodash.map'
import jsonFile from 'jsonfile'
import promisify from 'es6-promisify'
import configureGit from 'simple-git/promise'

const readJson = promisify(jsonFile.readFile)
const writeJson = promisify(jsonFile.writeFile)
const git = configureGit()

export default ({ root, updates, packages, latest }) => {
    const newReleaseNumber = latest.releaseNumber + 1
    console.log(`Starting release #${newReleaseNumber}`)

    console.log('Updating package.json files...')
    return Promise.all(
        packages.filter(pkg => pkg.name in updates).map(({ name, dir }) => {
            const jsonPath = resolve(root, dir, 'package.json')
            return readJson(jsonPath)
                .then(config => ({ ...config, version: updates[name].new }))
                .then(config =>
                    writeJson(jsonPath, config, {
                        spaces: 4,
                    })
                )
                .then(() => ({
                    name,
                    version: updates[name].new,
                    file: jsonPath,
                }))
        })
    )
        .then(async packageUpdates => {
            console.log('Staging files for commit...')
            await git.add(map(packageUpdates, 'file'))
            return packageUpdates
        })
        .then(async packageUpdates => {
            console.log('Committing updates...')
            await git.commit(`release(${newReleaseNumber}): Update package versions for ${
                packageUpdates.length > 1
                    ? `${packageUpdates.length} packages.`
                    : '1 package.'
            }
        
${packageUpdates.map(({ name, version }) => `v${version} ${name}`).join('\n')}

[skip ci]
`)
            return packageUpdates
        })
        .then(packageUpdates => {
            console.log('Tagging commit with package versions...')
            return Promise.all(
                packageUpdates.map(({ name, version }) =>
                    git.addTag(`${name}-v${version}`)
                )
            )
        })
        .then(() => {
            console.log('Tagging commit with new latest release tag...')
            return git.addTag(`#${newReleaseNumber}`)
        })
}
