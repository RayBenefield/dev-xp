/* eslint-disable no-unused-vars */
import p from 'parsimmon'
import int from '@dev-xp/parse-int'
import isObject from 'lodash.isobject'

const getNum = index => arr => arr[index]

const language = p.createLanguage({
    lbrace: r => p.string('{'),
    rbrace: r => p.string('}'),
    colon: r => p.string(':'),
    space: r => p.string(' '),
    key: r =>
        p.seq(p.optWhitespace, r.identifier, r.colon, r.space).map(getNum(1)),
    identifier: r => p.regexp(/[a-z_][a-z0-9_]*/i),
    chars: r => p.regexp(/[a-z0-9_:-\s\\']*/i),
    quote: r => p.string('"'),
    string: r => r.chars.wrap(r.quote, r.quote),
    number: r =>
        p.regexp(/[0-9.\-e]*/i).map(number => Math.round(number * 100) / 100),
    true: r => p.string('true'),
    false: r => p.string('false'),
    boolean: r => p.alt(r.true, r.false).map(x => x === 'true'),
    server: r => p.string('Server'),
    static: r => p.string('RuntimeStatic'),
    enums: r => p.alt(r.server, r.static),
    values: r => p.alt(r.boolean, r.enums, r.string, r.number),
    property: r => p.seqObj(['key', r.key], ['value', r.values]),
    objStart: r => p.seq(p.optWhitespace, r.identifier, r.space).map(getNum(1)),
    objValues: r => p.alt(r.property, r.obj).many(),
    objEnd: r => p.seq(p.optWhitespace, r.rbrace),
    obj: r =>
        p.seqObj(
            ['key', r.objStart],
            [
                'value',
                r.objValues.trim(p.optWhitespace).wrap(r.lbrace, r.rbrace),
            ]
        ),
    root: r => r.objValues,
})

export default unparsed =>
    !unparsed ? [] : language.root.tryParse(unparsed.trim())
