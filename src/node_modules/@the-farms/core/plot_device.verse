
using. /Verse.org/Assets
using. /Verse.org/Random
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. Anima
using. Vertex
using. Tableau

ProgressAnim(Duration:float):[]frame= array:
    Frame(ScaleXTo(2.0))
    Frame(ScaleXTo(1.0)).SetTime(Duration)
    Frame(ScaleXTo(-1.0))

PlantAnims(IsPlant:logic):[]frame=
    GrowUp := Frame(ScaleTo(1.25)).SetTime(0.1).SetEasing(EaseIn)
    Shrink := Frame(ScaleTo(0.1), RotateYawBy(180.0), MoveZBy(-100.0)).SetTime(0.2).SetEasing(EaseIn)
    Reset := Frame(ScaleTo(), RotateYawBy(-180.0), MoveZTo()).SetTime(0.5).SetEasing(EaseOut)
    SquishDown := Frame(ScaleTo(0.5)).SetTime(0.1).SetEasing(EaseIn)
    SquishBack := Frame(ScaleTo()).SetTime(0.1).SetEasing(EaseOut)

    if (IsPlant?). array{ Reset.SetTime(0.0), Shrink, Reset, SquishDown, SquishBack }
    else. array{ Reset.SetTime(0.0), GrowUp, Shrink, Reset, SquishDown, SquishBack }

plot_device<public> := class(creative_device, config_device, side_effect_device):
    @editable DirtProp:creative_prop_asset = DefaultCreativePropAsset
    @editable PlantProp:creative_prop_asset = DefaultCreativePropAsset
    @editable BarProp:creative_prop_asset = DefaultCreativePropAsset
    SeedMaterial:material = PolygonFarm.Materials.M_PolygonFarm_03_A
    PlantMaterial:material = PolygonFarm.Materials.MI_Plant_Animated
    DryMaterial:material = TheFarmsAssets.M_Dry
    WetMaterial:material = TheFarmsAssets.M_Wet
    AllMeshes:[string]mesh = map:
        "Corn0" => TheFarmsAssets.SM_Prop_Seeds_01
        "Corn1" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_S
        "Corn2" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_M
        "Corn3" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_L
        "Corn4" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01

    GetResources<override>():[]resource= array:
        resource:
            Type := "Plot"
            Props := map:
                "Stage" => Integer of 0
                "Max Stage" => Integer of 4
                "Plant Type" => Str of ""
                "Exists" => Bool of true
                "Watered" => Bool of false
                "Watered Count" => Num of 0.0
                "Growth Time" => Float of 1.0
                "Plant Stage" => Str of (Path("Plant Type"), "Append", Path("Stage"))
                "Location" => prop_vec3. DefaultFrom := option. Path("Cursor", "Location")
                "Next Stage" => Integer of (Path("Stage"), "+", ONE())
                "Has Plant" => Bool of (Path("Plant Type"), "Not Empty")
                "Is Seed" => Bool of (Path("Stage"), "=", ZERO())
                "Is Plant" => Bool of ("NOT", Path("Is Seed"))
                "Not Watered" => Bool of ("NOT", Path("Watered"))
                "Not Watered Plant" => Bool of (Path("Not Watered"), "AND", Path("Has Plant"))
                "Can Plant" => Bool of ("NOT", Path("Has Plant"))
                "Can Water" => Bool of (Path("Not Watered Plant"), "AND", Path("Not Done"))
                "Can Harvest" => Bool of (Path("Stage"), "=", Path("Max Stage"))
                "Not Done" => Bool of ("NOT", Path("Can Harvest"))
            Actions := map:
                "Action" => Action of array:
                    IsTrue("Can Harvest").Else("Water")
                    Set("Stage").To(ZERO())
                    Set("Plant Type").To(EMPTY())
                "Water" => Action of array:
                    IsTrue("Can Water").Else("Plant")
                    Set("Watered").To(TRUE())
                    Increase("Watered Count").By(ONE())
                    DelayBy("Growth Time")
                    Set("Stage").To("Next Stage")
                    Set("Watered").To(FALSE())
                "Plant" => Action of array:
                    IsTrue("Can Plant")
                    Set("Plant Type").To("Farmer", "Plant")

    GetResourceID<override>()<computes>:?string= false
    GetPerType<override>()<computes>:?string= option. "Plot"
    GetPerSubType<override>()<computes>:?string= option. "Player"
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Loc := State.GetVec3("Location").Get()
        Plant := Spawn(PlantProp, Loc, R3Yaw(GetRandomFloat(0.0, 360.0)))
        Plot := Spawn(DirtProp, Loc)
        Bar := Spawn(BarProp, Loc, S3X(-1.0))

        array:
            PushBool("Has Plant", Toggle(Plant).FN)
            PushBool("Watered", ToggleMaterial(Plot, WetMaterial, DryMaterial).FN)
            PushBool("Is Seed", ToggleMaterial(Plant, SeedMaterial, PlantMaterial).FN)
            PushBool("Is Plant", UpdateAnimWithBool(Plant, PlantAnims).FN)
            PushStr("Plant Stage", Wait(0.2).FN, SetMesh(Plant, AllMeshes).FN)
            Push("Stage", PlayAnim(Plant).FN)
            Push("Watered Count", PlayAnim(Bar).FN)
            PushFloat("Growth Time", UpdateAnimWithFloat(Bar, ProgressAnim).FN)
            # Debug("Can Plant", "{State.Source} Can Plant")
            # Debug("Can Water", "{State.Source} Can Water")
            # Debug("Can Harvest", "{State.Source} Can Harvest")
            # Debug("Is Seed", "{State.Source} Is Seed")
            # Debug("Stage", "{State.Source} Stage")
            # Debug("Next Stage", "{State.Source} Next Stage")
