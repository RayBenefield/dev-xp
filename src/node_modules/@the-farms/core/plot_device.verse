
using. /Verse.org/Assets
using. /Verse.org/Random
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. Anima
using. Vertex
using. Tableau
using. TableauDevice
using. TableauEffect
using. TableauResource

ProgressAnim(Duration:float):[]frame= array:
    Frame(ScaleXBy(-2.0))
    Frame(ScaleXBy(0.5)).SetTime(Duration)
    Frame(ScaleXBy(-1.0))

PlantAnims(IsPlant:logic):[]frame=
    GrowUp := Frame(ScaleBy(1.25)).SetTime(0.1).SetEasing(EaseIn)
    # GrowUp := Frame(ScaleTo(1.25)).SetTime(0.1).SetEasing(EaseIn)
    Shrink := Frame(ScaleBy(0.08), RotateYawBy(180.0), MoveZBy(-100.0)).SetTime(0.2).SetEasing(EaseIn)
    # Shrink := Frame(ScaleTo(0.1), RotateYawBy(180.0), MoveZBy(-100.0)).SetTime(0.2).SetEasing(EaseIn)
    Reset := Frame(ScaleBy(10.0), RotateYawBy(-180.0), MoveZBy(100.0)).SetTime(0.5).SetEasing(EaseOut)
    # Reset := Frame(ScaleTo(), RotateTo(), MoveZBy(100.0)).SetTime(0.5).SetEasing(EaseOut)
    SquishDown := Frame(ScaleBy(0.5)).SetTime(0.1).SetEasing(EaseIn)
    # SquishDown := Frame(ScaleTo(0.5)).SetTime(0.1).SetEasing(EaseIn)
    SquishBack := Frame(ScaleBy(2.0)).SetTime(0.1).SetEasing(EaseOut)
    # SquishBack := Frame(ScaleTo()).SetTime(0.1).SetEasing(EaseOut)

    Start := Frame(ScaleBy(0.1), RotateYawBy(180.0), MoveZBy(-100.0))
    # Start := Frame(ScaleTo(0.1), RotateYawBy(180.0), MoveZBy(-100.0))

    if (IsPlant?). array{ Start, Reset, SquishDown, SquishBack }
    else. array{ GrowUp, Shrink, Reset, SquishDown, SquishBack }

plot_device<public> := class(creative_device, config_device, side_effect_device):
    @editable DirtProp:creative_prop_asset = DefaultCreativePropAsset
    @editable PlantProp:creative_prop_asset = DefaultCreativePropAsset
    @editable BarProp:creative_prop_asset = DefaultCreativePropAsset
    SeedMaterial:material = PolygonFarm.Materials.M_PolygonFarm_03_A
    PlantMaterial:material = PolygonFarm.Materials.MI_Plant_Animated
    DryMaterial:material = TheFarmsAssets.M_Dry
    WetMaterial:material = TheFarmsAssets.M_Wet
    AllMeshes:[string]mesh = map:
        "Corn0" => TheFarmsAssets.SM_Prop_Seeds_01
        "Corn1" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_S
        "Corn2" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_M
        "Corn3" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_L
        "Corn4" => PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01

    GetResources<override>():[]resource= array:
        resource:
            Type := "Plot"
            Props := map:
                "Stage" => prop_int{}
                "Max Stage" => prop_int. Default := 4
                "Plant Type" => prop_str{}
                "Exists" => prop_bool. Default := true
                "Watered" => prop_bool. Default := false
                "Watered Count" => prop_num{}
                "Growth Time" => prop_float. Default := 5.0
                "Plant Stage" => prop_str{ Focus := Path("Plant Type"), FN := "Append", Tweak := Path("Stage") }
                "Location" => prop_vec3. DefaultFrom := option. Path("Cursor", "Location")
                "Next Stage" => prop_int{ Focus := Path("Stage"), FN := "+", Tweak := ONE() }
                "Has Plant" => prop_bool{ Focus := Path("Plant Type"), FN := "Not Empty" }
                "Is Seed" => prop_bool{ Focus := Path("Stage"), FN := "=", Tweak := ZERO() }
                "Is Plant" => prop_bool{ FN := "NOT", Focus := Path("Is Seed") }
                "Not Watered" => prop_bool{ FN := "NOT", Focus := Path("Watered") }
                "Not Watered Plant" => prop_bool{ Focus := Path("Not Watered"), FN := "AND", Tweak := Path("Has Plant") }
                "Can Plant" => prop_bool{ FN := "NOT", Focus := Path("Has Plant") }
                "Can Water" => prop_bool{ Focus := Path("Not Watered Plant"), FN := "AND", Tweak := Path("Not Done") }
                "Can Harvest" => prop_bool{ Focus := Path("Stage"), FN := "=", Tweak := Path("Max Stage") }
                "Not Done" => prop_bool{ FN := "NOT", Focus := Path("Can Harvest") }
            Abilities := map:
                "Plant" => ability. Effects := array:
                    IsTrue("Can Plant")
                    Set("Plant Type").To("Farmer", "Plant")
                "Water" => ability. Effects := array:
                    IsTrue("Can Water")
                    Set("Watered").To(TRUE())
                    Increase("Watered Count").By(ONE())
                    DelayBy("Growth Time")
                    Set("Stage").To("Next Stage")
                    Set("Watered").To(FALSE())
                "Harvest" => ability. Effects := array:
                    IsTrue("Can Harvest")
                    Set("Stage").To(ZERO())
                    Set("Plant Type").To(EMPTY())

    GetResourceID<override>()<computes>:?string= false
    GetPerType<override>()<computes>:?string= option. "Plot"
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Loc := State.GetVec3("Location").Get()
        Plant := Spawn(PlantProp, Loc, R3Yaw(GetRandomFloat(0.0, 360.0)))
        Plot := Spawn(DirtProp, Loc)
        Bar := Spawn(BarProp, Loc, R3(), V3(-1.0, 1.0, 1.0))

        array:
            PushBool("Has Plant", Toggle(Plant).FN)
            PushBool("Watered", ToggleMaterial(Plot, WetMaterial, DryMaterial).FN)
            PushBool("Is Seed", ToggleMaterial(Plant, SeedMaterial, PlantMaterial).FN)
            PushBool("Is Plant", UpdateAnimWithBool(Plant, PlantAnims).FN)
            PushStr("Plant Stage", Wait(0.2).FN, SetMesh(Plant, AllMeshes).FN)
            Push("Stage", PlayAnim(Plant).FN)
            Push("Watered Count", PlayAnim(Bar).FN)
            PushFloat("Growth Time", UpdateAnimWithFloat(Bar, ProgressAnim).FN)
            # Debug("Can Plant", "{State.ResourceID} Can Plant")
            # Debug("Can Water", "{State.ResourceID} Can Water")
            # Debug("Can Harvest", "{State.ResourceID} Can Harvest")
            # Debug("Is Seed", "{State.ResourceID} Is Seed")
            # Debug("Stage", "{State.ResourceID} Stage")
            # Debug("Next Stage", "{State.ResourceID} Next Stage")
            # Debug("X", "{State.ResourceID} X")
            # Debug("Y", "{State.ResourceID} Y")
            # Debug("Location", "{State.ResourceID} Location")
