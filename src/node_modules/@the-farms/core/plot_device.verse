
using. /Verse.org/Assets
using. /Verse.org/Random
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. Anima
using. Vertex
using. Tableau
using. TableauDevice
using. TableauResource

Anims(Index:int):[]frame=
    GrowUp := Frame(ScaleBy(1.25)).SetTime(0.1).SetEasing(EaseIn)
    # GrowUp := Frame(ScaleTo(1.25)).SetTime(0.1).SetEasing(EaseIn)
    Shrink := Frame(ScaleBy(0.08), RotateYawBy(180.0), MoveZBy(-100.0)).SetTime(0.2).SetEasing(EaseIn)
    # Shrink := Frame(ScaleTo(0.1), RotateYawBy(180.0), MoveZBy(-100.0)).SetTime(0.2).SetEasing(EaseIn)
    Reset := Frame(ScaleBy(10.0), RotateYawBy(-180.0), MoveZBy(100.0)).SetTime(0.5).SetEasing(EaseOut)
    # Reset := Frame(ScaleTo(), RotateTo(), MoveZBy(100.0)).SetTime(0.5).SetEasing(EaseOut)
    SquishDown := Frame(ScaleBy(0.5)).SetTime(0.1).SetEasing(EaseIn)
    # SquishDown := Frame(ScaleTo(0.5)).SetTime(0.1).SetEasing(EaseIn)
    SquishBack := Frame(ScaleBy(2.0)).SetTime(0.1).SetEasing(EaseOut)
    # SquishBack := Frame(ScaleTo()).SetTime(0.1).SetEasing(EaseOut)

    Start := Frame(ScaleBy(0.1), RotateYawBy(180.0), MoveZBy(-100.0))
    # Start := Frame(ScaleTo(0.1), RotateYawBy(180.0), MoveZBy(-100.0))

    if (Index = 1). array{ Start, Reset, SquishDown, SquishBack }
    else. array{ GrowUp, Shrink, Reset, SquishDown, SquishBack }

plot_device<public> := class(creative_device, config_device, side_effect_device):
    @editable DirtProp:creative_prop_asset = DefaultCreativePropAsset
    @editable PlantProp:creative_prop_asset = DefaultCreativePropAsset
    @editable BarProp:creative_prop_asset = DefaultCreativePropAsset
    SeedMaterial:material = PolygonFarm.Materials.M_PolygonFarm_03_A
    PlantMaterial:material = PolygonFarm.Materials.MI_Plant_Animated
    DryMaterial:material = TheFarmsAssets.M_Dry
    WetMaterial:material = TheFarmsAssets.M_Wet
    Meshes:[]mesh = array:
        TheFarmsAssets.SM_Prop_Seeds_01
        PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_S
        PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_M
        PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01_L
        PolygonFarm.Meshes.Plants.SM_Prop_Plant_Corn_01

    GetResources<override>():[]resource= array:
        resource:
            Type := "Plot"
            Props := map:
                "ZERO" => prop_float. Default := 0.0
                "ONE" => prop_float. Default := 1.0
                "EMPTY" => prop_str. Default := ""
                "TRUE" => prop_bool. Default := true
                "FALSE" => prop_bool. Default := false
                "Stage" => prop_int{}
                "Max Stage" => prop_int. Default := 4
                "Plant Type" => prop_str{}
                "Exists" => prop_bool. Default := true
                "Watered" => prop_bool. Default := false
                "Watered Count" => prop_num{}
                "Growth Time" => prop_float. Default := 5.0
                "Location" => prop_vec3{}
                "Next Stage" => prop_int{ Focus := Path("Stage"), FN := "+", Tweak := Path("ONE") }
                "Has Plant" => prop_bool{ Focus := Path("Plant Type"), FN := "Not Empty" }
                "Is Seed" => prop_bool{ Focus := Path("Stage"), FN := "=", Tweak := Path("ZERO") }
                "Is Plant" => prop_bool{ FN := "NOT", Focus := Path("Is Seed") }
                "Not Watered" => prop_bool{ FN := "NOT", Focus := Path("Watered") }
                "Not Watered Plant" => prop_bool{ Focus := Path("Not Watered"), FN := "AND", Tweak := Path("Has Plant") }
                "Can Plant" => prop_bool{ FN := "NOT", Focus := Path("Has Plant") }
                "Can Water" => prop_bool{ Focus := Path("Not Watered Plant"), FN := "AND", Tweak := Path("Not Done") }
                "Can Harvest" => prop_bool{ Focus := Path("Stage"), FN := "=", Tweak := Path("Max Stage") }
                "Not Done" => prop_bool{ FN := "NOT", Focus := Path("Can Harvest") }
            Abilities := map:
                "Plant" => array:
                    IsTrue("Can Plant")
                    Set("Plant Type").To("Farmer", "Plant")
                "Water" => array:
                    IsTrue("Can Water")
                    Set("Watered").To("TRUE")
                    Increase("Watered Count").By("ONE")
                    DelayBy("Growth Time")
                    Set("Stage").To("Next Stage")
                    Set("Watered").To("FALSE")
                "Harvest" => array:
                    IsTrue("Can Harvest")
                    Set("Stage").To("ZERO")
                    Set("Plant Type").To("EMPTY")

    GetResourceID<override>()<computes>:?string= false
    GetPerType<override>()<computes>:?string= option. "Plot"
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(GameState:game_state, ResourceID:string, SubTypeID:string)<suspends>:[]side_effect=
        # TODO: These next two lines are temporary until "FinalizedResources" exist
        GameState.AwaitResource(ResourceID)
        Sleep(0.1)
        Loc := GameState.GetVec3Prop(ResourceID, "Location", SubTypeID).Get()
        Plant := SpawnProp(PlantProp, Loc, MakeRotationFromYawPitchRollDegrees(GetRandomFloat(0.0, 360.0), 0.0, 0.0))(0)
        Plot := GameState.SpawnProp(DirtProp, ResourceID, Path("Location"))
        Bar := GameState.SpawnProp(BarProp, ResourceID, Path("Location"))

        if (Prop := Bar?):
            Duration := GameState.GetFloatProp(ResourceID, "Growth Time", SubTypeID).Get()
            if (Anim := Prop.GetAnimationController[]):
                Invisible := frame. Transformers := array. ScaleXBy(-1.0)
                Anim.SetAnimation(array. Invisible.Delta(), ?Mode:=animation_mode.OneShot)
                Anim.Play()
                Sleep(0.0)
                Frames:[]frame = array:
                    frame. Transformers := array. ScaleXBy(-2.0)
                    frame{ Time := Duration, Transformers := array. ScaleXBy(0.5) }
                    frame. Transformers := array. ScaleXBy(-1.0)
                Anim.SetAnimation(Frames.Deltas(), ?Mode:=animation_mode.OneShot)

        array:
            toggle_prop{ Focus := Path("Has Plant"), Prop := Plant }
            toggle_material{ Focus := Path("Watered"), Prop := Plot, True := WetMaterial, False := DryMaterial }
            toggle_material{ Focus := Path("Is Seed"), Prop := Plant, True := SeedMaterial, False := PlantMaterial }
            toggle_animation{ Focus := Path("Is Plant"), Prop := Plant, True := Anims(1).Deltas(), False := Anims(0).Deltas() }
            set_mesh{ Focus := Path("Stage"), Prop := Plant, Meshes := Meshes }
            play_animation{ Focus := Path("Stage"), Prop := Plant }
            play_animation{ Focus := Path("Watered Count"), Prop := Bar }
            # Debug(Path("Can Plant"), "{ResourceID} Can Plant")
            # Debug(Path("Can Water"), "{ResourceID} Can Water")
            # Debug(Path("Can Harvest"), "{ResourceID} Can Harvest")
            # Debug(Path("X"), "{ResourceID} X")
            # Debug(Path("Y"), "{ResourceID} Y")
            # Debug(Path("Location"), "{ResourceID} Location")
