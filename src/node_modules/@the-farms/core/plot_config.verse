
using. /Fortnite.com/Devices
using. /Verse.org/Simulation

using. Numb
using. Tableau
using. TableauResource

plot_config<public> := class(creative_device, config_device):
    GetResources<override>():[]resource= array:
        resource:
            Type := "Plot"
            Props := map:
                "ZERO" => prop_float. Default := 0.0
                "ONE" => prop_float. Default := 1.0
                "EMPTY" => prop_str. Default := ""
                "TRUE" => prop_bool. Default := true
                "FALSE" => prop_bool. Default := false
                "Stage" => prop_int{}
                "Max Stage" => prop_int. Default := 4
                "Plant Type" => prop_str{}
                "Exists" => prop_bool. Default := true
                "Watered" => prop_bool. Default := false
                "Watered Count" => prop_num{}
                "Growth Time" => prop_float. Default := 5.0
                "X" => prop_int{}
                "Y" => prop_int{}
                "X Coord" => prop_float{ Focus := Path("X"), FN := "*", Tweak := Path("Farmer", "Grid Size") }
                "Y Coord" => prop_float{ Focus := Path("Y"), FN := "*", Tweak := Path("Farmer", "Grid Size") }
                "Next Stage" => prop_int{ Focus := Path("Stage"), FN := "+", Tweak := Path("ONE") }
                "Has Plant" => prop_bool{ Focus := Path("Plant Type"), FN := "Not Empty" }
                "Is Seed" => prop_bool{ Focus := Path("Stage"), FN := "=", Tweak := Path("ZERO") }
                "Is Plant" => prop_bool{ FN := "NOT", Focus := Path("Is Seed") }
                "Not Watered" => prop_bool{ FN := "NOT", Focus := Path("Watered") }
                "Not Watered Plant" => prop_bool{ Focus := Path("Not Watered"), FN := "AND", Tweak := Path("Has Plant") }
                "Can Plant" => prop_bool{ FN := "NOT", Focus := Path("Has Plant") }
                "Can Water" => prop_bool{ Focus := Path("Not Watered Plant"), FN := "AND", Tweak := Path("Not Done") }
                "Can Harvest" => prop_bool{ Focus := Path("Stage"), FN := "=", Tweak := Path("Max Stage") }
                "Not Done" => prop_bool{ FN := "NOT", Focus := Path("Can Harvest") }
                "XY Location" => prop_vec2{ Focus := Path("X Coord"), FN := "Append", Tweak := Path("Y Coord") }
                "Location" => prop_vec3{ Focus := Path("XY Location"), FN := "Append", Tweak := Path("ZERO") }
            Abilities := map:
                "Plant" => array:
                    IsTrue("Can Plant")
                    Set("Plant Type").To("Farmer", "Plant")
                "Water" => array:
                    IsTrue("Can Water")
                    Set("Watered").To("TRUE")
                    Increase("Watered Count").By("ONE")
                    DelayBy("Growth Time")
                    Set("Stage").To("Next Stage")
                    Set("Watered").To("FALSE")
                "Harvest" => array:
                    IsTrue("Can Harvest")
                    Set("Stage").To("ZERO")
                    Set("Plant Type").To("EMPTY")
        resource:
            ID := "Farmer"
            Props := map:
                "ZERO" => prop_float. Default := 0.0
                "ONE" => prop_float. Default := 1.0
                "-ONE" => prop_float. Default := -1.0
                "COMMA" => prop_str. Default := ","
                "Plant" => prop_str. Default := "Tomato"
                "Plot Type" => prop_str. Default := "Plot"
                "X" => prop_int{}
                "Y" => prop_int{}
                "Right" => prop_int{ Focus := Path("X"), FN := "+", Tweak := Path("ONE")}
                "Left" => prop_int{ Focus := Path("X"), FN := "+", Tweak := Path("-ONE")}
                "Forward" => prop_int{ Focus := Path("Y"), FN := "+", Tweak := Path("-ONE")}
                "Back" => prop_int{ Focus := Path("Y"), FN := "+", Tweak := Path("ONE")}
                "X Coord" => prop_float{ Focus := Path("X"), FN := "*", Tweak := Path("Grid Size") }
                "Y Coord" => prop_float{ Focus := Path("Y"), FN := "*", Tweak := Path("Grid Size") }
                "Grid Size" => prop_float. Default := 128.0
                "Count" => prop_num{}
                "XY Location" => prop_vec2{ Focus := Path("X Coord"), FN := "Append", Tweak := Path("Y Coord") }
                "Location" => prop_vec3{ Focus := Path("XY Location"), FN := "Append", Tweak := Path("ZERO") }
                "Partial ID" => prop_str{ Focus := Path("X"), FN := "Append", Tweak := Path("COMMA") }
                "Plot ID" => prop_str{ Focus := Path("Partial ID"), FN := "Append", Tweak := Path("Y") }
                "Can Plant" => prop_bool{ Focus := Path("Plot ID"), FN := "Adopt", Tweak := Path("Can Plant") }
                "Can Water" => prop_bool{ Focus := Path("Plot ID"), FN := "Adopt", Tweak := Path("Can Water") }
                "Can Harvest" => prop_bool{ Focus := Path("Plot ID"), FN := "Adopt", Tweak := Path("Can Harvest") }
            Abilities := map:
                "Action" => array:
                    Execute(Path("Plot ID"), "Water")
                    Execute(Path("Plot ID"), "Plant")
                    Execute(Path("Plot ID"), "Harvest")
                    Execute("Create Plot")
                "Create Plot" => array:
                    # TODO - Add If Not Exists check before creating
                    Create("Plot ID").As("Plot Type")
                    Set(Path("Plot ID"), "X").To("X")
                    Set(Path("Plot ID"), "Y").To("Y")
                    Increase("Count").By("ONE")
                "Move Left" => array:
                    Set("X").To("Left")
                "Move Right" => array:
                    Set("X").To("Right")
                "Move Forward" => array:
                    Set("Y").To("Forward")
                "Move Back" => array:
                    Set("Y").To("Back")
