
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

# TODO - Extract Testing Framework from Tableau
using. Tableau
using. Vertex

deltas_test := class(creative_device, test_suite):
    GetName<override>():string = "Deltas"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should ScaleXTo from no transform"
            Test := ScaleXToDefault
        test_case:
            Name := "Should ScaleXTo already at transform"
            Test := ScaleXToSame
        test_case:
            Name := "Should ScaleXTo twice while already at the same transform"
            Test := ScaleXToSameTwice
        test_case:
            Name := "Should ScaleXTo double last"
            Test := ScaleXToDoubleLast
        test_case:
            Name := "Should ScaleXTo double first"
            Test := ScaleXToDoubleFirst


    ScaleXToDefault():?failure =
        # Arrange
        Frames := array:
            Frame(ScaleXTo(2.0))
        Expects := array:
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3X(2.0)
                Time := 0.0
                Interpolation := Linear

        # Act
        Keyframes := Frames.Deltas()

        # Assert
        if (not Keyframes.AllEqual[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleXToSame():?failure =
        # Arrange
        Transform := T(V3(), S3X(2.0))
        Frames := array:
            Frame(ScaleXTo(2.0))
        Expects := array:
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3()
                Time := 0.0
                Interpolation := Linear

        # Act
        Keyframes := Frames.Deltas(Transform)

        # Assert
        if (not Keyframes.AllEqual[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleXToSameTwice():?failure =
        # Arrange
        Transform := T(V3(), S3X(2.0))
        Frames := array:
            Frame(ScaleXTo(2.0))
            Frame(ScaleXTo(2.0))
        Expects := array:
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3()
                Time := 0.0
                Interpolation := Linear
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3()
                Time := 0.0
                Interpolation := Linear

        # Act
        Keyframes := Frames.Deltas(Transform)

        # Assert
        if (not Keyframes.AllEqual[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleXToDoubleLast():?failure =
        # Arrange
        Transform := T()
        Frames := array:
            Frame(ScaleXTo(1.0))
            Frame(ScaleXTo(2.0))
        Expects := array:
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3()
                Time := 0.0
                Interpolation := Linear
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3X(2.0)
                Time := 0.0
                Interpolation := Linear

        # Act
        Keyframes := Frames.Deltas(Transform)

        # Assert
        if (not Keyframes.AllEqual[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleXToDoubleFirst():?failure =
        # Arrange
        Transform := T()
        Frames := array:
            Frame(ScaleXTo(2.0))
            Frame(ScaleXTo(1.0))
        Expects := array:
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3X(2.0)
                Time := 0.0
                Interpolation := Linear
            keyframe_delta:
                DeltaLocation := V3()
                DeltaRotation := R3()
                DeltaScale := S3X(0.5)
                Time := 0.0
                Interpolation := Linear

        # Act
        Keyframes := Frames.Deltas(Transform)

        # Assert
        if (not Keyframes.AllEqual[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false
