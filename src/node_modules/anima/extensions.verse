
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath

ToString<public>(Transform:transform):string=
    "Translation: {Transform.Translation}\n" +
    "Rotation: {Transform.Rotation.ToVector3()}\n" +
    "Scale: {Transform.Scale}"

ToString<public>(Keyframe:keyframe_delta):string=
    "Delta Location: {Keyframe.DeltaLocation}\n" +
    "Delta Rotation: {Keyframe.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}\n" +
    "Delta Scale: {Keyframe.DeltaScale}\n" +
    "Time: {Keyframe.Time}\n" +
    "Interpolation:\n{Keyframe.Interpolation}"

ToString<public>(Bezier:cubic_bezier_parameters):string=
    "X0: {Bezier.X0}\n" +
    "X1: {Bezier.X1}\n" +
    "Y0: {Bezier.Y0}\n" +
    "Y1: {Bezier.Y1}"

(Floats:[]float).ToVector3<public>()<transacts>:vector3= vector3:
    X := Floats[0] or 0.0
    Y := Floats[1] or 0.0
    Z := Floats[2] or 0.0

(V:vector3).ToRotation<public>()<transacts>:rotation=
    MakeRotationFromYawPitchRollDegrees(V.X, V.Y, V.Z)

(Vector3:vector3).Equals(Other:vector3)<decides><transacts>:void=
    IsAlmostEqual[Vector3, Other, 0.001]
(Float:float).AngleEquals(Other:float)<decides><transacts>:void=
    IsAlmostEqual[Float, Other, 1.0]

(Rotation:rotation).ToVector3()<transacts>:vector3= Rotation.GetYawPitchRollDegrees().ToVector3()
(Rotation:rotation).Equals(Other:rotation)<decides><transacts>:void=
    # IsAlmostEqual[Distance(Rotation, Other), 0.0, 0.001]
    Rotation.GetAxis().Equals[Other.GetAxis()]
    Rotation.GetAngle() = Other.GetAngle()
    # Rotation.GetAngle().AngleEquals[Other.GetAngle()]

(Keyframe:keyframe_delta).Equals(Other:keyframe_delta)<decides><transacts>:void=
    Keyframe.DeltaLocation.Equals[Other.DeltaLocation]
    Keyframe.DeltaRotation.Equals[Other.DeltaRotation]
    Keyframe.DeltaScale.Equals[Other.DeltaScale]
    Keyframe.Time = Other.Time
    Keyframe.Interpolation.Equals[Other.Interpolation]

(Interpolation:cubic_bezier_parameters).Equals(Other:cubic_bezier_parameters)<decides><transacts>:void=
    Interpolation.X0 = Other.X0
    Interpolation.Y0 = Other.Y0
    Interpolation.X1 = Other.X1
    Interpolation.Y1 = Other.Y1

(Keyframes:[]keyframe_delta).AllEqual(Others:[]keyframe_delta)<decides><transacts>:void=
    Keyframes.Length = Others.Length
    for (Index->Keyframe:Keyframes, Other := Others[Index]). Keyframe.Equals[Other]

(Anims:[]frame).Deltas<public>():[]keyframe_delta=
    for (Anim:Anims). Anim.Delta(vector3{})

ToString<public>(Result:await_next_keyframe_result):string = case(Result):
    await_next_keyframe_result.KeyframeReached => "Keyframe Reached"
    await_next_keyframe_result.NotPlaying => "Not Playing"
    await_next_keyframe_result.AnimationAborted => "Animation Aborted"
