
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Banding
using. Tableau
using. Vertex

(Keyframes:[]keyframe_delta).AsString<public>():string= (for(K:Keyframes). "{K}").DebugString("KEYFRAMES")

ToString<public>(Keyframe:keyframe_delta):string= Tab("[KEYFRAME]") +
    WithIndent("Delta Location: {Keyframe.DeltaLocation}") +
    WithIndent("Delta Rotation: {Keyframe.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}") +
    WithIndent("Delta Scale: {Keyframe.DeltaScale}") +
    WithIndent("Time: {Keyframe.Time}") +
    WithIndent("Interpolation: {Keyframe.Interpolation}") +
    EndTab()

ToString<public>(Bezier:cubic_bezier_parameters):string= Tab("[BEZIER]") +
    WithIndent("X0: {Bezier.X0}") +
    WithIndent("X1: {Bezier.X1}") +
    WithIndent("Y0: {Bezier.Y0}") +
    WithIndent("Y1: {Bezier.Y1}") +
    EndTab()

(Keyframe:keyframe_delta).Equals(Other:keyframe_delta)<decides><transacts>:void=
    Keyframe.DeltaLocation.Equals[Other.DeltaLocation]
    Keyframe.DeltaRotation.Equals[Other.DeltaRotation]
    Keyframe.DeltaScale.Equals[Other.DeltaScale]
    Keyframe.Time = Other.Time
    Keyframe.Interpolation.Equals[Other.Interpolation]

(Interpolation:cubic_bezier_parameters).Equals(Other:cubic_bezier_parameters)<decides><transacts>:void=
    Interpolation.X0 = Other.X0
    Interpolation.Y0 = Other.Y0
    Interpolation.X1 = Other.X1
    Interpolation.Y1 = Other.Y1

(Keyframes:[]keyframe_delta).AllEqual(Others:[]keyframe_delta)<decides><transacts>:void=
    Keyframes.Length = Others.Length
    for (Index->Keyframe:Keyframes, Other := Others[Index]). Keyframe.Equals[Other]

(Anims:[]frame).Deltas<public>():[]keyframe_delta=
    for (Anim:Anims). Anim.Delta(vector3{})
(Anims:[]frame).Deltas<public>(Transform:transform):[]keyframe_delta=
    var CurrentTransform:transform = Transform
    for (Anim:Anims):
        Delta := Anim.Delta(CurrentTransform)
        set CurrentTransform = CurrentTransform.Apply(Delta)
        Delta

(Transform:transform).Apply<public>(Keyframe:keyframe_delta):transform=
    NewTranslation := Transform.Translation + Keyframe.DeltaLocation
    NewRotation := Transform.Rotation.RotateBy(Keyframe.DeltaRotation)
    NewScale := Transform.Scale * Keyframe.DeltaScale
    T(NewTranslation, NewRotation, NewScale)

ToString<public>(Result:await_next_keyframe_result):string = case(Result):
    await_next_keyframe_result.KeyframeReached => "Keyframe Reached"
    await_next_keyframe_result.NotPlaying => "Not Playing"
    await_next_keyframe_result.AnimationAborted => "Animation Aborted"
