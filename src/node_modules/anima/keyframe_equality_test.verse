
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. TableauTesting

keyframe_equality_test := class(creative_device, test_suite):
    GetName<override>():string = "Keyframe Equality"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be able to compare keyframes to equal"
            Test := KeyframeEquals
        test_case:
            Name := "Should be see different location deltas"
            Test := KeyframeNotEqualsLocation
        test_case:
            Name := "Should be see different rotation deltas"
            Test := KeyframeNotEqualsRotation
        test_case:
            Name := "Should be see different scale deltas"
            Test := KeyframeNotEqualsScale
        test_case:
            Name := "Should be see different times"
            Test := KeyframeNotEqualsTime
        test_case:
            Name := "Should be see different interpolations"
            Test := KeyframeNotEqualsInterpolation

    KeyframeEquals():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (not Keyframe.Equals[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false

    KeyframeNotEqualsLocation():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3. X := 1.0
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsRotation():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(180.0, 0.0, 0.0)
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsScale():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3. Z := 1.0
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsTime():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 1.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsInterpolation():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseOut

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false
