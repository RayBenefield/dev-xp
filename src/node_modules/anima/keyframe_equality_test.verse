
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

# TODO - Extract Testing Framework from Tableau
using. Tableau

keyframe_equality_test := class(creative_device, test_suite):
    GetName<override>():string = "Keyframe Equality"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be able to compare keyframes to equal"
            Test := KeyframeEquals
        test_case:
            Name := "Should be see different location deltas"
            Test := KeyframeNotEqualsLocation
        test_case:
            Name := "Should be see different rotation deltas"
            Test := KeyframeNotEqualsRotation
        test_case:
            Name := "Should be see different scale deltas"
            Test := KeyframeNotEqualsScale
        test_case:
            Name := "Should be see different times"
            Test := KeyframeNotEqualsTime
        test_case:
            Name := "Should be see different interpolations"
            Test := KeyframeNotEqualsInterpolation
        test_case:
            Name := "Should all be equal"
            Test := AllKeyframesEqual
        test_case:
            Name := "Should all not be equal due to length"
            Test := AllKeyframesNotEqualLength

    KeyframeEquals():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (not Keyframe.Equals[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false

    KeyframeNotEqualsLocation():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3. X := 1.0
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsRotation():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(180.0, 0.0, 0.0)
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsScale():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3. Z := 1.0
            Time := 0.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsTime():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 1.0
            Interpolation := EaseIn

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    KeyframeNotEqualsInterpolation():?failure =
        # Arrange
        Keyframe := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseOut

        # Act, Assert
        if (Keyframe.Equals[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    AllKeyframesEqual():?failure=
        Keyframe1 := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Keyframe2 := keyframe_delta:
            DeltaLocation := vector3. X := 1.0
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        ExpectedKeyframe1 := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        ExpectedKeyframe2 := keyframe_delta:
            DeltaLocation := vector3. X := 1.0
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := array{ ExpectedKeyframe1, ExpectedKeyframe2 }

        # Act
        Keyframes := array{ Keyframe1, Keyframe2 }

        # Assert
        if (not Keyframes.AllEqual[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false

    AllKeyframesNotEqualLength():?failure=
        Keyframe1 := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Keyframe2 := keyframe_delta:
            DeltaLocation := vector3. X := 1.0
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        ExpectedKeyframe1 := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := array{ ExpectedKeyframe1 }

        # Act
        Keyframes := array{ Keyframe1, Keyframe2 }

        # Assert
        if (Keyframes.AllEqual[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    AllKeyframesNotEqualDifferent():?failure=
        Keyframe1 := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Keyframe2 := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        ExpectedKeyframe1 := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        ExpectedKeyframe2 := keyframe_delta:
            DeltaLocation := vector3. X := 1.0
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{}
            Time := 0.0
            Interpolation := EaseIn
        Expects := array{ ExpectedKeyframe1, ExpectedKeyframe2 }

        # Act
        Keyframes := array{ Keyframe1, Keyframe2 }

        # Assert
        if (Keyframes.AllEqual[Expects]). return fail("Keyframes should not be equal")

        # Pass
        return false

    AllKeyframesEqualArray():?failure=
        Keyframes := array:
            keyframe_delta:
                DeltaLocation := vector3{}
                DeltaRotation := IdentityRotation()
                DeltaScale := vector3{}
                Time := 0.0
                Interpolation := EaseIn
            keyframe_delta:
                DeltaLocation := vector3. X := 1.0
                DeltaRotation := IdentityRotation()
                DeltaScale := vector3{}
                Time := 0.0
                Interpolation := EaseIn
        Expects := array:
            keyframe_delta:
                DeltaLocation := vector3{}
                DeltaRotation := IdentityRotation()
                DeltaScale := vector3{}
                Time := 0.0
                Interpolation := EaseIn
            keyframe_delta:
                DeltaLocation := vector3. X := 1.0
                DeltaRotation := IdentityRotation()
                DeltaScale := vector3{}
                Time := 0.0
                Interpolation := EaseIn

        # Act, Assert
        if (not Keyframes.AllEqual[Expects]). return fail("Keyframes should be equal")

        # Pass
        return false
