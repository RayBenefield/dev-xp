
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. TableauTesting

<#>
    GrowUp - Time := 0.1, EaseIn, scale_to{ All := 1.25 }
    GrowUp - Time := 0.1, EaseIn, ScaleTo(1.25)
    Shrink - Time := 0.2, EaseIn, scale_to{ All := 0.1 }, rotate_to{ Yaw := 180.0 }, move_by{ Z := -100.0 }
    Shrink - Time := 0.2, EaseIn, ScaleTo(0.1), RotateYawTo(180.0), MoveZBy(-100.0)
    Reset - Time := 0.5, EaseOut, scale_to{}, rotate_to{}, move_to{}
    Reset - Time := 0.5, EaseOut, ScaleTo(), RotateTo(), MoveTo()
    Squish - Time := 0.1, EaseIn, scale_to{ All := 0.5 }
    Squish - Time := 0.1, EaseIn, ScaleTo(0.5)
    Reset - Time := 0.1, EaseOut, scale_to{}
    Reset - Time := 0.1, EaseOut, ScaleTo(), RotateTo(), MoveTo()

    Shrink - scale_to{ All := 0.1 }, rotate_to{ Yaw := 180.0 }, move_by{ Z := -100.0 }
    Shrink - ScaleTo(0.1), RotateYawTo(180.0), MoveZBy(-100.0)
    Reset - Time := 0.5, EaseOut, scale_to{}, rotate_to{}, move_to{}
    Reset - Time := 0.5, EaseOut, ScaleTo(), RotateTo(), MoveTo()
    Squish - Time := 0.1, EaseIn, scale_to{ All := 0.5 }
    Squish - Time := 0.1, EaseIn, ScaleTo(0.5)
    Reset - Time := 0.1, EaseOut, scale_to{}
    Reset - Time := 0.1, EaseOut, ScaleTo(), RotateTo(), MoveTo()

    GrowUp:keyframe_delta = keyframe_delta:
        DeltaLocation := vector3 { X:=0.0, Y:=0.0, Z:=0.0 }
        DeltaRotation := IdentityRotation()
        DeltaScale := vector3 { X:=1.25, Y:=1.25, Z:=1.25 }
        Time := 0.1
        Interpolation := EaseIn
    Shrink:keyframe_delta = keyframe_delta:
        DeltaLocation := vector3 { X:=0.0, Y:=0.0, Z:=-100.0 }
        DeltaRotation := MakeRotationFromYawPitchRollDegrees(180.0, 0.0, 0.0)
        DeltaScale := vector3 { X:=0.08, Y:=0.08, Z:=0.08 }
        Time := 0.2
        Interpolation := EaseIn
    Shrink:keyframe_delta = keyframe_delta:
        DeltaLocation := vector3 { X:=0.0, Y:=0.0, Z:=-100.0 }
        DeltaRotation := MakeRotationFromYawPitchRollDegrees(180.0, 0.0, 0.0)
        DeltaScale := vector3 { X:=0.1, Y:=0.1, Z:=0.1 }
        Time := 0.0
    Reset:keyframe_delta = keyframe_delta:
        DeltaLocation := vector3 { X:=0.0, Y:=0.0, Z:=100.0 }
        DeltaRotation := MakeRotationFromYawPitchRollDegrees(-180.0, 0.0, 0.0)
        DeltaScale := vector3 { X:=10.0, Y:=10.0, Z:=10.0 }
        Time := 0.5
        Interpolation := EaseOut
    Squish:keyframe_delta = keyframe_delta:
        DeltaLocation := vector3 { X:=0.0, Y:=0.0, Z:=0.0 }
        DeltaRotation := IdentityRotation()
        DeltaScale := vector3 { X:=0.5, Y:=0.5, Z:=0.5 }
        Time := 0.1
        Interpolation := EaseIn
    Reset:keyframe_delta = keyframe_delta:
        DeltaLocation := vector3 { X:=0.0, Y:=0.0, Z:=0.0 }
        DeltaRotation := IdentityRotation()
        DeltaScale := vector3 { X:=2.0, Y:=2.0, Z:=2.0 }
        Time := 0.1
        Interpolation := EaseOut

    Invisible - scale_to{ X := -1.0 }
    Invisible - ScaleXTo(-1.0)
    Initial := keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{X:=-1.0, Y:=1.0, Z:=1.0}
            Time := 0.0
    Full - scale_to{ X := 2.0 }
    Full - ScaleXTo(2.0)
    Empty - Time := Duration, scale_to{ X := 1.0 }
    Empty - Time := Duration, ScaleXTo(1.0)
    Invisible - scale_to{ X := -1.0 }
    Invisible - ScaleXTo(-1.0)
    KeyFrames:[]keyframe_delta = array:
        keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{X:=-2.0, Y:=1.0, Z:=1.0}
            Time := 0.0
        keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{X:=0.5, Y:=1.0, Z:=1.0}
            Time := Duration
        keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{X:=-1.0, Y:=1.0, Z:=1.0}
            Time := 0.0

anima_test := class(creative_device, test_suite):
    GetName<override>():string = "Anima"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should create an identity keyframe with no settings"
            Test := IdentityKeyframe
        test_case:
            Name := "Should return identity keyframe for reset frame"
            Test := IdentityReset
        test_case:
            Name := "Should handle simple move by X to keyframes"
            Test := MoveBySimpleX
        test_case:
            Name := "Should handle simple move by Y to keyframes"
            Test := MoveBySimpleY
        test_case:
            Name := "Should handle simple move by Z to keyframes"
            Test := MoveBySimpleZ
        test_case:
            Name := "Should handle simple move to X to keyframes"
            Test := MoveToSimpleX
        test_case:
            Name := "Should handle simple move to Y to keyframes"
            Test := MoveToSimpleY
        test_case:
            Name := "Should handle simple move to Z to keyframes"
            Test := MoveToSimpleZ
        test_case:
            Name := "Should handle on 1,1,1 move by X to keyframes"
            Test := MoveByFromUnitX
        test_case:
            Name := "Should handle on 1,1,1 move by Y to keyframes"
            Test := MoveByFromUnitY
        test_case:
            Name := "Should handle on 1,1,1 move by Z to keyframes"
            Test := MoveByFromUnitZ
        test_case:
            Name := "Should handle on 1,1,1 move to X to keyframes"
            Test := MoveToFromUnitX
        test_case:
            Name := "Should handle on 1,1,1 move to Y to keyframes"
            Test := MoveToFromUnitY
        test_case:
            Name := "Should handle on 1,1,1 move to Z to keyframes"
            Test := MoveToFromUnitZ
        test_case:
            Name := "Should handle on 2,2,2 move by X to keyframes"
            Test := MoveByFrom2UnitX
        test_case:
            Name := "Should handle on 2,2,2 move by Y to keyframes"
            Test := MoveByFrom2UnitY
        test_case:
            Name := "Should handle on 2,2,2 move by Z to keyframes"
            Test := MoveByFrom2UnitZ
        test_case:
            Name := "Should handle on 2,2,2 move to X to keyframes"
            Test := MoveToFrom2UnitX
        test_case:
            Name := "Should handle on 2,2,2 move to Y to keyframes"
            Test := MoveToFrom2UnitY
        test_case:
            Name := "Should handle on 2,2,2 move to Z to keyframes"
            Test := MoveToFrom2UnitZ
        test_case:
            Name := "Should handle simple rotate by Yaw to keyframes"
            Test := RotateBySimpleYaw
        test_case:
            Name := "Should handle simple rotate by Pitch to keyframes"
            Test := RotateBySimplePitch
        test_case:
            Name := "Should handle simple rotate by Roll to keyframes"
            Test := RotateBySimpleRoll
        test_case:
            Name := "Should handle simple rotate to Yaw to keyframes"
            Test := RotateToSimpleYaw
        test_case:
            Name := "Should handle simple rotate to Pitch to keyframes"
            Test := RotateToSimplePitch
        test_case:
            Name := "Should handle simple rotate to Roll to keyframes"
            Test := RotateToSimpleRoll
        test_case:
            Name := "Should handle on 30 angles rotate by Yaw to keyframes"
            Test := RotateByOn30Yaw
        test_case:
            Name := "Should handle on 30 angles rotate by Pitch to keyframes"
            Test := RotateByOn30Pitch
        test_case:
            Name := "Should handle on 30 angles rotate by Roll to keyframes"
            Test := RotateByOn30Roll
        test_case:
            Name := "Should handle on 30 angles rotate to Yaw to keyframes"
            Test := RotateToOn30Yaw
        test_case:
            Name := "Should handle on 30 angles rotate to Pitch to keyframes"
            Test := RotateToOn30Pitch
        test_case:
            Name := "Should handle on 30 angles rotate to Roll to keyframes"
            Test := RotateToOn30Roll
        test_case:
            Name := "Should handle on 90 angles rotate by Yaw to keyframes"
            Test := RotateByOn90Yaw
        test_case:
            Name := "Should handle on 90 angles rotate by Pitch to keyframes"
            Test := RotateByOn90Pitch
        test_case:
            Name := "Should handle on 90 angles rotate by Roll to keyframes"
            Test := RotateByOn90Roll
        # test_case:
        #     Name := "Should handle on 90 angles rotate to Yaw to keyframes"
        #     Test := RotateToOn90Yaw
        # test_case:
        #     Name := "Should handle on 90 angles rotate to Pitch to keyframes"
        #     Test := RotateToOn90Pitch
        # test_case:
        #     Name := "Should handle on 90 angles rotate to Roll to keyframes"
        #     Test := RotateToOn90Roll
        test_case:
            Name := "Should handle simple scale by X to keyframes"
            Test := ScaleBySimpleX
        test_case:
            Name := "Should handle simple scale by Y to keyframes"
            Test := ScaleBySimpleY
        test_case:
            Name := "Should handle simple scale by Z to keyframes"
            Test := ScaleBySimpleZ
        test_case:
            Name := "Should handle simple scale by All to keyframes"
            Test := ScaleBySimpleAll
        test_case:
            Name := "Should handle simple scale to X to keyframes"
            Test := ScaleToSimpleX
        test_case:
            Name := "Should handle simple scale to Y to keyframes"
            Test := ScaleToSimpleY
        test_case:
            Name := "Should handle simple scale to Z to keyframes"
            Test := ScaleToSimpleZ
        test_case:
            Name := "Should handle simple scale to All to keyframes"
            Test := ScaleToSimpleAll
        test_case:
            Name := "Should handle 2,2,2 scale by X to keyframes"
            Test := ScaleByFrom2X
        test_case:
            Name := "Should handle 2,2,2 scale by Y to keyframes"
            Test := ScaleByFrom2Y
        test_case:
            Name := "Should handle 2,2,2 scale by Z to keyframes"
            Test := ScaleByFrom2Z
        test_case:
            Name := "Should handle 2,2,2 scale by All to keyframes"
            Test := ScaleByFrom2All
        test_case:
            Name := "Should handle 2,2,2 scale to X to keyframes"
            Test := ScaleToFrom2X
        test_case:
            Name := "Should handle 2,2,2 scale to Y to keyframes"
            Test := ScaleToFrom2Y
        test_case:
            Name := "Should handle 2,2,2 scale to Z to keyframes"
            Test := ScaleToFrom2Z
        test_case:
            Name := "Should handle 2,2,2 scale to All to keyframes"
            Test := ScaleToFrom2All
        test_case:
            Name := "Should handle 4,4,4 scale by X to keyframes"
            Test := ScaleByFrom4X
        test_case:
            Name := "Should handle 4,4,4 scale by Y to keyframes"
            Test := ScaleByFrom4Y
        test_case:
            Name := "Should handle 4,4,4 scale by Z to keyframes"
            Test := ScaleByFrom4Z
        test_case:
            Name := "Should handle 4,4,4 scale by All to keyframes"
            Test := ScaleByFrom4All
        test_case:
            Name := "Should handle 4,4,4 scale to X to keyframes"
            Test := ScaleToFrom4X
        test_case:
            Name := "Should handle 4,4,4 scale to Y to keyframes"
            Test := ScaleToFrom4Y
        test_case:
            Name := "Should handle 4,4,4 scale to Z to keyframes"
            Test := ScaleToFrom4Z
        test_case:
            Name := "Should handle 4,4,4 scale to All to keyframes"
            Test := ScaleToFrom4All
        test_case:
            Name := "BUG: Transform does not affect Move"
            Test := BUGTransformDoesNotAffectMove

    IdentityKeyframe():?failure =
        # Arrange
        Anim := frame{}
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    IdentityReset():?failure =
        # Arrange
        Anim := frame. Transformers := array{ move_to{}, rotate_to{}, scale_to{} }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveBySimpleX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveXBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ X := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveBySimpleY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveYBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Y := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveBySimpleZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveZBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Z := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToSimpleX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveXTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ X := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToSimpleY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveYTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Y := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToSimpleZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveZTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Z := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveByFromUnitX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveXBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ X := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 1.0, Y := 1.0, Z := 1.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveByFromUnitY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveYBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Y := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 1.0, Y := 1.0, Z := 1.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveByFromUnitZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveZBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Z := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 1.0, Y := 1.0, Z := 1.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToFromUnitX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveXTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 1.0, Y := 1.0, Z := 1.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToFromUnitY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveYTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 1.0, Y := 1.0, Z := 1.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToFromUnitZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveZTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 1.0, Y := 1.0, Z := 1.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveByFrom2UnitX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveXBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ X := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 2.0, Y := 2.0, Z := 2.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveByFrom2UnitY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveYBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Y := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 2.0, Y := 2.0, Z := 2.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveByFrom2UnitZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveZBy(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Z := 1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 2.0, Y := 2.0, Z := 2.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToFrom2UnitX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveXTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ X := -1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 2.0, Y := 2.0, Z := 2.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToFrom2UnitY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveYTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Y := -1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 2.0, Y := 2.0, Z := 2.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    MoveToFrom2UnitZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ MoveZTo(1.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{ Z := -1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(vector3{ X := 2.0, Y := 2.0, Z := 2.0 })

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateBySimpleYaw():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateYawBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(30.0, 0.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(transform{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateBySimplePitch():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotatePitchBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 30.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(transform{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateBySimpleRoll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateRollBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 0.0, 30.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(transform{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToSimpleYaw():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateYawTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(30.0, 0.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(transform{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToSimplePitch():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotatePitchTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 30.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(transform{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToSimpleRoll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateRollTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 0.0, 30.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Keyframe := Anim.Delta(transform{})

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateByOn30Yaw():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateYawBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(30.0, 0.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(30.0, 30.0, 30.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateByOn30Pitch():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotatePitchBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 30.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(30.0, 30.0, 30.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateByOn30Roll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateRollBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 0.0, 30.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(30.0, 30.0, 30.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToOn30Yaw():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateYawTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(30.0, 30.0, 30.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToOn30Pitch():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotatePitchTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(30.0, 30.0, 30.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToOn30Roll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateRollTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(30.0, 30.0, 30.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateByOn90Yaw():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateYawBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(30.0, 0.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(90.0, 90.0, 90.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateByOn90Pitch():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotatePitchBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 30.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(90.0, 90.0, 90.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateByOn90Roll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateRollBy(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 0.0, 30.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(90.0, 90.0, 90.0)
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToOn90Yaw():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateYawTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(-60.0, 0.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(90.0, 90.0, 90.0)
        Keyframe := Anim.Delta(Transform)
        Print("---Yaw---")
        Print("-Result YPR: {Keyframe.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}")
        Print("-Expected YPR: {Expected.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}")
        Print("-Result: {Keyframe.DeltaRotation.GetAxis()} - {Keyframe.DeltaRotation.GetAngle()}")
        Print("-Expected: {Expected.DeltaRotation.GetAxis()} - {Expected.DeltaRotation.GetAngle()}")
        Print("-Distance: {Distance(Keyframe.DeltaRotation, Expected.DeltaRotation)}")

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToOn90Pitch():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotatePitchTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, -60.0, 0.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(90.0, 90.0, 90.0)
        Keyframe := Anim.Delta(Transform)
        Print("---Pitch---")
        Print("-Result YPR: {Keyframe.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}")
        Print("-Expected YPR: {Expected.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}")
        Print("-Result: {Keyframe.DeltaRotation.GetAxis()} - {Keyframe.DeltaRotation.GetAngle()}")
        Print("-Expected: {Expected.DeltaRotation.GetAxis()} - {Expected.DeltaRotation.GetAngle()}")
        Print("-Distance: {Distance(Keyframe.DeltaRotation, Expected.DeltaRotation)}")

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    RotateToOn90Roll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ RotateRollTo(30.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(0.0, 0.0, -60.0)
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Rotation := MakeRotationFromYawPitchRollDegrees(90.0, 90.0, 90.0)
        Keyframe := Anim.Delta(Transform)
        Print("---Roll---")
        Print("-Result YPR: {Keyframe.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}")
        Print("-Expected YPR: {Expected.DeltaRotation.GetYawPitchRollDegrees().ToVector3()}")
        Print("-Result: {Keyframe.DeltaRotation.GetAxis()} - {Keyframe.DeltaRotation.GetAngle()}")
        Print("-Expected: {Expected.DeltaRotation.GetAxis()} - {Expected.DeltaRotation.GetAngle()}")
        Print("-Distance: {Distance(Keyframe.DeltaRotation, Expected.DeltaRotation)}")

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleBySimpleX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleXBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleBySimpleY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleYBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 2.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleBySimpleZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleZBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleBySimpleAll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToSimpleX():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleXTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToSimpleY():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleYTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 2.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToSimpleZ():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleZTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToSimpleAll():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom2X():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleXBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom2Y():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleYBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 2.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom2Z():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleZBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom2All():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom2X():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleXTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom2Y():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleYTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom2Z():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleZTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom2All():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom4X():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleXBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom4Y():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleYBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 2.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom4Z():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleZBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleByFrom4All():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleBy(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 2.0, Y := 2.0, Z := 2.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom4X():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleXTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 0.5, Y := 1.0, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom4Y():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleYTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 0.5, Z := 1.0 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom4Z():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleZTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 1.0, Y := 1.0, Z := 0.5 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    ScaleToFrom4All():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 0.5, Y := 0.5, Z := 0.5 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform. Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false

    <#> CONTEXT
        A bug existed where if the transform's translation exists,
        but no Move action exists the translation is used for DeltaLocation
    BUGTransformDoesNotAffectMove():?failure =
        # Arrange
        Anim := frame. Transformers := array{ ScaleTo(2.0) }
        Expected:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3{}
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3{ X := 0.5, Y := 0.5, Z := 0.5 }
            Time := 0.0
            Interpolation := Linear

        # Act
        Transform := transform:
            Translation := vector3{ X := 128.0, Y := 128.0, Z := 128.0 }
            Scale := vector3{ X := 4.0, Y := 4.0, Z := 4.0 }
        Keyframe := Anim.Delta(Transform)
        Print("{Keyframe}")

        # Assert
        if (not Keyframe.Equals[Expected]). return fail("Keyframes should be equal")

        # Pass
        return false
