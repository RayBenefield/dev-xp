
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. Vertex

CopyFrame<constructor>(Old:frame)<transacts> := frame:
    Time := Old.Time
    Easing := Old.Easing
    Transformers := Old.Transformers

Frame<public><constructor>(T:transformer) :=
    frame. Transformers := array. T
Frame<public><constructor>(T1:transformer, T2:transformer) :=
    frame. Transformers := array{ T1, T2 }
Frame<public><constructor>(T1:transformer, T2:transformer, T3:transformer) :=
    frame. Transformers := array{ T1, T2, T3 }

frame<public> := class<concrete>():
    Time<public>:float = 0.0
    SetTime<public>(T:float):frame= frame:
        CopyFrame<constructor>(Self)
        Time := T

    Easing<public>:cubic_bezier_parameters = Linear
    SetEasing<public>(E:cubic_bezier_parameters):frame= frame:
        CopyFrame<constructor>(Self)
        Easing := E

    Transformers<public>:[]transformer = array{}

    Delta<public>():keyframe_delta= Delta(transform{})
    Delta<public>(Vector3:vector3):keyframe_delta= Delta(transform. Translation := Vector3)
    Delta<public>(BaseTransform:transform):keyframe_delta= keyframe_delta:
        DeltaLocation := DeltaTranslation(BaseTransform)
        DeltaRotation := DeltaRotation(BaseTransform).ToRotation()
        DeltaScale := DeltaScale(BaseTransform)
        Time := Time
        Interpolation := Easing

    DeltaTranslation(BaseTransform:transform):vector3=
        Translators := Transformers.Filter(IsMover)
        if (Translators.Length > 0):
            return Translators.Reduce(UseTransformer, BaseTransform.Translation)
        else:
            return vector3{}

    DeltaRotation(BaseTransform:transform):vector3=
        Rotators := Transformers.Filter(IsRotator)
        if (Rotators.Length > 0):
            BaseYawPitchRoll := BaseTransform.Rotation.GetYawPitchRollDegrees().ToVector3()
            return Rotators.Reduce(UseTransformer, BaseYawPitchRoll)
        else:
            return IdentityRotation().GetYawPitchRollDegrees().ToVector3()

    DeltaScale(BaseTransform:transform):vector3=
        Scalers := Transformers.Filter(IsScaler)
        if (Scalers.Length > 0):
            return Scalers.Reduce(UseTransformer, BaseTransform.Scale)
        else:
            return vector3{ X := 1.0, Y := 1.0, Z := 1.0 }

IsMover(T:transformer)<decides><transacts>:void= T.GetType() = transformer_type.Move
IsRotator(T:transformer)<decides><transacts>:void= T.GetType() = transformer_type.Rotate
IsScaler(T:transformer)<decides><transacts>:void= T.GetType() = transformer_type.Scale
UseTransformer(Transformer:transformer, Final:vector3):vector3= Transformer.Transform(Final)
