const stylingPrecendence = ['value'];
const stylers = {
    value: value => node => ({ ...node, value }),
};

const applyStyle = ({ node, style }) => {
    if (style.value) return style.value;
    const finalNode = stylingPrecendence.reduce(
        (inProcessing, currentStyling) =>
            stylers[currentStyling](style[currentStyling])(node),
        node,
    );
    return finalNode.value;
};

export default style => node => {
    if (!node || !node.type) return '';
    switch (node.type) {
        case 'tag':
            if (style && node.tag in style) {
                return applyStyle({ node, style: style[node.tag] });
            }
            return '';
        case 'text':
            return node.text || '';
        default:
    }
    return '';
};
