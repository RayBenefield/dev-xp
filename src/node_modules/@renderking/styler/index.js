import chalk from 'chalk'

const stylingPrecendence = ['value', 'font', 'display']
const stylers = {
    value: value => ({ node }) => ({ ...node, value }),
    display: type => ({ node, previous }) => ({
        ...node,
        value:
            type === 'none'
                ? ''
                : type === 'block'
                    ? `${
                        previous &&
                      previous.value &&
                      previous.value.endsWith('\n')
                            ? ''
                            : '\n'
                    }${node.value}\n`
                    : node.value,
    }),
    font: styles => ({ node }) => ({
        ...node,
        value: styles
            .split('.')
            .reduce((newValue, style) => chalk[style](newValue), node.value),
    }),
}

const applyStyle = ({ node, previous, style }) =>
    stylingPrecendence.reduce(
        (inProcessing, currentStyling) =>
            currentStyling in style
                ? /* eslint-disable indent */
                  stylers[currentStyling](style[currentStyling])({
                      node: inProcessing,
                      previous,
                  })
                : inProcessing,
        node
    )

// eslint-disable-next-line complexity
export default style => ({ node, previous } = {}) => {
    if (!node || !node.type) return ''
    switch (node.type) {
        case 'tag':
            if (style && node.tag in style) {
                return applyStyle({ node, previous, style: style[node.tag] })
            }
            return { ...node, value: '' }
        case 'text':
            return node.text ? { ...node, value: node.text } : { value: '' }
        default:
    }
    return { value: '' }
}
