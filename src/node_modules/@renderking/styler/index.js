import chalk from 'chalk';

const stylingPrecendence = ['value', 'font', 'display'];
const stylers = {
    value: value => node => ({ ...node, value }),
    display: type => node => ({
        ...node,
        value:
            type === 'none' // eslint-disable-line no-nested-ternary
                ? ''
                : type === 'block' ? `\n${node.value}\n` : node.value,
    }),
    font: styles => node => ({
        ...node,
        value: styles
            .split('.')
            .reduce((newValue, style) => chalk[style](newValue), node.value),
    }),
};

const applyStyle = ({ node, style }) => {
    const finalNode = stylingPrecendence.reduce(
        (inProcessing, currentStyling) =>
            currentStyling in style
                ? stylers[currentStyling](style[currentStyling])(inProcessing)
                : inProcessing,
        node,
    );
    return finalNode.value || '';
};

export default style => node => {
    if (!node || !node.type) return '';
    switch (node.type) {
        case 'tag':
            if (style && node.tag in style) {
                return applyStyle({ node, style: style[node.tag] });
            }
            return '';
        case 'text':
            return node.text || '';
        default:
    }
    return '';
};
