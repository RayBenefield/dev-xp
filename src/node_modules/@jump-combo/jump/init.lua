local mode = function(mode)
    if (mode == MovementMode.NONE) then
        return 'None'
    elseif (mode == MovementMode.WALKING) then
        return 'Walking'
    elseif (mode == MovementMode.FALLING) then
        return 'Falling'
    elseif (mode == MovementMode.SWIMMING) then
        return 'Swimming'
    elseif (mode == MovementMode.FLYING) then
        return 'Flying'
    else
        return 'Unknown'
    end
end

local oldMode
local newMode
local timeSpent = 0
local target = 0.5
local startingDecay = -2
local rateOfDecay = -1
local rateOfGrowthOfDecay = 0.07
local comboCount = 0
local comboResetLimit = 0.3
local comboResetTime = 1
local currentPlayer

local resetCombo = function()
    print('►►►Reset Combo')
    startTime = nil
    comboCount = 0
    currentPlayer.jumpVelocity = 500
    currentPlayer.maxWalkSpeed = 1000
    currentPlayer.groundFriction = 8.0
    currentPlayer.gravityScale = 1.9
end

Tick = function()
    if (startTime) then
        timeFromStart = time() - startTime
        if (timeFromStart > comboResetTime) then
            resetCombo()
        end
    else
        if (goingUp) then
            airTime = time() - startJumpTime
            currentPlayer.gravityScale = 1.9*math.exp(.9 * airTime)
            if (airTime > 2) then
                goingUp = false
                startJumpTime = nil
                -- currentPlayer.gravityScale = 5*math.exp(2 * comboCount)
                print('weighing player down', currentPlayer.gravityScale)
            end
        end
    end
end

local OnMovementModeChanged = function(player, newMode)
    currentPlayer = player
    if (newMode == MovementMode.WALKING) then
        goingUp = false
        startTime = time()
        local gravityEffect = 0.4 * math.exp(-0.05 * comboCount)
        currentPlayer.gravityScale = 1.9
        print('reseting gravity to', currentPlayer.gravityScale)
    end

    if (startTime and newMode == MovementMode.FALLING) then
        currentPlayer.gravityScale = 1.9
        goingUp = true
        startJumpTime = time()

        print('----------')
        timeSpent = time() - startTime
        startTime = nil
        print('Time from Landing:', timeSpent)

        decay = math.abs(target - timeSpent)
        print('Distance from target:', decay)

        local rateOfDecay = startingDecay * math.exp(rateOfGrowthOfDecay * comboCount)
        print('Combo Count:', comboCount)
        print('Rate of Decay:', rateOfDecay)

        multiplier = 2 * math.exp(rateOfDecay * decay)
        oppositeMultiplier = 0.5 * math.exp(-1 * rateOfDecay * decay)
        print('Multiplier:', multiplier)

        if (multiplier < comboResetLimit) then
            resetCombo()
        else
            comboCount = comboCount + 1
            local actualEffect = 0.175 * multiplier * math.exp(comboCount * -0.1)
            player.jumpVelocity = player.jumpVelocity * (actualEffect + 1)
            local walkEffect = .05 * multiplier * math.exp(comboCount * .025)
            player.maxWalkSpeed = player.maxWalkSpeed * (walkEffect + 1)
            -- local frictionEffect = oppositeMultiplier * math.exp(comboCount * -0.5)
            -- player.groundFriction = player.groundFriction * frictionEffect
            print('NEW JUMP VELOCITY:', player.jumpVelocity)
            print('NEW WALK SPEED:', player.maxWalkSpeed)
            print('NEW GRAVITY SCALE:', player.gravityScale)
        end
    end
end

local OnPlayerJoined = function(player)
    player.movementModeChangedEvent:Connect(OnMovementModeChanged)
end

Game.playerJoinedEvent:Connect(OnPlayerJoined)
