import { resolve } from 'path'

import { json } from '@dev-xp/fs'
import mapCollection from 'lodash.map'
import setupYoutube from '@rai/youtube'
import { sync as root } from '@dev-xp/root'

const imgPath = name => resolve(root(), `data/${name}/${name}.png`)

json.read(resolve(root(), `data/yt-vids.json`)).then(vids => {
    const thumbnails = mapCollection(vids, (id, name) => ({
        id,
        name,
        path: imgPath(name),
    }))

    return json
        .read(`${__dirname}/credentials.json`)
        .then(({ web }) => setupYoutube(web))
        .then(yt => Promise.all(thumbnails.map(yt.updateThumbnail)))
})

// const request = await Youtube.videos.insert(
//     {
//         requestBody: {
//             // Video title and description
//             snippet: {
//                 title: 'DevLog Upload test',
//                 description: 'Test video upload via YouTube API'
//             },
//             // I don't want to spam my subscribers
//             status: {
//                 privacyStatus: 'private',
//             },
//         },
//         // This is for the callback function
//         part: 'id, snippet,status',

//         // Create the readable stream to upload the video
//         media: {
//             body: fs.createReadStream(`${__dirname}/video.mp4`),
//         },
//     },
//     {
//         onUploadProgress: evt => {
//             Logger.log(evt)
//             Logger.log(`${prettyBytes(evt.bytesRead)} bytes uploaded.`)
//         },
//     },
//     (uploadErr, data) => {
//         if (uploadErr) console.log(uploadErr)
//         if (data) console.log(data)

//         console.log('Done.')
//         process.exit()
//     }
// )
