/**
 * This script uploads a video (specifically `video.mp4` from the current
 * directory) to YouTube,
 *
 * To run this script you have to create OAuth2 credentials and download them
 * as JSON and replace the `credentials.json` file. Then install the
 * dependencies:
 *
 * npm i r-json lien opn bug-killer
 *
 * Don't forget to run an `npm i` to install the `youtube-api` dependencies.
 * */

const fs = require('fs')

const Youtube = require('youtube-api')
const readJson = require('r-json')
const Lien = require('lien')
const Logger = require('bug-killer')
const opn = require('opn')
const prettyBytes = require('pretty-bytes')

// I downloaded the file from OAuth2 -> Download JSON
const CREDENTIALS = readJson(`${__dirname}/credentials.json`)
console.log(CREDENTIALS)

// Init lien server
const server = new Lien({
    host: 'localhost',
    port: 5000,
})

// Authenticate
// You can access the Youtube resources via OAuth2 only.
// https://developers.google.com/youtube/v3/guides/moving_to_oauth#service_accounts
const oauth = Youtube.authenticate({
    type: 'oauth',
    client_id: CREDENTIALS.web.client_id,
    client_secret: CREDENTIALS.web.client_secret,
    redirect_url: CREDENTIALS.web.redirect_uris[0],
})

opn(
    oauth.generateAuthUrl({
        access_type: 'offline',
        scope: ['https://www.googleapis.com/auth/youtube.upload'],
    })
)

// Handle oauth2 callback
server.addPage('/oauth2callback', lien => {
    Logger.log(
        `Trying to get the token using the following code: ${lien.query.code}`
    )
    oauth.getToken(lien.query.code, async (err, tokens) => {
        if (err) {
            lien.lien(err, 400)
            return Logger.log(err)
        }

        Logger.log('Got the tokens.')

        oauth.setCredentials(tokens)

        lien.end(
            'The video is being uploaded. Check out the logs in the terminal.'
        )

        const request = await Youtube.videos.insert(
            {
                requestBody: {
                    // Video title and description
                    snippet: {
                        title: 'DevLog Upload test',
                        description: 'Test video upload via YouTube API',
                    },
                    // I don't want to spam my subscribers
                    status: {
                        privacyStatus: 'private',
                    },
                },
                // This is for the callback function
                part: 'id, snippet,status',

                // Create the readable stream to upload the video
                media: {
                    body: fs.createReadStream(`${__dirname}/video.mp4`),
                },
            },
            {
                onUploadProgress: evt => {
                    Logger.log(evt)
                    Logger.log(`${prettyBytes(evt.bytesRead)} bytes uploaded.`)
                },
            },
            (uploadErr, data) => {
                if (uploadErr) console.log(uploadErr)
                if (data) console.log(data)

                console.log('Done.')
                process.exit()
            }
        )
        console.log(request)

        return Logger.log(err)
    })
})
