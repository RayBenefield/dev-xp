
using { /Verse.org/Simulation }
using. /UnrealEngine.com/Temporary/SpatialMath

using { Numb }
using { Vertex }

goo<public>(t:type) := class:
    Init<public>(Default:t)<suspends>:void =
        var Value:t = Default
        sync:
            loop:
                GetEvent.Await()
                Getted.Signal(Value)
            loop:
                set Value = Updated.Await()

    Updated:event(t) = event(t){}
    Getted:event(t) = event(t){}
    UpdatedEvent<public>():event(t) = Updated
    Set<public>(NewValue:t):void=
        Getted.Signal(NewValue)
        Updated.Signal(NewValue)

    GetEvent:event() = event(){}
    Get<public>()<suspends>:t =
        race:
            ReturnValue := Getted.Await()
            block:
                GetEvent.Signal()
                Sleep(Inf)
        return ReturnValue

Computed<public>(VM1:goo(t), VM2:goo(u), Transform:type{_(:t, :u):v} where t:type, u:type, v:type):goo(v)=
    ResultVM:goo(v) = goo(v){}
    spawn. Combine(VM1, VM2, Transform, ResultVM)
    return ResultVM

Combine<public>(VM1:goo(t), VM2:goo(u), Transform:type{_(:t, :u):v}, ResultVM:goo(v) where t:type, u:type, v:type)<suspends>:void=
    var First:t = VM1.Get()
    var Second:u = VM2.Get()

    spawn. ResultVM.Init(Transform(First, Second))
    loop:
        NewPair := race:
            block:
                set First = VM1.UpdatedEvent().Await()
                (First, Second)
            block:
                set Second = VM2.UpdatedEvent().Await()
                (First, Second)
        Transformed := Transform(NewPair)
        ResultVM.Set(Transformed)

Map<public>(VM:goo(t), Transform:type{_(:t):u} where t:type, u:type):goo(u)=
    ResultVM:goo(u) = goo(u){}
    spawn. MapTransformer(VM, Transform, ResultVM)
    return ResultVM

MapTransformer<public>(VM:goo(t), Transform:type{_(:t):u}, ResultVM:goo(u) where t:type, u:type)<suspends>:void=
    var Value:t = VM.Get()

    spawn. ResultVM.Init(Transform(Value))
    loop:
        set Value = VM.UpdatedEvent().Await()
        Transformed := Transform(Value)
        ResultVM.Set(Transformed)

(StringGoo:string_goo).ToMsg<public>():message_goo=
    message_goo. VM := Map(StringGoo, Str2Msg)

MsgGoo<public>(NewVM:goo(message)):message_goo = message_goo. VM := NewVM
message_goo<public> := class(goo(message)):
    VM<public>:goo(message) = goo(message){}
    Init<override>(Default:message)<suspends>:void = VM.Init(Default)
    Set<override>(NewValue:message):void = VM.Set(NewValue)
    Get<override>()<suspends>:message = VM.Get()
    UpdatedEvent<override>():event(message) = VM.Updated

# [BUG] Can't do this cuz overloading thinks this is the same as a string argument
# StrGoo<public>():string_goo= StrGoo("")
StrGoo<public>(NewVM:goo(string)):string_goo= string_goo. VM := NewVM
StrGoo<public>(Default:string):string_goo=
    VM := string_goo{}
    spawn. VM.Init(Default)
    VM
string_goo<public> := class(goo(string)):
    VM<public>:goo(string) = goo(string){}
    var Latest<public>:string = ""
    Init<override>(Default:string)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:string):void=
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:string = VM.Get()
    UpdatedEvent<override>():event(string) = VM.Updated

goo_int<public> := class(goo(int)):
    VM<public>:goo(int) = goo(int){}
    var Latest<public>:int = 0
    Init<override>(Default:int)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:int):void=
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:int = VM.Get()
    UpdatedEvent<override>():event(int) = VM.Updated

FloatGoo<public>(NewVM:goo(float)):float_goo= float_goo. VM := NewVM
FloatGoo<public>():float_goo= FloatGoo(0.0)
FloatGoo<public>(Default:float):float_goo=
    VM := float_goo{}
    spawn. VM.Init(Default)
    VM
float_goo<public> := class(goo(float)):
    VM<public>:goo(float) = goo(float){}
    var Latest<public>:float = 0.0
    Init<override>(Default:float)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:float):void=
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:float = VM.Get()
    UpdatedEvent<override>():event(float) = VM.Updated

# [BUG] Can't do this cuz overloading thinks this is the same as an optional argument or parametric?
# AgentGoo<public>():agent_goo= AgentGoo(false)
# AgentGoo<public>(NewVM:goo(?agent)):agent_goo= agent_goo. VM := NewVM
AgentGoo<public>(Default:?agent):agent_goo=
    VM := agent_goo{}
    spawn. VM.Init(Default)
    VM
agent_goo<public> := class(goo(?agent)):
    VM<public>:goo(?agent) = goo(?agent){}
    var Latest<public>:?agent = false
    Init<override>(Default:?agent)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:?agent):void =
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:?agent = VM.Get()
    UpdatedEvent<override>():event(?agent) = VM.Updated

NumGoo<public>(NewVM:goo(num)):num_goo = num_goo. VM := NewVM
NumGoo<public>():num_goo= NumGoo(num{})
NumGoo<public>(Default:float):num_goo= NumGoo(num. Value := Default)
NumGoo<public>(Default:num):num_goo=
    VM := num_goo{}
    spawn. VM.Init(Default)
    VM
num_goo<public> := class(goo(num)):
    VM<public>:goo(num) = goo(num){}
    var Latest<public>:num = num{}
    Init<override>(Default:num)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:num):void =
        if (not NewValue.Equals[Latest]):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:num = VM.Get()
    UpdatedEvent<override>():event(num) = VM.Updated

BoolGoo<public>(NewVM:goo(logic)):bool_goo = bool_goo. VM := NewVM
BoolGoo<public>(Default:logic):bool_goo=
    VM := bool_goo{}
    spawn. VM.Init(Default)
    VM
bool_goo<public> := class(goo(logic)):
    VM<public>:goo(logic) = goo(logic){}
    var Latest<public>:logic = false
    Init<override>(Default:logic)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:logic):void =
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:logic = VM.Get()
    UpdatedEvent<override>():event(logic) = VM.Updated

Vec2Goo<public>(NewVM:goo(vector2)):vec2_goo= vec2_goo. VM := NewVM
Vec2Goo<public>():vec2_goo= Vec2Goo(vector2{})
Vec2Goo<public>(Default:vector2):vec2_goo=
    VM := vec2_goo{}
    spawn. VM.Init(Default)
    VM
vec2_goo<public> := class(goo(vector2)):
    VM<public>:goo(vector2) = goo(vector2){}
    var Latest<public>:vector2 = vector2{}
    Init<override>(Default:vector2)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:vector2):void =
        if (not IsAlmostEqual[NewValue, Latest, 0.01]):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:vector2 = VM.Get()
    UpdatedEvent<override>():event(vector2) = VM.Updated
