/* eslint-disable max-lines */
import open from 'open'
import log from '@dev-xp/log'
import restify from 'restify'
import youtube from 'youtube-api'
import prettyBytes from 'pretty-bytes'
import { exists, readStream } from '@dev-xp/fs'

const updateThumbnail = ({ id: videoId, name, path }) => {
    if (!exists(path)) throw new Error('Thumbnail does not exist.')

    return youtube.thumbnails.set(
        {
            videoId,
            requestBody: {},
            media: {
                mimeType: 'image/png',
                body: readStream(path),
            },
        },
        {
            onUploadProgress: evt => {
                log(`${name} - ${prettyBytes(evt.bytesRead)} bytes uploaded.`)
            },
        },
        (uploadErr, data) => {
            if (uploadErr) log(uploadErr)
            if (data) log(data.data)

            log(`Finished ${name}.`)
        }
    )
}

export default ({ clientId, clientSecret, redirectUris }) =>
    new Promise((resolve, rej) => {
        const server = restify.createServer({
            formatters: {
                'text/html': (req, res, body) =>
                    `<html><body>${body}</body></html>`,
            },
        })
        server.use(restify.plugins.queryParser())

        const oauth = youtube.authenticate({
            type: 'oauth',
            client_id: clientId,
            client_secret: clientSecret,
            redirect_url: redirectUris[0],
        })

        open(
            oauth.generateAuthUrl({
                access_type: 'offline',
                scope: ['https://www.googleapis.com/auth/youtube.upload'],
            })
        )

        server.get('/oauth2callback', (req, res) => {
            log(
                `Trying to get the token using the following code: ${req.query.code}`
            )

            oauth.getToken(req.query.code, async (err, tokens) => {
                if (err) return rej(err)
                log('Got the tokens.')

                oauth.setCredentials(tokens)
                res.header('content-type', 'text/html')
                res.send('Credientials obtained... this can be closed now.')
                return resolve({ updateThumbnail })
            })
        })

        server.listen(5000)
    })
