import { of, from, merge } from 'rxjs'
import { get, isTemplate } from '@rampant/get'
import { filter, map, share } from 'rxjs/operators'
import createPipeline from '@rampant/pipeline-creator'

export default ({ db, mixerChat }) => async (source, sourcePool) => {
    const sourceTypes = {
        from: ({ items = [] }) => from(items),
        db: ({ name }) =>
            db
                // TODO: Replace `testing` with Project ID
                .onDocumentChange(`projects/testing/custom-db/${name}`)
                .pipe(filter(_ => _)),
        'mixer-chat': ({ channelId, userId }) =>
            mixerChat({ channelId, userId }),
        merge: ({ dependencies }) =>
            merge(
                ...dependencies.map(dependency => sourcePool[dependency])
            ).pipe(map(({ params }) => params)),
        blank: () => of({}),
    }

    const { type = 'blank', extensions = [], intent } = source
    const typeCreator = sourceTypes[type]
    const stream = await typeCreator(source)
    const extenders = extensions.map(createPipeline())

    return stream.pipe(
        ...extenders,
        map(params => ({
            intent: isTemplate(intent) ? get({ $: params }, intent) : intent,
            params,
            source,
        })),
        share()
    )
}
