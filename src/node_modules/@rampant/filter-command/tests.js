import describe from '@kikd/tape'
import filterCommand from '@rampant/filter-command'

describe('Command Filter', it => {
    it('allow all messages with no filters', assert => {
        const filter = filterCommand()
        const result = filter({})
        assert.equals(result, true)
    })

    it('allow only streamer messages with streamer filter', assert => {
        const filter = filterCommand({ streamer: true })
        const result = filter({ userRoles: ['Owner'] })
        assert.equals(result, true)
    })

    it('filter non-streamer messages with streamer filter', assert => {
        const filter = filterCommand({ streamer: true })
        const result = filter({ userRoles: ['User'] })
        assert.equals(result, false)
    })

    it('allow user messages with user filter', assert => {
        const filter = filterCommand({ user: 'Bob' })
        const result = filter({ userName: 'Bob' })
        assert.equals(result, true)
    })

    it('filter wrong user messages with user filter', assert => {
        const filter = filterCommand({ user: 'Bob' })
        const result = filter({ userName: 'Bill' })
        assert.equals(result, false)
    })

    it('allow only mod messages with mod filter', assert => {
        const filter = filterCommand({ mod: true })
        const result = filter({ userRoles: ['Mod'] })
        assert.equals(result, true)
    })

    it('filter non-mod messages with mod filter', assert => {
        const filter = filterCommand({ mod: true })
        const result = filter({ userRoles: ['User'] })
        assert.equals(result, false)
    })

    it('allow only sub messages with sub filter', assert => {
        const filter = filterCommand({ sub: true })
        const result = filter({ userRoles: ['Subscriber'] })
        assert.equals(result, true)
    })

    it('filter non-sub messages with sub filter', assert => {
        const filter = filterCommand({ mod: true })
        const result = filter({ userRoles: ['User'] })
        assert.equals(result, false)
    })

    it('allow mods or streamer messages with mod/sub filter', assert => {
        const filter = filterCommand({ mod: true, streamer: true })
        const result = filter({ userRoles: ['Mod'] })
        assert.equals(result, true)
    })
})
