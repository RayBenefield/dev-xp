/* eslint-disable */
import readline from 'readline'

import argv from 'argv'
import log from '@dev-xp/log'
import { fromEvent } from 'rxjs'
import { db } from '@rampant/ai'
import { readStream } from '@dev-xp/fs'
import { firestore } from 'firebase-admin'
import sanitize from '@rampant-wit/sanitize'
import { bufferCount, distinct, map, mergeMap, takeUntil } from 'rxjs/operators'

argv.version('v0.0.0')
argv.info('Migrate a file of logged guesses to the database.')

argv.option([
    {
        name: 'path',
        short: 'p',
        type: 'path',
        description: 'What file should be used to fill the database',
        example: '--path=/path/to/file',
    },
    {
        name: 'name',
        short: 'n',
        type: 'string',
        description: 'Name of the project to fill with untrained data',
        example: '--name=channel-name',
    },
])

const { FieldValue } = firestore
const { options: { path, name } } = argv.run()
const { raw: store } = db

const rl = readline.createInterface({
    input: readStream(path),
})

// eslint-disable-next-line no-new-func
const looseJsonParse = obj => Function(`"use strict";return (${obj})`)()

fromEvent(rl, 'line')
    .pipe(
        takeUntil(fromEvent(rl, 'close')),
        map(line => looseJsonParse(line)),
        distinct(({ message }) => message),
        map(({ message, value, confidence }) => ({
            key: sanitize(message),
            contents: {
                intent: value === 'Unknown' ? [] : [{ value, confidence }],
            },
        })),
        bufferCount(245),
        mergeMap(messages => {
            const batch = store.batch()
            messages.forEach(({ key, contents }) => {
                batch.set(
                    store.doc(`projects/${name}/untrained/${key}`),
                    contents
                )
                batch.update(store.doc(`projects/${name}`), {
                    numOfUntrainedSamples: FieldValue.increment(1),
                })
            })
            return batch.commit()
        }, 1)
    )
    .subscribe(_ => _, _ => _, () => log('DONE!!!'))
