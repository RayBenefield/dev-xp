/* eslint-disable max-nested-callbacks */
import express from 'express'
import admin from 'firebase-admin'
import mapKeys from 'lodash.mapkeys'
import createCrypto from '@dev-xp/crypto'
import functions from 'firebase-functions'
import capitalize from 'lodash.capitalize'
import createDb from '@rampant-firebase/db'
import createRepo from '@rampant-auth/repo'
import createTwitchAuth from '@rampant-twitch/auth'
import createTwitterAuth from '@rampant-twitter/auth'
import cookieParser from '@rampant-firebase/cookie-parser'

const twitterCreds = functions.config().twitter
const twitchCreds = functions.config().twitch
const encryptionKey = functions.config().crypt.key

const crypto = createCrypto(encryptionKey)
const auth = {
    twitter: createTwitterAuth({
        ...twitterCreds,
        callback: 'https://rampant.ai/callback/twitter',
        crypto,
    }),
    twitch: createTwitchAuth({
        ...twitchCreds,
        callback: 'https://rampant.ai/callback/twitch',
        crypto,
    }),
}

const authApp = express()
const authRouter = express.Router()
authRouter.use(cookieParser())

admin.initializeApp()
const firestore = admin.firestore()
const stubLogger = {
    error: () => {},
    warn: () => {},
    platform: () => {},
    plugin: () => {},
    intent: () => {},
    extend: () => {},
    detail: () => {},
    debug: () => {},
}
const logger = {
    ...stubLogger,
    child: () => stubLogger,
}
// eslint-disable-next-line no-unused-vars
const db = createDb({ db: firestore, logger })
const authRepo = createRepo({ db, crypto })

authRouter.get('/twitch', async (req, res) => {
    // Scopes for Viewer
    // const scopes = ['chat:read', 'chat:edit', 'user_read', 'user_follows_edit'].join('+')
    // Scopes for Streamer
    const scopes = [
        'chat:read',
        'chat:edit',
        'channel:moderate',
        'user:read:email',
        'user:edit:follows',
        'channel:read:subscriptions',
        'user:edit:broadcast',
        'user:read:broadcast',
        'moderation:read',
        'clips:edit',
    ]
    res.redirect(auth['twitch'].getAuthUrl({ scopes, state: req.cookies }))
})

authRouter.get('/twitter', async (req, res) => {
    const authUrl = await auth['twitter'].getAuthUrl(req.cookies)
    res.redirect(authUrl)
})

authApp.use('/auth', authRouter)
exports.auth = functions.https.onRequest(authApp)

const cbApp = express()
const cbRouter = express.Router()

const setCookies = (res, state) => user => {
    const oldCookies = crypto.decrypt(state)
    const cookies = { ...oldCookies, ...user }
    res.cookie('__session', JSON.stringify(cookies))
}

const rampantAuth = {
    callback: platform => (req, res) =>
        auth[platform]
            .getAccessToken(req.query)
            .then(({ credentials, user }) => {
                const userId = 'raybenefield'
                const data = mapKeys(
                    user,
                    (_, key) => `${platform}${capitalize(key)}`
                )

                return Promise.all([
                    authRepo.updateUser({ userId, data }),
                    authRepo.saveToken({ credentials, userId, platform }),
                ]).then(() => data)
            })
            .then(setCookies(res, req.query.state, platform))
            .then(() => res.redirect('/')),
}

cbRouter.get('/twitter', rampantAuth.callback('twitter'))
cbRouter.get('/twitch', rampantAuth.callback('twitch'))

cbApp.use('/callback', cbRouter)
exports.callback = functions.https.onRequest(cbApp)
