import axios from 'axios'
import express from 'express'
import admin from 'firebase-admin'
import functions from 'firebase-functions'
import createDb from '@rampant-firebase/db'
import { rest } from '@rampant-twitch/rest'
import { classToPlain } from 'class-transformer'
import { encrypt, decrypt } from '@dev-xp/crypto'
import { getOAuthRequestToken } from '@rampant-twitter/auth'

const auth = express()
const authRouter = express.Router()

admin.initializeApp()
const firestore = admin.firestore()
const stubLogger = {
    error: () => {},
    warn: () => {},
    platform: () => {},
    plugin: () => {},
    intent: () => {},
    extend: () => {},
    detail: () => {},
    debug: () => {},
}
const logger = {
    ...stubLogger,
    child: () => stubLogger,
}
// eslint-disable-next-line no-unused-vars
const db = createDb({ db: firestore, logger })

authRouter.get('/twitch', async (req, res) => {
    const redirectUrl = 'https://rampant.ai/callback/twitch'
    const twitchClientId = functions.config().twitch.client_id
    // Scopes for Viewer
    // const scopes = ['chat:read', 'chat:edit', 'user_read', 'user_follows_edit'].join('+')
    // Scopes for Streamer
    const scopes = [
        'chat:read',
        'chat:edit',
        'channel:moderate',
        'user:read:email',
        'user:edit:follows',
        'channel:read:subscriptions',
        'user:edit:broadcast',
        'user:read:broadcast',
        'moderation:read',
        'clips:edit',
    ].join('+')
    const authorizationUrl = `https://id.twitch.tv/oauth2/authorize?client_id=${twitchClientId}&redirect_uri=${redirectUrl}&response_type=code&scope=${scopes}` // &state=${state}`
    res.redirect(authorizationUrl)
})

authRouter.get('/twitter', async (req, res) => {
    const state = encrypt({ id: 'monorepo' })
    const { oauthRequestToken } = await getOAuthRequestToken(state)
    const authorizationUrl = `https://api.twitter.com/oauth/authorize?oauth_token=${oauthRequestToken}`
    res.redirect(authorizationUrl)
})

auth.use('/auth', authRouter)
exports.auth = functions.https.onRequest(auth)

const cb = express()
const cbRouter = express.Router()

cbRouter.get('/twitter', async (req, res) => {
    const { state } = req.query
    console.log(decrypt(state))
    res.redirect('/')
})

cbRouter.get('/twitch', async (req, res) => {
    const twitchClientId = functions.config().twitch.client_id
    const twitchClientSecret = functions.config().twitch.client_secret
    const { code } = req.query
    const redirectUrl = 'https://rampant.ai/callback/twitch'
    return axios({
        method: 'POST',
        url: `https://id.twitch.tv/oauth2/token?client_id=${twitchClientId}&client_secret=${twitchClientSecret}&code=${code}&grant_type=authorization_code&redirect_uri=${redirectUrl}`,
    })
        .then(({ data: credentials }) => {
            const client = rest(twitchClientId, twitchClientSecret)(credentials)
            return client.helix.users
                .getMe(true)
                .then(details =>
                    db.update('users/raybenefield', {
                        twitchId: details.id,
                        // eslint-disable-next-line no-underscore-dangle
                        twitch: classToPlain(details)._data,
                    })
                )
                .then(() => {
                    const now = new Date()
                    now.setSeconds(now.getSeconds() + credentials.expires_in)
                    return db.set('users/raybenefield/auth/twitch', {
                        ...credentials,
                        expires: admin.firestore.Timestamp.fromDate(now),
                    })
                })
        })
        .then(() => res.redirect('https://rampant.ai'))
})

cb.use('/callback', cbRouter)
exports.callback = functions.https.onRequest(cb)
