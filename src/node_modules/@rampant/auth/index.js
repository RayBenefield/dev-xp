/* eslint-disable max-nested-callbacks */
import express from 'express'
import admin from 'firebase-admin'
import createCrypto from '@dev-xp/crypto'
import functions from 'firebase-functions'
import createDb from '@rampant-firebase/db'
import createRepo from '@rampant-auth/repo'
import createAuthorizer from '@rampant/authorizer'
import createTwitchAuth from '@rampant-twitch/auth'
import createTwitterAuth from '@rampant-twitter/auth'
import cookieParser from '@rampant-firebase/cookie-parser'

const twitterCreds = functions.config().twitter
const twitchCreds = functions.config().twitch
const encryptionKey = functions.config().crypt.key

admin.initializeApp()
const firestore = admin.firestore()
const stubLogger = {
    error: () => {},
    warn: () => {},
    platform: () => {},
    plugin: () => {},
    intent: () => {},
    extend: () => {},
    detail: () => {},
    debug: () => {},
}
const logger = {
    ...stubLogger,
    child: () => stubLogger,
}
// eslint-disable-next-line no-unused-vars
const db = createDb({ db: firestore, logger })
const crypto = createCrypto(encryptionKey)
const authRepo = createRepo({ db, crypto })

const platforms = {
    twitter: createTwitterAuth({
        ...twitterCreds,
        callback: 'https://rampant.ai/callback/twitter',
        crypto,
    }),
    twitch: createTwitchAuth({
        ...twitchCreds,
        callback: 'https://rampant.ai/callback/twitch',
        crypto,
    }),
}
const authorizer = createAuthorizer({ platforms, authRepo, crypto })

const authApp = express()
const authRouter = express.Router()
authRouter.use(cookieParser())

// Scopes for Viewer
// const twitchScopes = ['chat:read', 'chat:edit', 'user_read', 'user_follows_edit']
const twitchScopes = [
    'chat:read',
    'chat:edit',
    'channel:moderate',
    'user:read:email',
    'user:edit:follows',
    'channel:read:subscriptions',
    'user:edit:broadcast',
    'user:read:broadcast',
    'moderation:read',
    'clips:edit',
    'whispers:edit',
]
authRouter.get('/twitch', authorizer.authorize('twitch', twitchScopes))
authRouter.get('/twitter', authorizer.authorize('twitter'))

authApp.use('/auth', authRouter)
exports.auth = functions.https.onRequest(authApp)

const cbApp = express()
const cbRouter = express.Router()

cbRouter.get('/twitter', authorizer.callback('twitter'))
cbRouter.get('/twitch', authorizer.callback('twitch'))

cbApp.use('/callback', cbRouter)
exports.callback = functions.https.onRequest(cbApp)
