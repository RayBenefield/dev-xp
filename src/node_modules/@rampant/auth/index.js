/* eslint-disable max-nested-callbacks */
import express from 'express'
import admin from 'firebase-admin'
import createCrypto from '@dev-xp/crypto'
import functions from 'firebase-functions'
import createDb from '@rampant-firebase/db'
import createRepo from '@rampant-auth/repo'
import createTwitchAuth from '@rampant-twitch/auth'
import createTwitterAuth from '@rampant-twitter/auth'
import { createRestClient } from '@rampant-twitch/rest'
import cookieParser from '@rampant-firebase/cookie-parser'

const twitterCreds = functions.config().twitter
const twitchCreds = functions.config().twitch
const encryptionKey = functions.config().crypt.key

const crypto = createCrypto(encryptionKey)
const authTwitter = createTwitterAuth({
    ...twitterCreds,
    callback: 'https://rampant.ai/callback/twitter',
    crypto,
})
const authTwitch = createTwitchAuth({
    ...twitchCreds,
    callback: 'https://rampant.ai/callback/twitch',
    crypto,
})

const auth = express()
const authRouter = express.Router()
authRouter.use(cookieParser())

admin.initializeApp()
const firestore = admin.firestore()
const stubLogger = {
    error: () => {},
    warn: () => {},
    platform: () => {},
    plugin: () => {},
    intent: () => {},
    extend: () => {},
    detail: () => {},
    debug: () => {},
}
const logger = {
    ...stubLogger,
    child: () => stubLogger,
}
// eslint-disable-next-line no-unused-vars
const db = createDb({ db: firestore, logger })
const authRepo = createRepo({ db, crypto })
const restTwitch = createRestClient({ ...twitchCreds, authRepo })

authRouter.get('/twitch', async (req, res) => {
    // Scopes for Viewer
    // const scopes = ['chat:read', 'chat:edit', 'user_read', 'user_follows_edit'].join('+')
    // Scopes for Streamer
    const scopes = [
        'chat:read',
        'chat:edit',
        'channel:moderate',
        'user:read:email',
        'user:edit:follows',
        'channel:read:subscriptions',
        'user:edit:broadcast',
        'user:read:broadcast',
        'moderation:read',
        'clips:edit',
    ]
    res.redirect(authTwitch.getAuthUrl({ scopes, state: req.cookies }))
})

authRouter.get('/twitter', async (req, res) => {
    const authUrl = await authTwitter.getAuthUrl(req.cookies)
    res.redirect(authUrl)
})

auth.use('/auth', authRouter)
exports.auth = functions.https.onRequest(auth)

const cb = express()
const cbRouter = express.Router()

cbRouter.get('/twitter', async (req, res) => {
    const {
        state,
        oauth_token: requestToken,
        oauth_verifier: verifier,
    } = req.query
    const oldCookies = crypto.decrypt(state)
    const {
        // accessToken,
        // accessSecret,
        user: { user_id, screen_name },
    } = await authTwitter.getAccessToken({
        requestToken,
        verifier,
    })

    const cookies = {
        ...oldCookies,
        twitterId: user_id,
        twitterName: screen_name,
    }
    res.cookie('__session', JSON.stringify(cookies))
    res.redirect('/')
})

cbRouter.get('/twitch', async (req, res) =>
    authTwitch
        .getAccessToken(req.query)
        .then(credentials =>
            restTwitch({ userId: 'raybenefield', credentials })
        )
        .then(client =>
            Promise.all([
                client,
                authRepo.updateUser({
                    userId: 'raybenefield',
                    data: { twitchId: client.user.id, twitch: client.user },
                }),
                authRepo.saveToken({
                    credentials: client.credentials,
                    userId: 'raybenefield',
                    platform: 'twitch',
                }),
            ])
        )
        .then(([client]) => {
            const cookies = {
                twitchId: client.user.id,
                twitchName: client.user.display_name,
            }
            res.cookie('__session', JSON.stringify(cookies))
            res.redirect('https://rampant.ai')
        })
)

cb.use('/callback', cbRouter)
exports.callback = functions.https.onRequest(cb)
