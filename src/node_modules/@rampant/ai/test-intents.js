import { white, green, grey } from 'chalk'

// eslint-disable-next-line import/no-mutable-exports
export let testCount = 0
const success = msg => {
    testCount += 1
    return `    ${white(`#${testCount}`.padEnd(3, ' '))} ${green('âœ”')} ${grey(
        msg
    )}`
}

export const intents = [
    {
        name: 'logTest',
        sources: [{ name: 'logTest', intent: 'logTest' }],
        defaults: { message: success('Log effects work') },
        effects: [
            {
                type: 'log',
                message: '{$.params.message}',
            },
        ],
    },
    {
        name: 'vote',
        sources: [{ name: 'vote', intent: 'vote' }],
        defaults: {
            doc: 'votes',
            data: { dusty: 1 },
            message: success('Database effects work'),
        },
        effects: [
            { type: 'db', doc: '{$.params.doc}', data: '{$.params.data}' },
            { type: 'log', message: '{$.params.message}' },
        ],
    },
    {
        name: 'voteResults',
        sources: [{ type: 'db', name: 'votes', intent: 'voteResults' }],
        defaults: {
            doc: 'vote-results',
            data: { dusty: 1 },
            message: success('Database sources work'),
        },
        effects: [
            { type: 'db', doc: '{$.params.doc}', data: '{$.params.data}' },
            { type: 'log', message: '{$.params.message}' },
        ],
    },
    {
        name: 'staticPipeline',
        sources: [{ name: 'staticPipeline', intent: 'staticPipeline' }],
        pipeline: [
            {
                type: 'static',
                key: 'message',
                value: success('Static pipes work'),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'basicTemplateTest',
        sources: [{ name: 'basicTemplateTest', intent: 'basicTemplateTest' }],
        defaults: {
            greeting: 'Hello',
            subject: 'World',
        },
        pipeline: [
            {
                type: 'static',
                key: 'message',
                value: success(
                    'Basic templating works ({{$.params.greeting}} {{$.params.subject}}!)'
                ),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'advancedTemplateTest',
        sources: [
            { name: 'advancedTemplateTest', intent: 'advancedTemplateTest' },
        ],
        defaults: {
            votes: {
                raymond: 'dusty',
                jessica: 'retail',
                stephanie: 'dusty',
            },
        },
        pipeline: [
            {
                type: 'static',
                key: 'results',
                value: `{% const tally = votes =>
                    JSON.stringify(
                        Object.entries(votes).reduce(
                            (all, [, vote]) => ({
                                ...all,
                                [vote]: vote in all ? all[vote] + 1 : 1,
                            }),
                            {}
                        )
                    );
                %}{{ tally($.params.votes) }}`,
            },
            {
                type: 'static',
                key: 'message',
                value: success('Advanced templating works ({{$.results}})'),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'parseIntTest',
        sources: [{ name: 'parseIntTest', intent: 'parseIntTest' }],
        defaults: {
            first: 2,
            second: 3,
        },
        pipeline: [
            {
                type: 'static',
                key: 'total',
                parse: 'number',
                value: `{{ $.params.first + $.params.second }}`,
            },
            {
                type: 'static',
                key: 'message',
                value: success(
                    'Parsing as an integer works ({{ $.total }} is of type {{ typeof $.total }})'
                ),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'parseObjectTest',
        sources: [{ name: 'parseObjectTest', intent: 'parseObjectTest' }],
        defaults: {
            stringified: '{"dusty":2,"retail":1}',
        },
        pipeline: [
            {
                type: 'static',
                key: 'object',
                parse: 'object',
                value: `{{ $.params.stringified }}`,
            },
            {
                type: 'static',
                key: 'message',
                value: success(
                    'Parsing as an object works ({{ $.params.stringified }} is of type {{ typeof $.object }})'
                ),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'testMixerMessage',
        sources: [{ name: 'testMixerMessage', intent: 'testMixerMessage' }],
        defaults: { message: success('Mixer Message Effect works') },
        effects: [
            {
                type: 'message',
                text: 'Hello',
                userId: 'muonglow',
                channelId: '41469686',
            },
            {
                type: 'message',
                text: '!sourceDependencyTest',
                userId: 'muonglow',
                channelId: '41469686',
            },
            { type: 'log', message: '{$.params.message}' },
        ],
    },
    {
        name: 'mixerChatTest',
        sources: [{ name: 'botChat' }],
        pipeline: [
            {
                type: 'static',
                key: 'message',
                value: success(
                    'Mixer Chat works ({{ JSON.stringify($.params.message) }})'
                ),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'fromTest',
        sources: [
            {
                type: 'from',
                name: 'from',
                intent: 'fromTest',
                items: [{ item: 'First' }, { item: 'Second' }],
            },
        ],
        pipeline: [
            {
                type: 'static',
                key: 'message',
                value: success(
                    '{{ $.params.item }} message for From source works'
                ),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'filterTest',
        sources: [
            {
                type: 'from',
                name: 'filter',
                intent: 'filterTest',
                items: [{ message: 'Not command' }, { message: '!command' }],
            },
        ],
        pipeline: [
            {
                type: 'filter-regex',
                regex: '^[.!,\\s]+(.*)',
                field: '{$.params.message}',
            },
            {
                type: 'static',
                key: 'message',
                value: success('{{ $.params.message }} was filtered properly'),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
    {
        name: 'sourceDependencyTest',
        sources: [{ name: 'commands' }],
        pipeline: [
            {
                type: 'static',
                key: 'message',
                value: success(
                    'Command dependency source works ({{ JSON.stringify($.params.message) }})'
                ),
            },
        ],
        effects: [{ type: 'log', message: '{$.message}' }],
    },
]

export const cleanupDocs = ['votes', 'vote-results']
