import find from 'lodash.find'
import { config } from 'dotenv'
import createLogger from '@rampant/logger'
import createDb from '@rampant-firebase/db'
import witPlugin from '@rampant-wit/plugin'
import sort from '@rampant/topological-sort'
import corePlugin from '@rampant-core/plugin'
import { mergeMap, map } from 'rxjs/operators'
import mixerPlugin from '@rampant-mixer/plugin'
import createIntentEngine from '@rampant/engine'
import serialPromise from '@rampant/serial-promise'
import twitterPlugin from '@rampant-twitter/plugin'
import firebasePlugin from '@rampant-firebase/plugin'
import completionPlugin from '@rampant-completion/plugin'

config()

const {
    MIXER_CLIENT_ID,
    DATABASE_ID,
    WIT_TOKEN,
    TWITTER_KEY,
    TWITTER_SECRET,
    LOG_LEVEL,
} = process.env

export const logger = createLogger({ level: LOG_LEVEL })
export const db = createDb({ id: DATABASE_ID, logger })

export const start = ({ projectId, level }) => {
    logger.changeLevel({ level })
    logger.platform(`Starting up [${projectId}] project...`)

    const core = corePlugin()
    const completion = completionPlugin()
    const firebase = firebasePlugin({ projectId, db })
    const mixer = mixerPlugin({ clientId: MIXER_CLIENT_ID, db })
    const wit = witPlugin({ token: WIT_TOKEN, projectId, db })
    const twitter = twitterPlugin({
        consumerKey: TWITTER_KEY,
        consumerSecret: TWITTER_SECRET,
        db,
    })
    const intentEngine = createIntentEngine({
        plugins: { core, firebase, mixer, completion, wit, twitter },
    })

    firebase
        .projectSettings()
        .then(({ sources }) => {
            const dependencyList = sources.reduce(
                (list, { name, dependencies = [] }) => ({
                    ...list,
                    [name]: dependencies,
                }),
                {}
            )
            return sort(dependencyList)
                .map(sourceName => find(sources, { name: sourceName }))
                .map(source => () => intentEngine.addSource(source))
        })
        .then(sources => serialPromise(sources))
        .then(() =>
            firebase
                .intentStream()
                .pipe(
                    map(change => ({
                        id: change.doc.id,
                        type: change.type,
                        new: change.doc.data(),
                    })),
                    mergeMap(({ id, type, new: newValue }) => {
                        if (type === 'added')
                            return intentEngine.addIntent(id, newValue)
                        if (type === 'removed')
                            return Promise.resolve(
                                intentEngine.removeIntent(id)
                            )

                        return Promise.resolve
                    }, 1)
                )
                .subscribe()
        )
}

export default start
