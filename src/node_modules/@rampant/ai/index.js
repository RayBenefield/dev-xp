/* eslint max-lines: ['warn', { max: 99, skipBlankLines: true }] */
import '@dev-xp/config'
import find from 'lodash.find'
import { createLogger, prettify } from '@rampant/logger'
import createDb from '@rampant-firebase/db'
import witPlugin from '@rampant-wit/plugin'
import sort from '@rampant/topological-sort'
import corePlugin from '@rampant-core/plugin'
import { mergeMap, map } from 'rxjs/operators'
import mixerPlugin from '@rampant-mixer/plugin'
import createIntentEngine from '@rampant/engine'
import serialPromise from '@rampant/serial-promise'
import twitterPlugin from '@rampant-twitter/plugin'
import firebasePlugin from '@rampant-firebase/plugin'
import completionPlugin from '@rampant-completion/plugin'

const {
    MIXER_CLIENT_ID: clientId,
    DATABASE_ID: dbId,
    WIT_TOKEN: token,
    TWITTER_KEY: consumerKey,
    TWITTER_SECRET: consumerSecret,
    LOG_LEVEL,
} = process.env

export const logger = createLogger({ level: LOG_LEVEL })
export const db = createDb({ id: dbId, logger })

export const start = ({ projectId, level = LOG_LEVEL }) => {
    logger.changeLevel({ level })
    logger.platform(`Logging level set to: [${level}]`)
    logger.platform(`Starting up [${projectId}] project...`)

    const core = corePlugin()
    const completion = completionPlugin()
    const firebase = firebasePlugin({ projectId, db })
    const mixer = mixerPlugin({ clientId, db })
    const wit = witPlugin({ token, projectId, db, logger })
    const twitter = twitterPlugin({ consumerKey, consumerSecret, db })
    const intentEngine = createIntentEngine({
        plugins: { core, firebase, mixer, completion, wit, twitter },
    })

    firebase
        .projectSettings()
        .then(_ => {
            logger.platform('Creating Project Sources...')
            return _
        })
        .then(({ sources }) => {
            const dependencyList = sources.reduce(
                (list, { name, dependencies = [] }) => ({
                    ...list,
                    [name]: dependencies,
                }),
                {}
            )
            return sort(dependencyList)
                .map(sourceName => find(sources, { name: sourceName }))
                .map(source => () =>
                    intentEngine.addSource(source).then(_ => {
                        const { name } = source
                        const deps = dependencyList[name]
                        logger.detail(
                            `Project source [${name}] was added${
                                deps.length > 0
                                    ? ` (Depended on: [${deps}])`
                                    : ''
                            }`
                        )
                        logger.debug(prettify(source))
                        return _
                    })
                )
        })
        .then(sources => serialPromise(sources))
        .then(_ => {
            logger.platform('Project Sources Created')
            return _
        })
        .then(() => {
            logger.platform('Setting up Intent Stream...')
            return firebase
                .intentStream()
                .pipe(
                    map(change => ({
                        id: change.doc.id,
                        type: change.type,
                        new: change.doc.data(),
                    })),
                    mergeMap(change => {
                        const { id, type, new: newValue } = change

                        if (type === 'added')
                            return intentEngine
                                .addIntent(id, newValue)
                                .then(() => change)
                        if (type === 'removed')
                            return Promise.resolve(
                                intentEngine.removeIntent(id)
                            ).then(() => change)

                        return Promise.resolve(change)
                    }, 1)
                )
                .subscribe(
                    ({ id, type, new: intent }) => {
                        logger.detail(`Intent [${id}] was ${type}`)
                        logger.debug(prettify(intent))
                    },
                    err => logger.error(err),
                    () => logger.platform('Intent Stream Complete')
                )
        })
}

export default start
