import find from 'lodash.find'
import { config } from 'dotenv'
import witPlugin from '@rampant-wit/plugin'
import sort from '@rampant/topological-sort'
import corePlugin from '@rampant-core/plugin'
import { mergeMap, map } from 'rxjs/operators'
import mixerPlugin from '@rampant-mixer/plugin'
import createIntentEngine from '@rampant/engine'
import serialPromise from '@rampant/serial-promise'
import twitterPlugin from '@rampant-twitter/plugin'
import firebasePlugin from '@rampant-firebase/plugin'
import completionPlugin from '@rampant-completion/plugin'

config()

const {
    MIXER_CLIENT_ID,
    DATABASE_ID,
    PROJECT_ID,
    WIT_TOKEN,
    TWITTER_KEY,
    TWITTER_SECRET,
} = process.env

export const core = corePlugin()
export const completion = completionPlugin()
export const firebase = firebasePlugin({
    databaseId: DATABASE_ID,
    projectId: PROJECT_ID,
})
export const mixer = mixerPlugin({ clientId: MIXER_CLIENT_ID, db: firebase.db })
export const wit = witPlugin({ token: WIT_TOKEN })
export const twitter = twitterPlugin({
    consumerKey: TWITTER_KEY,
    consumerSecret: TWITTER_SECRET,
    db: firebase.db,
})
export const intentEngine = createIntentEngine({
    plugins: { core, firebase, mixer, completion, wit, twitter },
})

firebase
    .projectSettings()
    .then(({ sources }) => {
        const dependencyList = sources.reduce(
            (list, { name, dependencies = [] }) => ({
                ...list,
                [name]: dependencies,
            }),
            {}
        )
        return sort(dependencyList)
            .map(sourceName => find(sources, { name: sourceName }))
            .map(source => () => intentEngine.addSource(source))
    })
    .then(sources => serialPromise(sources))
    .then(() =>
        firebase
            .intentStream()
            .pipe(
                map(change => ({
                    id: change.doc.id,
                    type: change.type,
                    new: change.doc.data(),
                })),
                mergeMap(({ id, type, new: newValue }) => {
                    if (type === 'added')
                        return intentEngine.addIntent(id, newValue)
                    if (type === 'removed')
                        return Promise.resolve(intentEngine.removeIntent(id))

                    return Promise.resolve
                }, 1)
            )
            .subscribe()
    )
