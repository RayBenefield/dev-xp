import { merge } from 'rxjs'
import { filter, map, catchError } from 'rxjs/operators'
import createPipeline from '@rampant/pipeline-creator'
import createEffects from '@rampant/effect-creator'

import reportBroken from './report.js'

export default ({ plugins }) => ({ sourcePool: pool, intent: settings }) => {
    const {
        name,
        defaults = {},
        sources = [],
        pipeline = [],
        effects = [],
    } = settings

    const intentProcessors = Object.values(plugins).reduce(
        (all, { processIntent }) =>
            processIntent ? [...all, processIntent] : all,
        []
    )
    intentProcessors.forEach(processor => processor(settings))

    const fromPool = ({ name: sourceName = 'empty' }) => pool[sourceName]
    const intentSources = sources.map(fromPool)
    const extenders = pipeline.map(createPipeline({ plugins }))
    const sideEffects = effects.map(createEffects({ plugins }))

    return merge(...intentSources).pipe(
        filter(({ intent }) => intent === name),
        map(({ intent, source, params = {} }) => ({
            intent,
            source,
            params: {
                ...defaults,
                ...params,
            },
        })),
        ...extenders,
        ...sideEffects,
        catchError(reportBroken(name))
    )
}
