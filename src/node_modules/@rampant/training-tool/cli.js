import argv from 'argv'
import { db } from '@rampant/ai'
import { firestore } from 'firebase-admin'
import { mergeMap, take } from 'rxjs/operators'
import { from, defer, concat, EMPTY } from 'rxjs'

argv.version('v0.0.0')
argv.info('Go through untrained samples and train them.')

const { raw: store } = db

argv.option([
    {
        name: 'name',
        short: 'n',
        type: 'string',
        description: 'Name of the project to train',
        example: '--name=channel-name',
    },
])

const { options: { name } } = argv.run()

const { FieldPath } = firestore
const getPage = start => {
    const query = start
        ? store
              .collection(`projects/${name}/untrained`)
              .limit(5)
              .orderBy(FieldPath.documentId())
              .startAfter(start)
              .get()
        : store
              .collection(`projects/${name}/untrained`)
              .limit(5)
              .get()

    return query.then(snapshots => {
        const collection = []
        snapshots.forEach(snapshot => {
            collection.push({ id: snapshot.id, content: snapshot.data() })
        })
        return collection
    })
}

const getItems = start =>
    defer(() => getPage(start)).pipe(
        mergeMap(collection => {
            if (collection.length === 0) return EMPTY

            const items$ = from(collection)
            const next$ = getItems(collection[collection.length - 1].id)
            return concat(items$, next$)
        })
    )

getItems()
    .pipe(take(30))
    .subscribe(console.log)
