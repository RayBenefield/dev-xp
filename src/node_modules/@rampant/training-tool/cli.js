import argv from 'argv'
import { prompt } from 'inquirer'
import { config } from 'dotenv'
import { db } from '@rampant/ai'
import { firestore } from 'firebase-admin'
import createWit from '@rampant-wit/plugin'
import sanitize from '@rampant-wit/sanitize'
import { mergeMap } from 'rxjs/operators'
import { from, defer, concat } from 'rxjs'

config()
const { WIT_TOKEN } = process.env

argv.version('v0.0.0')
argv.info('Go through untrained samples and train them.')

const { raw: store } = db

argv.option([
    {
        name: 'name',
        short: 'n',
        type: 'string',
        description: 'Name of the project to train',
        example: '--name=channel-name',
    },
    {
        name: 'limit',
        short: 'l',
        type: 'number',
        description: 'How many to fetch at one time',
        example: '--limit=50',
    },
])

const { options: { name, limit = 50 } } = argv.run()
const wit = createWit({ token: WIT_TOKEN, projectId: name, db })
const { FieldPath } = firestore

const getPage = start => {
    const query = start
        ? store
              .collection(`projects/${name}/untrained`)
              .limit(limit)
              .orderBy(FieldPath.documentId())
              .startAfter(start)
              .get()
        : store
              .collection(`projects/${name}/untrained`)
              .limit(limit)
              .get()

    return query.then(snapshots => {
        const collection = []
        snapshots.forEach(snapshot => {
            collection.push({
                id: snapshot.id,
                sample: sanitize(snapshot.id),
                entities: snapshot.data(),
            })
        })
        return collection
    })
}

const promptIntent = ({ id, sample, entities: { intent } }) =>
    prompt([
        {
            type: 'list',
            name: 'train',
            message: sample,
            choices: [
                {
                    name: 'Skip',
                    value: null,
                },
                ...intent.map(({ value, confidence }) => ({
                    name: `${value} (${Math.round(confidence * 100 * 100) /
                        100}% confident)`,
                    value,
                    short: value,
                })),
                {
                    name: 'Nothing',
                    value: undefined,
                },
            ],
        },
    ]).then(results => ({ ...results, sample, id }))

const trainIntent = ({ train, sample, id }) => {
    if (train === undefined)
        return Promise.all([
            wit.trainSample(sample),
            db.remove(`projects/${name}/untrained/${id}`),
        ])
    if (train === null) return Promise.resolve()
    return Promise.all([
        wit.trainSample(sample, train),
        db.remove(`projects/${name}/untrained/${id}`),
    ])
}

const getItems = start =>
    defer(() => from(getPage(start))).pipe(
        mergeMap(collection => {
            const items$ = from(collection).pipe(
                mergeMap(promptIntent, 1),
                mergeMap(trainIntent)
            )

            const next$ = getItems(collection[collection.length - 1].sample)
            return concat(items$, next$)
        })
    )

getItems().subscribe()
