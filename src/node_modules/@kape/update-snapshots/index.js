/* eslint-disable no-console */
import fs from 'fs';
import * as jsdiff from 'diff';
import unmkdirp from 'mkdirp';
import readline from 'readline';
import sortBy from 'lodash.sortby';
import attempt from 'promise-retry';
import transmute from 'transmutation';
import promisify from 'es6-promisify';
import { cyan, red, white, green, grey } from 'chalk';
import { render as prettyPrint } from 'prettyjson';
import sequentialPromises from '@kape/sequential-promises';

const mkdirp = promisify(unmkdirp);
const writeFile = promisify(fs.writeFile);
const diff = (first, second) =>
    jsdiff.diffLines(first, second).reduce(
        (result, part) =>
            part.added // eslint-disable-line no-nested-ternary
                ? `${result}${green(part.value)}`
                : part.removed
                  ? `${result}${red(part.value)}`
                  : `${result}${grey(part.value)}`,
        '',
    );

// eslint-disable-next-line prefer-template
const printBacktickString = str => '`' + str.replace(/`|\\|\${/g, '\\$&') + '`';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

const prompt = msg =>
    new Promise(res => {
        rl.resume();
        rl.question(msg, answer => {
            rl.pause();
            res(answer);
        });
    });

const generateFileContents = ({ results }) =>
    sortBy(results, 'test', 'id').reduce(
        (all, { id, test, snapshot }) => `${all}

exports[${printBacktickString(`${test} ${id}`)}] = ${printBacktickString(`
${snapshot}
`)};`,
        '// Kape Snapshot v1',
    );

const ensureSnapshotsDirectoryExists = ({ snapshotDir }) => mkdirp(snapshotDir);

const saveSnapshotFile = ({ suiteSnapshotFile, fileContents }) =>
    writeFile(suiteSnapshotFile, fileContents);

export default ({ suiteSnapshotFile, snapshotDir, testedResults }) =>
    transmute({
        suiteSnapshotFile,
        testedResults,
        snapshotDir,
    })
        .extend('results', ({ testedResults: results }) =>
            sequentialPromises(
                results.map(result => () => {
                    const {
                        index,
                        test,
                        actual,
                        snapshot,
                        snapshotMatched,
                        previousSnapshot,
                    } = result;
                    if (snapshotMatched) return Promise.resolve(result);
                    if (previousSnapshot !== null) {
                        console.log(`
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
${green.bold('test:')} ${cyan(`${test} #${index}`)}
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
${diff(previousSnapshot, snapshot)}
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}`);
                    } else {
                        console.log(`
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
${green.bold('NEW SNAPSHOT:')} ${cyan(`${test} #${index}`)}
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
                                `);
                        console.log(prettyPrint(actual));
                        console.log(`
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}`);
                    }

                    return attempt(retry =>
                        prompt(
                            `${white.bold(
                                previousSnapshot ? 'Update [' : 'ADD [',
                            )}${cyan(test)} ${cyan('#')}${cyan(
                                index,
                            )}${white.bold(']?')} ${white('[y/N]')} `,
                        ).then(a => {
                            const answer =
                                a.length <= 0 ? 'n' : a.toLowerCase();

                            if (answer !== 'y' && answer !== 'n') {
                                console.log(red('That is not a `y` or `n`...'));
                                return retry();
                            }

                            if (answer === 'y') return result;
                            if (answer === 'n' && !previousSnapshot)
                                return null;
                            return {
                                ...result,
                                snapshot: previousSnapshot || snapshot,
                            };
                        }),
                    );
                }),
            ).then(r => r.filter(s => s)),
        )
        .extend('fileContents', generateFileContents)
        .do(ensureSnapshotsDirectoryExists)
        .then(saveSnapshotFile);
