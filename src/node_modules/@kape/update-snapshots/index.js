/* eslint-disable no-console */
import fs from 'fs';
import slugify from 'slugify';
import unmkdirp from 'mkdirp';
import * as jsdiff from 'diff';
import prompt from '@kape/prompt';
import sortBy from 'lodash.sortby';
import transmute from 'transmutation';
import promisify from 'es6-promisify';
import { resolve, dirname } from 'path';
import chalk, { cyan, red, green, grey } from 'chalk';
import { render as prettyPrint } from 'prettyjson';
import sequentialPromises from '@kape/sequential-promises';

const mkdirp = promisify(unmkdirp);
const writeFile = promisify(fs.writeFile);
const diff = (first, second) =>
    jsdiff.diffLines(first, second).reduce(
        (result, part) =>
            part.added // eslint-disable-line no-nested-ternary
                ? `${result}${green(part.value)}`
                : part.removed
                  ? `${result}${red(part.value)}`
                  : `${result}${grey(part.value)}`,
        '',
    );

// eslint-disable-next-line prefer-template
const printBacktickString = str => '`' + str.replace(/`|\\|\${/g, '\\$&') + '`';

const generateFileContents = ({ results }) =>
    sortBy(results, 'test', 'id').reduce(
        (all, { id, test, snapshot }) => `${all}

exports[${printBacktickString(`${test} ${id}`)}] = ${printBacktickString(`
${snapshot}
`)};`,
        '// Kape Snapshot v1',
    );

const ensureSnapshotsDirectoryExists = ({ snapshotDir }) => mkdirp(snapshotDir);

const saveSnapshotFile = ({ suiteSnapshotFile, fileContents }) =>
    writeFile(suiteSnapshotFile, fileContents);

export default ({ suite, file, testedResults }) => {
    const snapshotDir = resolve(dirname(file), '__snapshots__');
    const suiteSnapshotFile = resolve(
        snapshotDir,
        `${slugify(suite, { lower: true })}.js.snap`,
    );

    return transmute({
        suiteSnapshotFile,
        testedResults,
        snapshotDir,
    })
        .extend('results', ({ testedResults: results }) =>
            sequentialPromises(
                results.map(result => () => {
                    const {
                        index,
                        test,
                        actual,
                        snapshot,
                        snapshotMatched,
                        previousSnapshot,
                    } = result;
                    if (snapshotMatched) return Promise.resolve(result);
                    if (previousSnapshot !== null) {
                        console.log(`
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
${green.bold('test:')} ${cyan(`${test} #${index}`)}
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
${diff(previousSnapshot, snapshot)}
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}`);
                    } else {
                        console.log(`
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
${green.bold('NEW SNAPSHOT:')} ${cyan(`${test} #${index}`)}
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}
                                `);
                        console.log(prettyPrint(actual));
                        console.log(`
${green.bold(
                            '────────────────────────────────────────────────────────────────────────────────',
                        )}`);
                    }

                    return prompt({
                        type: 'confirm',
                        default: false,
                        message: chalk`${
                            previousSnapshot ? 'Update [' : 'ADD ['
                        }{reset.cyan ${test} #${index}}{white.bold ]?}`,
                    }).then(answer => {
                        if (answer === 'y') return result;
                        if (answer === 'n' && !previousSnapshot) return null;
                        return {
                            ...result,
                            snapshot: previousSnapshot || snapshot,
                        };
                    });
                }),
            ).then(r => r.filter(s => s)),
        )
        .extend('fileContents', generateFileContents)
        .do(ensureSnapshotsDirectoryExists)
        .then(saveSnapshotFile);
};
