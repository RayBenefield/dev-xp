import fs from 'fs';
import unmkdirp from 'mkdirp';
import promisify from 'es6-promisify';
import whichSnapshot from '@kape/which-snapshot';
import sequentialPromises from '@kape/sequential-promises';
import { key as snapKey, location as snapLocation } from '@kape/snapshot-utils';

const mkdirp = promisify(unmkdirp);
const writeFile = promisify(fs.writeFile);
const saveSnapshotFile = ({ file, contents }) => writeFile(file, contents);
const ensureSnapshotsDirectoryExists = ({ dir }) => mkdirp(dir);

// eslint-disable-next-line prefer-template
const printBacktickString = str => '`' + str.replace(/`|\\|\${/g, '\\$&') + '`';
const generateFileContents = results =>
    results.reduce((all, result) => {
        if (!result.finalSnapshot && !result.previousSnapshot) return all;
        const key = printBacktickString(snapKey(result));
        const property = `exports[${key}] = `;
        const value = `${printBacktickString(
            `\n${result.finalSnapshot || result.previousSnapshot.trim()}\n`,
        )};`;
        return `${all}\n\n${property}${value}`;
    }, '// Kape Snapshot v1');

export default ({ file, suite, results }) => {
    const { dir, file: snapFile } = snapLocation({ suite, file });
    return ensureSnapshotsDirectoryExists({ dir }).then(() =>
        sequentialPromises(
            results.map(result => newSnapshots =>
                whichSnapshot(result).then(newSnapshot =>
                    saveSnapshotFile({
                        file: snapFile,
                        contents: generateFileContents(
                            [
                                ...newSnapshots,
                                newSnapshot,
                                ...results.slice(newSnapshots.length + 1),
                            ].filter(r => r),
                        ),
                    }).then(() => newSnapshot),
                ),
            ),
        ).then(finalSnapshots =>
            saveSnapshotFile({
                file: snapFile,
                contents: generateFileContents(finalSnapshots.filter(r => r)),
            }),
        ),
    );
};
