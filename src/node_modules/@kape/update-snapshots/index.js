import fs from 'fs';
import unmkdirp from 'mkdirp';
import sortBy from 'lodash.sortby';
import transmute from 'transmutation';
import promisify from 'es6-promisify';
import snapshotsToUpdate from '@kape/snapshots-to-update';
import { key as snapKey, location as snapLocation } from '@kape/snapshot-utils';

const mkdirp = promisify(unmkdirp);
const writeFile = promisify(fs.writeFile);

// eslint-disable-next-line prefer-template
const printBacktickString = str => '`' + str.replace(/`|\\|\${/g, '\\$&') + '`';

const generateFileContents = ({ saving }) =>
    sortBy(saving, 'test', 'index').reduce((all, result) => {
        const key = printBacktickString(snapKey(result));
        const property = `exports[${key}] = `;
        const value = `${printBacktickString(`\n${result.snapshot}\n`)};`;
        return `${all}\n\n${property}${value}`;
    }, '// Kape Snapshot v1');

const ensureSnapshotsDirectoryExists = ({ dir }) => mkdirp(dir);
const saveSnapshotFile = ({ file, contents }) => writeFile(file, contents);

export default ({ suite, file, results }) =>
    transmute({ results, ...snapLocation({ suite, file }) })
        .extend('saving', snapshotsToUpdate)
        .extend('contents', generateFileContents)
        .do(ensureSnapshotsDirectoryExists)
        .then(saveSnapshotFile);
