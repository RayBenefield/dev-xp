import fs from 'fs'
import unmkdirp from 'mkdirp'
import promisify from 'es6-promisify'
import whichSnapshot from '@kape/which-snapshot'
import sequentialPromises from '@kape/sequential-promises'
import { key as snapKey, location as snapLocation } from '@kape/snapshot-utils'

const mkdirp = promisify(unmkdirp)
const writeFile = promisify(fs.writeFile)
const saveSnapshotFile = ({ file, contents }) => writeFile(file, contents)
const ensureSnapshotsDirectoryExists = ({ dir }) => mkdirp(dir)

// eslint-disable-next-line prefer-template
const printBacktickString = str => '`' + str.replace(/`|\\|\${/g, '\\$&') + '`'
const generateFileContents = results =>
    results.reduce((all, result) => {
        if (result.finalSnapshot === undefined && !result.previousSnapshot)
            return all
        const key = printBacktickString(snapKey(result))
        const property = `exports[${key}] = `
        const value = `${printBacktickString(
            `\n${
                result.finalSnapshot !== undefined
                    ? result.finalSnapshot.trim()
                    : result.previousSnapshot.trim()
            }\n`
        )};`
        return `${all}\n\n${property}${value}`
    }, '// Kape Snapshot v1')

const saveIncrementally = ({ file, results, result }) => newSnapshots =>
    whichSnapshot(result).then(newSnapshot =>
        Promise.resolve([
            ...newSnapshots,
            newSnapshot,
            ...results.slice(newSnapshots.length + 1),
        ])
            .then(snapshots => snapshots.filter(s => s))
            .then(generateFileContents)
            .then(contents => saveSnapshotFile({ file, contents }))
            .then(() => newSnapshot)
    )

export default ({ file: testFile, suite, results }) => {
    const { dir, file } = snapLocation({ suite, file: testFile })
    return ensureSnapshotsDirectoryExists({ dir }).then(() =>
        sequentialPromises(
            results.map(result => saveIncrementally({ file, results, result }))
        )
            .then(snapshots => generateFileContents(snapshots.filter(r => r)))
            .then(contents => saveSnapshotFile({ file, contents }))
    )
}
