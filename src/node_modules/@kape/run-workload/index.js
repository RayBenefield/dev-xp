import run from '@kape/run'
import { read } from '@dev-xp/fs'
import * as _ from '@dev-xp/utils'
import { location as snapLocation, key as snapKey } from '@kape/snapshot-utils'

const getPreviousSnapshots = suiteSnapshotFile =>
    read(suiteSnapshotFile, 'utf8')
        .then(contents => {
            // eslint-disable-next-line no-new-func
            const generate = new Function('exports', contents)
            const snapshots = {}
            generate(snapshots)
            const trimmed = _.map(_.trim, snapshots)
            return trimmed
        })
        .catch(() => [])

const testSnapshots = previousSnapshots => result => ({
    ...result,
    previousSnapshot: previousSnapshots[snapKey(result)] || null,
    snapshotMatched:
        result.skipped === true
            ? true
            : previousSnapshots[snapKey(result)]
                ? result.snapshot.trim() ===
              previousSnapshots[snapKey(result)].trim()
                : false,
})

const message = (type, payload) => ({ kape: true, type, payload })
const suitesCompleted = {}
export default ({ file, args }) => {
    const [suite] = args
    const { file: snapFile } = snapLocation({ suite, file })
    suitesCompleted[suite] = false
    getPreviousSnapshots(snapFile).then(previousSnapshots => {
        const suiteStream = run(...args)
        const testResult = testSnapshots(previousSnapshots)
        suiteStream.on('data', result =>
            process.send(
                message('result', { file, suite, ...testResult(result) })
            )
        )
        suiteStream.on('end', () => {
            suitesCompleted[suite] = true
            const weAreDone = Object.values(suitesCompleted).every(
                status => status === true
            )
            if (weAreDone) process.send(message('end'), () => process.exit())
        })
    })
}
