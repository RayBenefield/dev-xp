import fs from 'fs';
import run from '@kape/run';
import slugify from 'slugify';
import promisify from 'es6-promisify';
import { resolve, dirname } from 'path';

const readFile = promisify(fs.readFile);

const getPreviousSnapshots = suiteSnapshotFile =>
    readFile(suiteSnapshotFile, 'utf8')
        .then(contents => {
            // eslint-disable-next-line no-new-func
            const generate = new Function('exports', contents);
            const snapshots = {};
            generate(snapshots);
            return snapshots;
        })
        .catch(() => []);

const testSnapshots = previousSnapshots => result => ({
    ...result,
    previousSnapshot: previousSnapshots[`${result.test} ${result.id}`] || null,
    snapshotMatched: previousSnapshots[`${result.test} ${result.id}`]
        ? result.snapshot.trim() ===
          previousSnapshots[`${result.test} ${result.id}`].trim()
        : false,
});

export default ({ file, suite, args }) => {
    const snapshotDir = resolve(dirname(file), '__snapshots__');
    const suiteSnapshotFile = resolve(
        snapshotDir,
        `${slugify(suite, { lower: true })}.js.snap`,
    );
    getPreviousSnapshots(suiteSnapshotFile).then(previousSnapshots => {
        const suiteStream = run(...args);
        const testResult = testSnapshots(previousSnapshots);
        suiteStream.on('data', result =>
            process.send({
                kape: true,
                type: 'result',
                payload: testResult(result),
            }),
        );
        suiteStream.on('end', () => {
            process.send({ kape: true, type: 'end' });
            process.exit();
        });
    });
};
