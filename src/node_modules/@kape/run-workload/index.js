import fs from 'fs';
import run from '@kape/run';
import promisify from 'es6-promisify';
import { location as snapLocation, key as snapKey } from '@kape/snapshot-utils';

const readFile = promisify(fs.readFile);

const getPreviousSnapshots = suiteSnapshotFile =>
    readFile(suiteSnapshotFile, 'utf8')
        .then(contents => {
            // eslint-disable-next-line no-new-func
            const generate = new Function('exports', contents);
            const snapshots = {};
            generate(snapshots);
            return snapshots;
        })
        .catch(() => []);

const testSnapshots = previousSnapshots => result => ({
    ...result,
    previousSnapshot: previousSnapshots[snapKey(result)] || null,
    snapshotMatched: previousSnapshots[snapKey(result)]
        ? result.snapshot.trim() === previousSnapshots[snapKey(result)].trim()
        : false,
});

const message = (type, payload) => ({ kape: true, type, payload });
export default ({ file, suite, args }) => {
    const { file: snapFile } = snapLocation({ suite, file });
    getPreviousSnapshots(snapFile).then(previousSnapshots => {
        const suiteStream = run(...args);
        const testResult = testSnapshots(previousSnapshots);
        suiteStream.on('data', result =>
            process.send(message('result', testResult(result))),
        );
        suiteStream.on('end', () => {
            process.send(message('end'));
            process.exit();
        });
    });
};
