import chalk from 'chalk';
import * as jsdiff from 'diff';
import prompt from '@kape/prompt';
import { render as prettyPrint } from 'prettyjson';
import sequentialPromises from '@kape/sequential-promises';

const diff = (first, second) =>
    jsdiff.diffLines(first, second).reduce(
        (result, part) =>
            part.added // eslint-disable-line no-nested-ternary
                ? chalk`${result}{green ${part.value}}`
                : part.removed
                  ? chalk`${result}{red ${part.value}}`
                  : chalk`${result}{grey ${part.value}}`,
        '',
    );

export default ({ testedResults: results }) =>
    sequentialPromises(
        results.map(result => () => {
            const { index, test, actual, snapshot } = result;
            const { snapshotMatched, previousSnapshot } = result;

            if (snapshotMatched) return Promise.resolve(result);

            // eslint-disable-next-line no-console
            console.log(
                previousSnapshot
                    ? chalk`
{green.bold ────────────────────────────────────────────────────────────────────────────────}
{green.bold test:} {cyan(${test} #${index}}
{green.bold ────────────────────────────────────────────────────────────────────────────────}
${diff(previousSnapshot, snapshot)}
{green.bold ────────────────────────────────────────────────────────────────────────────────}`
                    : chalk`
{green.bold ────────────────────────────────────────────────────────────────────────────────}
{green.bold NEW SNAPSHOT:} {cyan ${test} #${index}}
{green.bold ────────────────────────────────────────────────────────────────────────────────}
${prettyPrint(actual)}
{green.bold ────────────────────────────────────────────────────────────────────────────────}`,
            );

            return prompt({
                type: 'confirm',
                default: false,
                message: chalk`${
                    previousSnapshot ? 'Update' : 'ADD'
                } [{reset.cyan ${test} #${index}}{white.bold ]?}`,
            }).then(answer => {
                if (answer === 'y') return result;
                if (answer === 'n' && !previousSnapshot) return null;
                return {
                    ...result,
                    snapshot: previousSnapshot || snapshot,
                };
            });
        }),
    ).then(r => r.filter(s => s));
