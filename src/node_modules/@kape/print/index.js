import groupBy from 'lodash.groupby';
import { red, white, green, grey, underline } from 'chalk';

const printPass = ({ test, index }) =>
    `    ${green('✔')} ${grey(test)} ${white('#')}${white(index)}`;

const printAdd = ({ test, index }) =>
    `    ${green('+')} ${green(test)} ${green.bold('#')}${green.bold(index)}`;

const printFail = ({ test, index }) =>
    `    ${red('✖')} ${red(test)} ${red.bold('#')}${red.bold(index)}`;

const withResultPrinter = results =>
    console.log(
        results
            .map(result => {
                if (result.snapshotMatched) return printPass(result);
                if (!result.previousSnapshot) return printAdd(result);
                return printFail(result);
            })
            .join('\n'),
    );

export default results =>
    new Promise(res => {
        const suites = groupBy(results, 'suite');
        Object.entries(suites).forEach(([suite, suiteResults]) => {
            console.log(`\n  ${underline(suite)}\n`);
            withResultPrinter(suiteResults);
        });
        console.log('\n');
        console.log(`  total:     ${results.length}`);
        console.log(green(`  passing:   ${results.length}`));
        console.log('\n');
        return res(suites);
    });
