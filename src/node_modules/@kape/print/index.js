import chalk from 'chalk'
import log from '@dev-xp/log'
import groupBy from 'lodash.groupby'
import aggregate from '@kape/aggregate'

const pass = result => chalk`
    {green ✔} {grey ${result.test}} {white #${result.index}}`
const add = result => chalk`
    {green + ${result.test}} {green.bold #${result.index}}`
const fail = result => chalk`
    {red ✖ ${result.test}} {red.bold #${result.index}}`
const skip = result => chalk`
    {white - ${result.test}} {white.bold #${result.index}}`

const printSuite = ([suite, suiteResults]) => chalk`
  {underline ${suite}}
${suiteResults
    .map(
        result =>
            result.skipped
                ? skip(result)
                : result.snapshotMatched
                    ? pass(result)
                    : !result.previousSnapshot ? add(result) : fail(result)
    )
    .join('')}
`

export default results =>
    new Promise(res => {
        const suites = groupBy(results, 'suite')
        const printedSuites = Object.entries(suites)
            .map(printSuite)
            .join('')

        log(chalk`
${printedSuites}

  total:     ${results.length}
${aggregate(results)}
        `)
        return res(suites)
    })
