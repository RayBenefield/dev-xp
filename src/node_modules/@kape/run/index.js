import sha from 'sha.js';
import serialize from 'pretty-format';
import transmute from 'transmutation';
import { obj as stream } from 'through2';
import isFunction from 'lodash.isfunction';

const runTest = subject =>
    transmute()
        .extend('actual', ({ input }) => Promise.resolve(subject(...input)))
        .extend('snapshot', ({ actual }) => serialize(actual));

const collectTests = examples => {
    const tests = [];
    const it = (test, setup) => {
        const { testName, testSetup } =
            !setup && isFunction(test)
                ? { testName: 'snapshot', testSetup: test }
                : { testName: test, testSetup: setup };

        let inputs = [];
        const given = (...args) => {
            inputs = [...inputs, ...args];
        };
        testSetup(given);
        inputs.forEach((input, index) =>
            tests.push({
                id: sha('sha256')
                    .update(serialize(input))
                    .digest('hex'),
                test: testName,
                index,
                input,
            }),
        );
    };
    examples(it);
    return tests;
};

export default (suite, subject, examples) => {
    const testStream = stream();
    const tests = collectTests(examples);
    Promise.all(
        tests.map(test =>
            runTest(subject)(test).then(result => testStream.push(result)),
        ),
    ).then(() => testStream.push(null));
    return testStream;
};
