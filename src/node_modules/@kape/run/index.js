import sha from 'sha.js';
import serialize from 'pretty-format';
import transmute from 'transmutation';
import { obj as stream } from 'through2';

const runTest = subject =>
    transmute()
        .extend('actual', ({ input }) => Promise.resolve(subject(...input)))
        .extend('snapshot', ({ actual }) => serialize(actual));

const collectTests = examples => {
    const tests = [];
    const it = (test, setup) => {
        let inputs = [];
        const given = args => {
            inputs = [...inputs, ...args];
        };
        setup(given);
        inputs.forEach((input, index) =>
            tests.push({
                id: sha('sha256')
                    .update(serialize(input))
                    .digest('hex'),
                test,
                index,
                input,
            }),
        );
    };
    examples(it);
    return tests;
};

export default (suite, subject, examples) => {
    const testStream = stream();
    const tests = collectTests(examples);
    transmute({ suite })
        .extend('results', Promise.all(tests.map(runTest(subject))))
        .then(result => {
            testStream.push(result);
            testStream.push(null);
        });
    return testStream;
};
