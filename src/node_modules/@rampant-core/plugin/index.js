import get from '@rampant/get'
import { of, from, merge } from 'rxjs'
import templating from '@rampant/templating'
import { map, tap, filter } from 'rxjs/operators'

const parseTypes = {
    number: val => parseInt(val, 10),
    object: val => JSON.parse(val),
    string: val => val,
}

export default () => ({
    sources: {
        from: ({ items = [] }) => from(items),
        merge: ({ dependencies }, sourcePool) =>
            merge(
                ...dependencies.map(dependency => sourcePool[dependency])
            ).pipe(map(({ params }) => params)),
        blank: () => of({}),
    },
    extensions: {
        static: ({ key, value, parse = 'string' }) => {
            const render = templating.template(value)

            return map(payload => {
                const preprocessed = render(payload)
                const processor = parseTypes[parse]
                const processed = processor(preprocessed)

                return {
                    ...payload,
                    [key]: processed,
                }
            })
        },
        'filter-regex': ({ regex, field }) => {
            const reg = new RegExp(regex)
            return filter(payload => {
                const value = get({ $: payload }, field)
                return reg.test(value)
            })
        },
        blank: () => tap(() => {}),
    },
    effects: {
        log: ({ message }) =>
            tap(payload =>
                // eslint-disable-next-line no-console
                console.log(get({ $: payload }, message))
            ),
        empty: tap(() => {}),
    },
})
