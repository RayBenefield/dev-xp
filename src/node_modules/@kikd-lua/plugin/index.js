import { resolve } from 'path'

import { bundle } from 'luabundle'
import pkg from '@dev-xp/resolve-name'
import manifest from '@kikd-lua/manifest'
import { lstat, mkdir, write } from '@dev-xp/fs'

const type = 'lua-rock'

export const rockspecJson = (root, srcDir, files) =>
    files.includes('rockspec.json')
        ? // eslint-disable-next-line global-require, import/no-dynamic-require
          require(resolve(root, srcDir, 'rockspec.json'))
        : false

export default {
    type,
    manifest,
    config: ({ structure }) => ({
        type,
        post: {
            ...structure,
        },
    }),
    filter: ({ root = '.', srcDir = '.', files = [] }) => {
        const manifestData = rockspecJson(root, srcDir, files)
        return manifestData
    },
    build: async ({ config: { post: { name, root, srcDir, destDir } } }) => {
        const moduleRoot = resolve(root, srcDir, 'init.lua')
        const nameBased = resolve(root, 'src/node_modules/?.lua')
        const initBased = resolve(root, 'src/node_modules/?/init.lua')
        const source = bundle(moduleRoot, { paths: [nameBased, initBased] })
        const dir = resolve(root, destDir)
        const file = resolve(dir, `${pkg(name)}.lua`)

        try {
            await lstat(dir)
        } catch (e) {
            mkdir(dir)
        }

        return write(file, source)
    },
    postBuild: () => {},
}
