import firebase from 'firebase-admin'
import { Observable, from } from 'rxjs'
import { map, mergeMap } from 'rxjs/operators'

// eslint-disable-next-line import/no-unresolved
import serviceAccount from './firebase-key.json'

const onSnapshot = ref =>
    Observable.create(observer => {
        ref.onSnapshot(snapshot => observer.next(snapshot))
    })

export default id => {
    firebase.initializeApp({
        credential: firebase.credential.cert(serviceAccount),
        databaseURL: `https://${id}.firebaseio.com`,
    })
    const db = firebase.firestore()

    return {
        onCollectionChange: collectionId =>
            onSnapshot(db.collection(collectionId)).pipe(
                mergeMap(snapshot => from(snapshot.docChanges()))
            ),
        onDocumentChange: documentId =>
            onSnapshot(db.doc(documentId)).pipe(
                map(snapshot => snapshot.data())
            ),
        get: (key, queries = []) => {
            const parts = key.split('/').length
            if (parts % 2 === 0)
                return queries
                    .reduce(
                        (final, query) => final.where(...query),
                        db.doc(key)
                    )
                    .get()
                    .then(doc => doc.data())

            return queries
                .reduce(
                    (final, query) => final.where(...query),
                    db.collection(key)
                )
                .get()
                .then(snapshots => {
                    const collection = {}
                    snapshots.forEach(snapshot => {
                        collection[snapshot.id] = snapshot.data()
                    })
                    return collection
                })
        },
        set: (doc, values) => db.doc(doc.toString()).set(values),
        remove: doc => db.doc(doc.toString()).delete(),
        update: (doc, values) => db.doc(doc.toString()).update(values),
        upsert: (doc, values) => {
            const ref = db.doc(doc.toString())
            return ref.get().then(snapshot => {
                if (!snapshot.exists) return ref.set(values)
                return ref.update(values)
            })
        },
        raw: db,
    }
}
