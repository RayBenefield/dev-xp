/* eslint max-lines: ['warn', { max: 99, skipBlankLines: true }] */
import firebase from 'firebase-admin'
import { Observable, from } from 'rxjs'
import { prettify } from '@rampant/logger'
import { tap, map, mergeMap } from 'rxjs/operators'

// eslint-disable-next-line import/no-unresolved
import serviceAccount from './firebase-key.json'

const onSnapshot = ref =>
    Observable.create(observer => {
        ref.onSnapshot(snapshot => observer.next(snapshot))
    })

export default ({ id, logger: baseLogger }) => {
    firebase.initializeApp({
        credential: firebase.credential.cert(serviceAccount),
        databaseURL: `https://${id}.firebaseio.com`,
    })
    baseLogger.platform('Firebase Initialized')
    const db = firebase.firestore()
    const logger = baseLogger.child({ plugin: 'firebase' })

    return {
        onCollectionChange: collectionId => {
            logger.detail(`Watching [${collectionId}] collection`)
            return onSnapshot(db.collection(collectionId)).pipe(
                tap(snapshot => {
                    logger.detail(
                        `${
                            snapshot.docChanges().length
                        } changes found in [${collectionId}]:`
                    )

                    const readableChanges = snapshot
                        .docChanges()
                        .map(({ doc, type }) => ({
                            id: doc.id,
                            type,
                            new: doc.data(),
                        }))
                    logger.debug(prettify(readableChanges))
                }),
                mergeMap(snapshot => from(snapshot.docChanges()))
            )
        },
        onDocumentChange: documentId => {
            logger.detail(`Watching [${documentId}] document`)
            return onSnapshot(db.doc(documentId)).pipe(
                tap(() => logger.detail(`[${documentId}] has changed:`)),
                map(snapshot => snapshot.data()),
                tap(data => logger.debug(prettify(data)))
            )
        },
        get: (key, queries = []) => {
            const parts = key.split('/').length
            if (parts % 2 === 0) {
                logger.detail(`Fetching [${key}] document`)
                return queries
                    .reduce(
                        (final, query) => final.where(...query),
                        db.doc(key)
                    )
                    .get()
                    .then(doc => doc.data())
                    .then(data => {
                        logger.detail(`Got [${key}] document contents`)
                        logger.debug(
                            data ? prettify(data) : 'No document exists'
                        )
                        return data
                    })
            }

            logger.detail(`Fetching [${key}] collection`)
            return queries
                .reduce(
                    (final, query) => final.where(...query),
                    db.collection(key)
                )
                .get()
                .then(snapshots => {
                    const collection = {}
                    snapshots.forEach(snapshot => {
                        collection[snapshot.id] = snapshot.data()
                    })
                    logger.debug(`[${key}] get collection contents:`)
                    logger.debug(prettify(collection))
                    return collection
                })
        },
        set: (doc, values) => {
            logger.detail(`Setting [${doc}] document`)
            return db
                .doc(doc.toString())
                .set(values)
                .then(_ => {
                    logger.debug(`[${doc}] set contents:`)
                    logger.debug(prettify(values))
                    return _
                })
        },
        remove: doc => {
            logger.detail(`Deleting [${doc}] document`)
            return db
                .doc(doc.toString())
                .delete()
                .then(_ => {
                    logger.debug(`[${doc}] document has been removed`)
                    return _
                })
        },
        update: (doc, values) => {
            logger.detail(`Updating [${doc}] document`)
            return db
                .doc(doc.toString())
                .update(values)
                .then(_ => {
                    logger.debug(`Updated [${doc}] document with:`)
                    logger.debug(prettify(values))
                    return _
                })
        },
        upsert: (doc, values) => {
            const ref = db.doc(doc.toString())

            logger.debug(`Checking existence of [${doc}] document`)
            return ref.get().then(snapshot => {
                if (!snapshot.exists) {
                    logger.detail(`Creating [${doc}] since it doesn't exist`)
                    return ref.set(values).then(_ => {
                        logger.debug(`[${doc}] upsert contents:`)
                        logger.debug(prettify(values))
                        return _
                    })
                }

                logger.detail(`Updating [${doc}] in place`)
                return ref.update(values).then(_ => {
                    logger.debug(`Upserted [${doc}] document with:`)
                    logger.debug(prettify(values))
                    return _
                })
            })
        },
        raw: db,
    }
}
