/* eslint max-lines: ['warn', { max: 99, skipBlankLines: true }] */
import { prettify } from '@rampant/logger'

export default ({ db, logger }) => ({
    get: (key, queries = []) => {
        const parts = key.split('/').length
        if (parts % 2 === 0) {
            logger.detail(`Fetching [${key}] document`)
            return queries
                .reduce((final, query) => final.where(...query), db.doc(key))
                .get()
                .then(doc => doc.data())
                .then(data => {
                    logger.detail(`Got [${key}] document contents`)
                    logger.debug(data ? prettify(data) : 'No document exists')
                    return data
                })
        }

        logger.detail(`Fetching [${key}] collection`)
        return queries
            .reduce((final, query) => final.where(...query), db.collection(key))
            .get()
            .then(snapshots => {
                const collection = {}
                snapshots.forEach(snapshot => {
                    collection[snapshot.id] = snapshot.data()
                })
                logger.debug(`[${key}] get collection contents:`)
                logger.debug(prettify(collection))
                return collection
            })
    },
    getAll: (ids = []) => {
        const refs = ids.map(id => db.doc(id))
        return db
            .getAll(...refs)
            .then(snapshots =>
                snapshots.reduce(
                    (all, snapshot) => ({ [snapshot.id]: snapshot.data() }),
                    {}
                )
            )
    },
    set: (doc, values) => {
        logger.detail(`Setting [${doc}] document`)
        return db
            .doc(doc.toString())
            .set(values)
            .then(_ => {
                logger.debug(`[${doc}] set contents:`)
                logger.debug(prettify(values))
                return _
            })
    },
    remove: doc => {
        logger.detail(`Deleting [${doc}] document`)
        return db
            .doc(doc.toString())
            .delete()
            .then(_ => {
                logger.debug(`[${doc}] document has been removed`)
                return _
            })
    },
    update: (doc, values) => {
        logger.detail(`Updating [${doc}] document`)
        return db
            .doc(doc.toString())
            .update(values)
            .then(_ => {
                logger.debug(`Updated [${doc}] document with:`)
                logger.debug(prettify(values))
                return _
            })
    },
    upsert: (doc, values) => {
        const ref = db.doc(doc.toString())

        logger.debug(`Checking existence of [${doc}] document`)
        return ref.get().then(snapshot => {
            if (!snapshot.exists) {
                logger.detail(`Creating [${doc}] since it doesn't exist`)
                return ref.set(values).then(_ => {
                    logger.debug(`[${doc}] upsert contents:`)
                    logger.debug(prettify(values))
                    return _
                })
            }

            logger.detail(`Updating [${doc}] in place`)
            return ref.update(values).then(_ => {
                logger.debug(`Upserted [${doc}] document with:`)
                logger.debug(prettify(values))
                return _
            })
        })
    },
    push: (collection, values) =>
        db
            .collection(collection)
            .add(values)
            .then(ref => ref.id),
})
