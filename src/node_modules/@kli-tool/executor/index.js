import * as R from 'ramda'
import parse from 'minimist'
import log from '@dev-xp/log'
import RenderKid from 'renderkid'
import { isolate } from 'transmutation'
import convertArgs from '@kli-tool/convert-args'
import { render as prettyJson } from 'prettyjson'
import getKeys from '@kli-tool/get-keys-with-path'

const prettify = R.curryN(1, prettyJson)
const formatValue = R.ifElse(R.is(Array), R.join('\n'), prettify)
const printer = render => R.pipe(formatValue, render)
const byType = R.indexBy(R.prop('type'))

export default ({ config, renderer, style, decide } = {}) =>
    // eslint-disable-next-line complexity
    (unparsed = ['']) => {
        const parsed = parse(unparsed, { boolean: true })
        const {
            _: [request, ...commandArgs],
            commit,
            json,
            dry,
            keys,
        } = parsed

        const command = decide(request)

        const { plugins: unkeyed = [] } = config
        const plugins = byType(unkeyed)
        const args = { ...parsed, _: commandArgs }
        const newArgs = convertArgs({ args, conversions: command.args })
        const finalConfig = { ...config, ...newArgs, plugins }

        const formatter = new RenderKid()
        formatter.style(style)
        const run = () => command.run(finalConfig)
        const template = command.template
            ? data => formatter.render(command.template(finalConfig)(data))
            : _ => _
        const effect = command.effect
            ? data => command.effect(finalConfig)(data)
            : _ => _

        const result = Promise.resolve(run())

        const render = command.renderer || renderer
        const print = printer(render)

        if (keys) return result.then(results => print(getKeys(results, keys)))
        if (json) {
            const path = () => (json.indexOf(',') >= 0 ? json.split(',') : json)
            const paths = json === true ? [] : path()

            const newRun = R.pipe(
                run,
                R.andThen(isolate(paths)),
                R.andThen(print)
            )
            return newRun()
        }
        return result.then(data => {
            render(template(data))

            if (commit || (command.autoCommit && !dry)) effect(data)
        })
    }
