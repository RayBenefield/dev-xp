import parse from 'minimist'
import RenderKid from 'renderkid'
import { isolate } from 'transmutation'
import convertArgs from '@kli-tool/convert-args'
import { render as prettyJson } from 'prettyjson'

const jsonRender = prop => results =>
    console.log(prettyJson(isolate(prop)(results)))

const cleanser = cleansings => args =>
    Object.entries(args)
        .map(
            ([name, value]) =>
                name in cleansings
                    ? { [name]: cleansings[name](value) }
                    : { [name]: value }
        )
        .reduce((all, arg) => ({ ...all, ...arg }), {})

export default ({
    config,
    cleanse,
    defaultRenderer,
    defaultStyle,
    decider,
} = {}) =>
    // eslint-disable-next-line complexity
    (unparsed = ['']) => {
        const parsed = parse(unparsed, { boolean: true })
        const { _: [request, ...commandArgs], commit, json } = parsed

        const command = decider(request)

        const args = { ...parsed, _: commandArgs }
        const newArgs = convertArgs({ args, conversions: command.args })
        const finalConfig = cleanser(cleanse)({ ...config, ...newArgs })
        const result = Promise.resolve(command.run(finalConfig))

        if (json)
            return result.then(jsonRender(json === true || json.split(',')))

        const renderer = command.renderer || defaultRenderer
        const formatter = new RenderKid()
        formatter.style(defaultStyle)
        return result.then(unformatted => {
            renderer(
                command.template
                    ? formatter.render(command.template(unformatted))
                    : unformatted
            )
            if (command.effect && commit)
                command.effect(finalConfig)(unformatted)
        })
    }
