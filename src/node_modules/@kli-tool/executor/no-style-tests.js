import configure from '@kli-tool/executor';
import describe from 'kape';

const executor = config => (...input) => configure(config)(...input)();

// Executor Variations
const noStyle = executor({
    defaultRenderer: arg => arg,
    defaultStyle: {},
});

// Command Variations
const noTemplate = { run: () => 'hello' };
const headerTemplate = {
    run: () => 'hello',
    template: r => `<h1>${r}</h1>`,
};

describe('Executor with no style', noStyle, it => {
    it('should ignore all parameters', given =>
        given([[noTemplate], [headerTemplate]]));
});

/*
    it('should run a promise based command', assert => {
        const executor = configure(
            searcher({
                run: () => new Promise(res => res(assert.pass())),
            }),
        );
        executor(['test']);
    });

    it('should send results of command to a renderer', assert => {
        const executor = configure({
            ...searcher({
                run: () => 'pass',
            }),
            defaultRenderer: result => assert.equal(result, 'pass'),
        });
        executor(['test']);
    });

    it('should send results of a promised command to a renderer', assert => {
        const executor = configure({
            ...searcher({
                run: () => new Promise(res => res('pass')),
            }),
            defaultRenderer: result => assert.equal(result, 'pass'),
        });
        executor(['test']);
    });

    it('should send results of a command to the command specific renderer', assert => {
        const executor = configure({
            ...searcher({
                run: () => 'pass',
                renderer: result => assert.equal(result, 'pass'),
            }),
            defaultRenderer: () => assert.fail(),
        });
        executor(['test']);
    });

    // This needs to be handle with a snapshotter
    it.skip('should style a template', assert => {
        const executor = configure({
            ...searcher({
                run: () => 'pass',
                template: r => `<test>${r}</test>`,
                renderer: result => assert.equal(result, '  pass'),
            }),
            defaultStyle: { test: { marginLeft: 2 } },
        });
        executor(['test']);
    });

    // This needs to be handle with a snapshotter
    it.skip('should style a template using a promise command', assert => {
        const executor = configure({
            ...searcher({
                run: () => new Promise(res => res('pass')),
                template: r => `<test>${r}</test>`,
                renderer: result => assert.equal(result, '  pass'),
            }),
            defaultStyle: { test: { marginLeft: 2 } },
        });
        executor(['test']);
    });
*/
