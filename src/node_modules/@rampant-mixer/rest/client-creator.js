import log from '@dev-xp/log'
import simpleOauthModule from 'simple-oauth2'
import {
    Client,
    DefaultRequestRunner,
    OAuthProvider,
} from '@dev-xp/todo-remove'

export default id => {
    const oauth2 = simpleOauthModule.create({
        client: { id },
        auth: {
            tokenHost: 'https://mixer.com',
            tokenPath: '/api/v1/oauth/token',
            authorizePath: '/oauth/authorize',
        },
        options: {
            useBasicAuthorizationHeader: false,
        },
    })

    return async creds => {
        let token = oauth2.accessToken.create({
            access_token: creds['access-token'],
            refresh_token: creds['refresh-token'],
            expires_at: creds.expires ? creds.expires.toDate() : undefined,
        })

        if (token.expired()) {
            try {
                token = await token.refresh()
                await creds.update(token)
            } catch (error) {
                log('Error refreshing access token: ', error)
            }
        }

        const client = new Client(new DefaultRequestRunner())
        client.use(
            new OAuthProvider(client, {
                tokens: {
                    access: token.token.access_token,
                    expires: Date.now() + 365 * 24 * 60 * 60 * 1000,
                },
            })
        )
        client.userId = creds.id
        return client
    }
}
