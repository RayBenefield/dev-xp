import ws from 'ws'
import { Observable } from 'rxjs'
import { ChatService, Socket } from '@mixer/client-node'
import createMixerRest from '@rampant-mixer/rest'

export default ({ clientId, db }) => {
    const restCreator = createMixerRest({ db, clientId })
    const cache = {}

    return async ({ channelId, userId }) => {
        if (channelId in cache && userId in cache[channelId])
            return cache[channelId][userId]

        const restClient = await restCreator(userId)
        const service = new ChatService(restClient)
        const { body: { authkey, endpoints } } = await service.join(channelId)
        const bot = new Socket(ws, endpoints)
        bot.boot()
        await bot.auth(channelId, restClient.userId, authkey)

        const chat = Observable.create(observer => {
            bot.on('ChatMessage', data => observer.next(data))
            bot.on('error', error => observer.error(error))
        })

        chat.message = (...messages) => bot.call('msg', messages)

        chat.whisper = (username, ...messages) =>
            bot.call('whisper', [username, ...messages])

        chat.erase = (...messages) =>
            setTimeout(() => bot.call('deleteMessage', messages), 150)

        chat.clear = () => setTimeout(() => bot.call('clearMessages'), 150)

        if (!(channelId in cache)) cache[channelId] = {}
        cache[channelId][userId] = chat

        return chat
    }
}
