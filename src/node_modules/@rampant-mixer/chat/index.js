import { Observable } from 'rxjs'
import mapKeys from 'lodash.mapkeys'
import { map, share } from 'rxjs/operators'
import camelCase from 'lodash.camelcase'
import createMixerRest from '@rampant-mixer/rest'
import { ws, ChatService, Socket } from '@dev-xp/todo-remove'

const camelCaseKeys = obj => mapKeys(obj, (_, key) => camelCase(key))

export default ({ clientId, db }) => {
    const restCreator = createMixerRest({ db, clientId })
    const cache = {}

    return async ({ channelId, userId }) => {
        if (channelId in cache && userId in cache[channelId])
            return cache[channelId][userId]

        const restClient = await restCreator(userId)
        const service = new ChatService(restClient)
        const {
            body: { authkey, endpoints },
        } = await service.join(channelId)
        const bot = new Socket(ws, endpoints)
        bot.boot()
        await bot.auth(channelId, restClient.userId, authkey)

        const chat = Observable.create(observer => {
            bot.on('ChatMessage', data => observer.next(data))
            bot.on('error', error => observer.error(error))
        }).pipe(map(camelCaseKeys), share())

        chat.message = (...messages) => bot.call('msg', messages)

        chat.whisper = (username, ...messages) =>
            bot.call('whisper', [username, ...messages])

        chat.erase = (...messages) =>
            setTimeout(() => bot.call('deleteMessage', messages), 150)

        chat.clear = () => setTimeout(() => bot.call('clearMessages'), 150)

        if (!(channelId in cache)) cache[channelId] = {}
        cache[channelId][userId] = chat

        return chat
    }
}
