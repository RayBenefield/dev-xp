import argv from 'argv'
import { from } from 'rxjs'
import { filter, mergeMap, count } from 'rxjs/operators'
import { logger, db } from '@rampant/ai'

argv.version('v0.0.0')
argv.info(
    'Go through training and remove all untrained instances that are already trained.'
)

argv.option([
    {
        name: 'name',
        short: 'n',
        type: 'string',
        description: 'Name of sync to',
        example: '--name=channel-name',
    },
])

const { options: { name } } = argv.run()
const log = logger.child({ plugin: 'dedupe' })

if (!name) {
    log.error('Project required!')
    process.exit(1)
}

log.plugin('Fetching all samples...')
from(db.get(`projects/${name}/intents`).then(intents => Object.keys(intents)))
    .pipe(
        mergeMap(intents => from([...intents, '-negative-'])),
        mergeMap(intent => db.get(`projects/${name}/training/${intent}`)),
        mergeMap(({ samples = [] } = {}) => from(samples)),
        mergeMap(sample =>
            db.get(`projects/${name}/untrained/${sample}`).then(data => {
                if (!data) {
                    log.extend(`No dupe for [${sample}]`)
                    return Promise.resolve(false)
                }

                log.extend(`Deleting [${sample}]...`)
                return db
                    .remove(`projects/${name}/untrained/${sample}`)
                    .then(() => log.intent(`[${sample}] dupe removed.`))
                    .then(() => true)
            })
        ),
        filter(deleted => deleted),
        count()
    )
    .subscribe(deletedCount => log.plugin(`${deletedCount} dupes found.`))
