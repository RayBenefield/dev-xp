import argv from 'argv'
import { db, logger } from '@rampant/ai'
import { filter, mergeMap } from 'rxjs/operators'
import { firestore } from 'firebase-admin'
import { from, defer, concat } from 'rxjs'
import sanitize from '@rampant-wit/sanitize'

const { raw: store } = db

argv.version('v0.0.0')
argv.info('Go through untrained samples and add intent count to them.')

argv.option([
    {
        name: 'name',
        short: 'n',
        type: 'string',
        description: 'Name of the project to update with intent counts',
        example: '--name=channel-name',
    },
    {
        name: 'limit',
        short: 'l',
        type: 'number',
        description: 'How many to fetch at one time',
        example: '--limit=50',
    },
])

const { options: { name, limit = 50 } } = argv.run()
const log = logger.child({ plugin: 'intent-count' })

if (!name) {
    log.error('Project required!')
    process.exit(1)
}

const { FieldPath } = firestore

const getPage = start => {
    const query = start
        ? store
              .collection(`projects/${name}/untrained`)
              .limit(parseInt(limit, 10))
              .orderBy(FieldPath.documentId())
              .startAfter(start)
              .get()
        : store
              .collection(`projects/${name}/untrained`)
              .limit(parseInt(limit, 10))
              .get()

    return query.then(snapshots => {
        const collection = []
        snapshots.forEach(snapshot => {
            collection.push({
                id: snapshot.id,
                sample: sanitize(snapshot.id),
                entities: snapshot.data(),
            })
        })
        return collection
    })
}

const addIntentCount = ({ id, entities }) => {
    log.extend(`Adding intent count to [${id}]`)
    return db.update(`projects/${name}/untrained/${id}`, {
        intentCount: 'intent' in entities ? entities.intent.length : 0,
    })
}

const getItems = start =>
    defer(() => from(getPage(start))).pipe(
        mergeMap(collection => {
            const items$ = from(collection).pipe(
                filter(({ entities }) => !('intentCount' in entities)),
                mergeMap(addIntentCount, 1)
            )

            const next$ = getItems(collection[collection.length - 1].sample)
            return concat(items$, next$)
        })
    )

getItems().subscribe()
