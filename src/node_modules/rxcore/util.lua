local identity = function(val) return val end

local noop = function() end

local printError = function(err) print(err) end

local isTrue = function(val)
    if (not val) then
        return false
    end

    if (val == '') then
        return false
    end

    if (val == 0) then
        return false
    end

    return true
end

local isFunction = function(val)
    if type(val) == 'function' then
        return true
    end
end

local map = function(t, projection)
    local out = {}

    for k, v in pairs(t) do
        table.insert(out, projection(v))
    end

    return out
end

local filter = function(t, filterIter)
    local out = {}

    for k, v in pairs(t) do
        if filterIter(v, k, t) then table.insert(out, v) end
    end

    return out
end

local onlyTrue = function(table)
    return filter(table, isTrue)
end

local onlyFunctions = function(table)
    return filter(table, isFunction)
end

local foldr = function(fn, result, collection)
    for iterator, value in pairs(collection) do
        result = fn(result, value)
    end
    return result
end

local reduce = function(collection, fn, initialValue)
    return foldr(fn, initialValue, collection)
end

local isTable = function(value)
    return value and type(value) == 'table'
end

local isObservable = function(value)
    return type(value) == 'table'
        and type(value.subscribe) == 'function'
        and type(value.pipe) == 'function'
end

local isObserver = function(value)
    return type(value) == 'table'
        and type(value.next) == 'function'
        and type(value.err) == 'function'
        and type(value.complete) == 'function'
        and type(value.add) == 'function'
end

local isSubscriber = function(value)
    if type(value) == 'function' then
        return false
    end

    return value
        and type(value.next) == 'function'
        and type(value.err) == 'function'
        and type(value.complete) == 'function'
end

local isSubscription = function(value)
    return type(value) == 'table'
        and type(value.unsubscribe) == 'function'
        and type(value.add) == 'function'
end

local onlyObservables = function(table)
    return filter(table, isObservable)
end

local printTable = function(tbl, label, output)
    output = output or print
    output('('..tostring(label or tbl)..') {')
    for key, val in pairs(tbl) do
        output('    ['..key..'] = '..tostring(val))
    end
    output('}')
end

local reverseTable = function(tbl)
    local out = {}

    for i = #tbl, 1, -1 do
        table.insert(out, tbl[i])
    end

    return out
end

return {
    reduce = reduce,
    onlyTrue = onlyTrue,
    onlyFunctions = onlyFunctions,
    onlyObservables = onlyObservables,
    filter = filter,
    isFunction = isFunction,
    isTrue = isTrue,
    printError = printError,
    noop = noop,
    identity = identity,
    isSubscriber = isSubscriber,
    isObservable = isObservable,
    isObserver = isObserver,
    isTable = isTable,
    printTable = printTable,
    reverseTable = reverseTable,
    isSubscription = isSubscription,
}
