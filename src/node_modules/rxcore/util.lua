local noop = function() end

local printError = function(err) print(err) end

local isTrue = function(val)
    if (not val) then
        return false
    end

    if (val == '') then
        return false
    end

    if (val == 0) then
        return false
    end

    return true
end

local isFunction = function(val)
    if type(val) == 'function' then
        return true
    end
end

local filter = function(t, filterIter)
    local out = {}

    for k, v in pairs(t) do
        if filterIter(v, k, t) then table.insert(out, v) end
    end

    return out
end

local onlyTrue = function(table)
    return filter(table, isTrue)
end

local onlyFunctions = function(table)
    return filter(table, isFunction)
end

local foldr = function(fn, result, collection)
    for iterator, value in pairs(collection) do
        result = fn(result, value)
    end
    return result
end

local reduce = function(collection, fn, initialValue)
    return foldr(fn, initialValue, collection)
end


return {
    reduce = reduce,
    onlyTrue = onlyTrue,
    onlyFunctions = onlyFunctions,
    filter = filter,
    isFunction = isFunction,
    isTrue = isTrue,
    printError = printError,
    noop = noop,
}
