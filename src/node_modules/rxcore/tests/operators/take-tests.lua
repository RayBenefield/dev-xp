local expect, printed = require'rx-test'()

local rx, _ = require'rx'()
local of = require('rx.observable.of')
local from = require('rx.observable.from')
local take = require('rx.operators.take')

describe('Take Operator', function()
    describe('take()', function()
        it('is included in rx object', function()
            assert.no.is_nil(rx.operators.take)
        end)

        it('takes nothing from 1 is bypassed', function()
            local test_ = of('hello').pipe(take())

            expect(test_).to.produce('hello')
        end)

        it('takes nothing from 2 is bypassed', function()
            local test_ = from({'hello', 'world'}).pipe(take())

            expect(test_).to.produce('hello', 'world')
        end)

        it('takes 0 from 1 is emptied', function()
            local test_ = of('world').pipe(take(0))

            expect(test_).to.produce()
        end)

        it('takes 0 from 1 is emptied', function()
            local test_ = from({'world', 'folks'}).pipe(take(0))

            expect(test_).to.produce()
        end)

        it('takes 1 from 1', function()
            local test_ = of('world').pipe(take(1))

            expect(test_).to.produce('world')
        end)

        it('takes 1 from 3', function()
            local test_ = from({'world', 'folks', 'people'}).pipe(take(1))

            expect(test_).to.produce('world')
        end)

        it('takes 2 from 3', function()
            local test_ = from({'world', 'folks', 'people'}).pipe(take(2))

            expect(test_).to.produce('world', 'folks')
        end)

        it('finishes when source does, even if threshold is not reached', function()
            local test_ = from({'world', 'folks', 'people'}).pipe(take(5))

            expect(test_).to.produce('world', 'folks', 'people')
        end)
    end)
end)
