local expect, printed = require('rx-test')()

local rx = require('rx')
local of = require('rx.observable.of')
local from = require('rx.observable.from')
local take = require('rx.operators.take')

describe('Take Operator', function()
    describe('take()', function()
        it('is included in rx object', function()
            assert.no.is_nil(rx.operators.take)
        end)

        it('takes nothing from 1 is bypassed', function()
            local test_ = of('hello').pipe(take())

            expect(test_).to.produce('hello')
        end)
    end)
end)

--         it('takes nothing from 1 is bypassed', function()
--             local test_ = of('world')
--             local seen = 0

--             test_.pipe(
--                 take()
--             ).subscribe(
--                 function(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(1, seen)
--                 end
--             )
--         end)

--         it('takes nothing from 2 is bypassed', function()
--             local test_ = from({'world', 'folks'})
--             local seen = 0

--             test_.pipe(
--                 take()
--             ).subscribe(
--                 function(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(2, seen)
--                 end
--             )
--         end)

--         it('takes 0 from 1 is emptied', function()
--             local test_ = of('world')
--             local seen = 0

--             test_.pipe(
--                 take(0)
--             ).subscribe(
--                 function(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(0, seen)
--                 end
--             )
--         end)

--         it('takes 0 from 2 is emptied', function()
--             local test_ = from({'world', 'folks'})
--             local seen = 0

--             test_.pipe(
--                 take(0)
--             ).subscribe(
--                 function(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(0, seen)
--                 end
--             )
--         end)

--         it('takes 1 from 1', function()
--             local test_ = of('world')

--             test_.pipe(
--                 take(1)
--             ).subscribe(function(val)
--                 assert.are.equal('world', val)
--             end)
--         end)

--         it('takes 1 from 2', function()
--             local test_ = from({'world', 'folks', 'people'})
--             local seen = 0

--             test_.pipe(
--                 take(1)
--             ).subscribe(
--                 function(val)
--                     assertAll({'world'})(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(1, seen)
--                 end
--             )
--         end)

--         it('takes 2 from 2', function()
--             local test_ = from({'world', 'folks', 'people'})
--             local seen = 0
--             local check = assertAll({'world', 'folks'})

--             test_.pipe(
--                 take(2)
--             ).subscribe(
--                 function(val)
--                     check(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(2, seen)
--                 end
--             )
--         end)

--         it('finishes when source does, even if threshold is not reached', function()
--             local test_ = from({'world', 'folks', 'people'})
--             local seen = 0
--             local check = assertAll({'world', 'folks', 'people'})

--             test_.pipe(
--                 take(5)
--             ).subscribe(
--                 function(val)
--                     check(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(3, seen)
--                 end
--             )
--         end)
--     end)
-- end)
