local expect, printed = require('rx-test')()

local rx = require('rx')
local of = require('rx.observable.of')
local log = require('rx.operators.log')

describe('Log Operator', function()
    describe('log()', function()
        it('is included in rx object', function()
            assert.no.is_nil(rx.operators.log)
        end)

        it('handles no operator', function()
            local test_ = of('hello')

            expect(test_.pipe()).to.produce('hello')
        end)

        it('handles single log operator', function()
            local test_ = of('hello')

            expect(test_.pipe(log())).to.produce('hello')
            printed(1)
        end)

        it('handles double log operators', function()
            local test_ = of('hello')

            expect(test_.pipe(log(), log())).to.produce('hello')
            printed(2)
        end)

        it('allows a table of operators', function()
            local test_ = of('hello')

            expect(test_.pipe({ log(), log() })).to.produce('hello')
            printed(2)
        end)


--         it('handles single value', function()
--             local test_ = of('hello')

--             test_.pipe(log()).subscribe(function(val)
--                 assert.are.equal('hello', val)
--             end)
--         end)

--         it('handles multiple values', function()
--             local test_ = from({'hello', 'world', 'today'})
--             local check = assertAll({'hello', 'world', 'today'})
--             local seen = 0

--             test_.pipe(log()).subscribe(
--                 function(val)
--                     check(val)
--                     seen = seen + 1
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(3, seen)
--                 end
--             )
--         end)

--         it('logs tables with key values', function()
--             local test_ = of({test = 'hello', again = 'world', final = 'today'})
--             local seen = 0

--             test_.pipe(log()).subscribe(
--                 function(val)
--                     seen = seen + 1
--                     assert.are.same({test = 'hello', again = 'world', final = 'today'}, val)
--                 end,
--                 nil,
--                 function()
--                     assert.are.equal(1, seen)
--                 end
--             )
--         end)
    end)
end)
