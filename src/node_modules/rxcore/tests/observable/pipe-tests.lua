local expect, printed = require'rx-test'()

local rx, _ = require'rx'()

describe('Pipe Function', function()
    describe('pipe', function()
        it('handles no operator', function()
            local test_ = rx.of('hello').pipe()

            expect(test_).to.produce('hello')
        end)

        it('handles single log operator', function()
            local test_ = rx.of('hello').pipe(_.log())

            expect(test_).to.produce('hello')
            printed(1)
        end)

        it('handles double log operators', function()
            local test_ = rx.of('hello').pipe(_.log(), _.log())

            expect(test_).to.produce('hello')
            printed(2)
        end)

        it('allows a table of operators', function()
            local test_ = rx.of('hello').pipe({_.log(), _.log()})

            expect(test_).to.produce('hello')
            printed(2)
        end)

        it('orders operators properly', function()
            local test_ = rx.of('hello')
            .pipe({
                _.log(),
                _.map(function(str) return str .. ' world' end),
                _.log(),
                _.map(function(str) return str .. ' again' end),
                _.log(),
            })

            expect(test_).to.produce('hello world again')
            printed(3)
        end)

        it('handles custom operators', function()
            local double = function(num) return num*2 end
            local doubleMap = function()
                return function(source)
                    return source.pipe({
                        _.map(double),
                        _.log(),
                        _.map(double),
                    })
                end
            end

            local test_ = rx.of(2).pipe(doubleMap())

            expect(test_).to.produce(8)
            printed(1)
        end)
    end)
end)
