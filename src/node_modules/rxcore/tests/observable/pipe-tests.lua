local expect = require('rx-test')

local rx = require('rx')
local of = require('rx.observable.of')

describe('Of Creation Operator', function()
   describe('pipe', function()
       it('handles no operator', function()
           local test_ = of('hello')

           expect(test_.pipe()).to.produce('hello')
       end)

--        it('handles single log operator', function()
--            local test_ = of('hello')

--            test_.pipe(log()).subscribe(function(val)
--                assert.are.equal('hello', val)
--            end)
--        end)

--        it('handles double log operators', function()
--            local test_ = of('hello')

--            test_.pipe(log(), log()).subscribe(function(val)
--                assert.are.equal('hello', val)
--            end)
--        end)

--        it('orders operators properly', function()
--            local test_ = of('hello')

--            test_.pipe(
--                log(),
--                map(function(str) return str .. ' world' end),
--                log(),
--                map(function(str) return str .. ' again' end),
--                log()
--            ).subscribe(function(val)
--                assert.are.equal('hello world again', val)
--            end)
--        end)

--        it('handles custom operators', function()
--            local test_ = of(2)
--            local double = function(num) return num*2 end
--            local doubleMap = function()
--                return function(source)
--                    return source.pipe(
--                        map(double),
--                        map(double)
--                    )
--                end
--            end

--            test_.pipe(
--                doubleMap()
--            ).subscribe(function(val)
--                print(val)
--                assert.are.equal(8, val)
--            end)
--        end)

--        it('accepts a table in place of packed variables', function()
--            local test_ = of('hello')

--            test_.pipe({
--                log(),
--                map(function(str) return str .. ' world' end),
--                log(),
--                map(function(str) return str .. ' again' end),
--                log(),
--            }).subscribe(function(val)
--                assert.are.equal('hello world again', val)
--            end)
       end)
end)
