local expect, printed = require'rx-test'()

local rx, _ = require'rx'()
local of = require('rx.observable.of')

describe('Pipe Function', function()
    describe('pipe', function()
        it('handles no operator', function()
            local test_ = of('hello').pipe()

            expect(test_).to.produce('hello')
        end)

        it('handles single log operator', function()
            local test_ = of('hello').pipe(_.log())

            expect(test_).to.produce('hello')
            printed(1)
        end)

        it('handles double log operators', function()
            local test_ = of('hello').pipe(_.log(), _.log())

            expect(test_).to.produce('hello')
            printed(2)
        end)

        it('allows a table of operators', function()
            local test_ = of('hello').pipe({_.log(), _.log()})

            expect(test_).to.produce('hello')
            printed(2)
        end)

        it('orders operators properly', function()
            local test_ = of('hello')
            .pipe({
                _.log(),
                _.map(function(str) return str .. ' world' end),
                _.log(),
                _.map(function(str) return str .. ' again' end),
                _.log(),
            })

            expect(test_).to.produce('hello world again')
            printed(3)
        end)

        --        it('handles custom operators', function()
        --            local test_ = of(2)
        --            local double = function(num) return num*2 end
        --            local doubleMap = function()
        --                return function(source)
        --                    return source.pipe(
        --                        map(double),
        --                        map(double)
        --                    )
        --                end
        --            end

        --            test_.pipe(
        --                doubleMap()
        --            ).subscribe(function(val)
        --                print(val)
        --                assert.are.equal(8, val)
        --            end)
        --        end)

        --        it('accepts a table in place of packed variables', function()
        --            local test_ = of('hello')

        --            test_.pipe({
        --                log(),
        --                map(function(str) return str .. ' world' end),
        --                log(),
        --                map(function(str) return str .. ' again' end),
        --                log(),
        --            }).subscribe(function(val)
        --                assert.are.equal('hello world again', val)
        --            end)
    end)
end)
