local assert = require('luassert')
local rx = require('rx')
local create = require('rx.observable.create')
local of = require('rx.observable.of')
local task = require('task')

describe('Observable Creation', function()
    describe('create() through rx', function()
        it('imitates of() operator', function()
            local test_ = rx.observable.create(function(subscriber)
                subscriber.next('hello')
                subscriber.complete()
            end)

            test_.subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)
    end)

    describe('create()', function()
        it('imitates of() operator', function()
            local test_ = create(function(subscriber)
                subscriber.next('hello')
                subscriber.complete()
            end)

            test_.subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)

        task.Spawn(function(Task)
            it('imitates timeout() operator', function()
                local test_ = create(function(subscriber)
                    Task.Wait(500)
                    subscriber.next('hello')
                    Task.Wait(500)
                    subscriber.complete()
                end)

                test_.subscribe(
                    function(val) assert.are.equal('hello', val) end,
                    nil,
                    function() assert.are.equal(true, true) end
                )
            end)
        end)
    end)

    describe('of()', function()
        it('works with a basic string', function()
            local test_ = of('hello')

            test_.subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)
    end)
end)
