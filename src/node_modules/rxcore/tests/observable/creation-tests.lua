local task = require('task')
local global = require('global')
local assert = require('luassert')
local assertAll = require('assert-all')

local rx = require('rx')
local of = require('rx.observable.of')
local from = require('rx.observable.from')
local timer = require('rx.observable.timer')
local create = require('rx.observable.create')

describe('Observable Creation', function()
    describe('create() through rx', function()
        it('imitates of() operator', function()
            local test_ = rx.observable.create(function(subscriber)
                subscriber.next('hello')
                subscriber.complete()
            end)

            test_.subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)
    end)

    describe('create()', function()
        it('imitates of() operator', function()
            local test_ = create(function(subscriber)
                subscriber.next('hello')
                subscriber.complete()
            end)

            test_.subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)

        task.Spawn(function(Task)
            it('imitates timer() operator', function()
                local test_ = create(function(subscriber)
                    Task.Wait(500)
                    subscriber.next('hello')
                    Task.Wait(500)
                    subscriber.complete()
                end)

                local next = function(val) assert.are.equal('hello', val) end
                local complete = function() assert.are.equal(true, true) end
                test_.subscribe(next, nil, complete)
            end)
        end)
    end)

    describe('of()', function()
        it('works with a basic string', function()
            local test_ = of('hello')

            test_.subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)
    end)

    describe('from()', function()
        it('works with a basic array', function()
            local test_ = from({'hello', 'world'})

            local assertNext = assertAll({'hello', 'world'})
            test_.subscribe(assertNext)
        end)
    end)

    task.Spawn(function(Task)
        setup(function() global('Task', Task) end)

        describe('timer()', function()
            it('works with a delay', function()
                local test_ = timer(500)

                test_.subscribe(function(val)
                    assert.are.equal(0, val)
                end)
            end)
        end)

        teardown(function() global('Task', nil) end)
    end)
end)
