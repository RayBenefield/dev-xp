local Task = require('task')
local global = require('global')
local expect = require('rx-test')

local rx = require('rx')
-- local of = require('rx.observable.of')
-- local take = require('rx.operators.take')
-- local log = require('rx.operators.log')
local from = require('rx.observable.from')
-- local range = require('rx.observable.range')
-- local between = require('rx.observable.between')
-- local timer = require('rx.observable.timer')
-- local EMPTY = require('rx.observable.empty')
-- local create = require('rx.observable.create')
local merge = require('rx.observable.merge')

describe('Observable Creation', function()
    -- describe('create()', function()
    --     it('is included in rx object', function()
    --         assert.no.is_nil(rx.observable.create)
    --     end)

    --     it('imitates of() operator', function()
    --         local test_ = create(function(subscriber)
    --             subscriber.next('hello')
    --             subscriber.complete()
    --         end)

    --         test_.subscribe(function(val)
    --             assert.are.equal('hello', val)
    --         end)
    --     end)

    --     it('imitates timer() operator with Core task implementation', function()
    --         local test_ = create(function(subscriber)
    --             Task.Spawn(function()
    --                 Task.Wait(0.5)
    --                 subscriber.next('hello')
    --                 Task.Wait(0.5)
    --                 subscriber.complete()
    --             end)
    --         end)

    --         local next = function(val) assert.are.equal('hello', val) end
    --         local complete = function() assert.are.equal(true, true) end
    --         test_.subscribe(next, nil, complete)
    --     end)
    -- end)

    -- describe('of()', function()
    --     it('is included in rx object', function()
    --         assert.no.is_nil(rx.observable.of)
    --     end)

    --     it('works with a basic string', function()
    --         local test_ = of('hello')

    --         test_.subscribe(function(val)
    --             assert.are.equal('hello', val)
    --         end)
    --     end)
    -- end)

    -- describe('from()', function()
    --     it('is included in rx object', function()
    --         assert.no.is_nil(rx.observable.from)
    --     end)

    --     it('works with a basic array', function()
    --         local test_ = from({'hello', 'world'})

    --         local assertNext = assertAll({'hello', 'world'})
    --         test_.subscribe(assertNext)
    --     end)

    --     it('works with a hashtable', function()
    --         local test_ = from({
    --             hello = 'world',
    --             goodbye = 'world',
    --         })

    --         local assertNext = assertAll({
    --             hello = 'world',
    --             goodbye = 'world'
    --         })
    --         test_.subscribe(assertNext)
    --     end)
    -- end)

    -- describe('timer()', function()
    --     setup(function() global('Task', Task) end)

    --     it('is included in rx object', function()
    --         assert.no.is_nil(rx.observable.timer)
    --     end)

    --     it('works with a delay', function()
    --         local test_ = timer(500)

    --         test_.subscribe(function(val)
    --             assert.are.equal(0, val)
    --         end)
    --     end)

    --     it('works with an interval', function()
    --         local test_ = timer(500, 100)
    --         local seen = 0

    --         test_.pipe(
    --             take(3)
    --         ).subscribe(
    --             function(val)
    --                 seen = seen + 1
    --             end,
    --             nil,
    --             function(val)
    --                 assert.are.equal(3, seen)
    --             end
    --         )
    --     end)

    --     teardown(function() global('Task', nil) end)
    -- end)

    -- describe('empty()', function()
    --     it('is included in rx object', function()
    --         assert.no.is_nil(rx.observable.EMPTY)
    --     end)

    --     it('does not call next', function()
    --         local test_ = EMPTY
    --         local seen = 0

    --         test_.subscribe(
    --             function(val)
    --                 seen = seen + 1
    --             end,
    --             nil,
    --             function()
    --                 assert.are.equal(0, seen)
    --             end
    --         )
    --     end)
    -- end)

    -- describe('range()', function()
    --     it('is included in rx object', function()
    --         assert.no.is_nil(rx.observable.range)
    --     end)

    --     it('handles just a count', function()
    --         local test_ = range(3)
    --         local check = assertAll({0, 1, 2})

    --         test_.subscribe(check)
    --     end)

    --     it('handles a count and start', function()
    --         local test_ = range(5, 3)
    --         local check = assertAll({5, 6, 7})

    --         test_.subscribe(check)
    --     end)
    -- end)

    -- describe('between()', function()
    --     it('is included in rx object', function()
    --         assert.no.is_nil(rx.observable.between)
    --     end)

    --     it('handles a start to last', function()
    --         local test_ = between(3, 5)
    --         local check = assertAll({3, 4, 5})

    --         test_.subscribe(check)
    --     end)

    --     it('handles a start to last in reverse', function()
    --         local test_ = between(5, 3, -1)
    --         local check = assertAll({5, 4, 3})

    --         test_.subscribe(check)
    --     end)
    -- end)

    describe('merge()', function()
        -- it('is included in rx object', function()
        --     assert.no.is_nil(rx.observable.merge)
        -- end)

        -- it('handles one observable', function()
        --     local test_ = merge(of('hello'))

        --     test_.subscribe(function(val)
        --         assert.are.equal('hello', val)
        --     end)
        -- end)

        -- it('handles two observables', function()
        --     local test_ = merge(of('hello'), of('world'))
        --     local check = assertAll({'hello', 'world'})

        --     test_.subscribe(check)
        -- end)

        it('handles double nested observables properly', function()
            local firstThree_ = from({'one', 'two', 'three'})
            local secondThree_ = from({'four', 'five', 'six'})
            local onlyFirst_ = merge(firstThree_)
            local both_ = merge(onlyFirst_, secondThree_)
            local test_ = merge(both_, firstThree_)

            expect(test_).to.produce('one', 'two', 'three', 'four', 'five', 'six', 'one', 'two', 'three')
        end)
    end)
end)
