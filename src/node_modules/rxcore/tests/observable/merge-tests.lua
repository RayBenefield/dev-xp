local expect, printed = require'rx-test'()
local rx, _ = require'rx'()

describe('Merge Creation Operator', function()
    describe('merge()', function()
        it('is included in rx object', function()
            assert.no.is_nil(rx.merge)
        end)

        it('handles one observable', function()
            local test_ = rx.merge(rx.of('hello'))

            expect(test_).to.produce('hello')
        end)

        it('handles two observables', function()
            local test_ = rx.merge(rx.of('hello'), rx.of('world'))

            expect(test_).to.produce('hello', 'world')
        end)

        it('handles expected order of observables', function()
            local test_ = rx.merge(rx.of('hello', 'roar'), rx.of('world'), rx.of('test'))

            expect(test_).to.produce('hello', 'roar', 'world', 'test')
        end)

        it('handles double nested observables properly', function()
            local firstThree_ = rx.from({'one', 'two', 'three'})
            local secondThree_ = rx.from({'four', 'five', 'six'})
            local onlyFirst_ = rx.merge(firstThree_)
            local both_ = rx.merge(onlyFirst_, secondThree_)
            local test_ = rx.merge(both_, firstThree_)

            expect(test_).to.produce('one', 'two', 'three', 'four', 'five', 'six', 'one', 'two', 'three')
        end)

        it('handles expected order of observables', function()
            local test_ = rx.merge({
                rx.of('hello', 'roar'),
                rx.of('world'),
                rx.of('test'),
            })

            expect(test_).to.produce('hello', 'roar', 'world', 'test')
        end)
    end)
end)
