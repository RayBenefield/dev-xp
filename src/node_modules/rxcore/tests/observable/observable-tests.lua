local assert = require('luassert')

local rx = require('rx')
local of = require('rx.observable.of')
local log = require('rx.operators.log')
local map = require('rx.operators.map')

describe('Observable Basics', function()
    describe('pipe', function()
        it('handles no operator', function()
            local test_ = of('hello')

            test_.pipe().subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)

        it('handles single log operator', function()
            local test_ = of('hello')

            test_.pipe(log()).subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)

        it('handles double log operators', function()
            local test_ = of('hello')

            test_.pipe(log(), log()).subscribe(function(val)
                assert.are.equal('hello', val)
            end)
        end)

        it('orders operators properly', function()
            local test_ = of('hello')

            test_.pipe(
                log(),
                map(function(str) return str .. ' world' end),
                log(),
                map(function(str) return str .. ' again' end),
                log()
            ).subscribe(function(val)
                assert.are.equal('hello world again', val)
            end)
        end)
    end)
end)
