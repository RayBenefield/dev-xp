local create = require('rx.observable.create')
local log = require('rx.operators.log')

return function(projection)
    if (not projection) then
        return false
    end

    return function(source)
        return create(function(destination)
            print('►►►subscribing', destination)
            local active = 0
            local isComplete = false
            local checkComplete = function()
                print('checking', isComplete, active)
                if (active <= 0 and isComplete) then
                    print(isComplete)
                    print('active ', active)
                    print('completing')
                    destination.complete()
                end
            end

            source
                .pipe({
                    map(projection),
                }).subscribe(
                function(...)
                    local inner = projection(...)
                    print('►►►adding', inner)
                    active = active + 1
                    print('adding active', active)
                    -- inner.pipe(log('['..tostring(destination)..']►')).subscribe(
                    inner.subscribe(
                        function(val) 
                            print(val)
                            print('►►►sending', inner)
                            print('►►►receiving', destination)
                            destination.next(val)
                        end,
                        destination.err,
                        function()
                            print('►►►inner complete', inner)
                            active = active - 1
                            checkComplete()
                        end
                    )
                end,
                nil,
                function()
                    print('►►►merge complete', source)
                    isComplete = true
                    checkComplete()
                end
            )
        end)
    end
end
