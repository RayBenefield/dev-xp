local util = require('util')
local isFunction = util.isFunction
local isSubscriber = util.isSubscriber

local create

create = function(subscribeFn)
    subscribeFn = subscribeFn or util.noop
    local subscriber = nil
    local observable = nil
    local closed = false
    local subscription = nil

    local createSafeSubscriber = function(next, err, complete)
        return {
            next = isFunction(next) and next or util.noop,
            err = isFunction(err) and err or util.printError,
            complete = isFunction(complete) and complete or util.noop,
        }
    end

    local createSubscriber = function(observerOrNext, err, complete)
        local newSubscriber = isSubscriber(observerOrNext)
            and observerOrNext 
            or createSafeSubscriber(observerOrNext, err, complete)

        local newNext = function(...)
            if (closed) then
                return
            end

            newSubscriber.next(...)
        end
        local newErr = function(...)
            newSubscriber.err(...)
        end
        local newComplete = function()
            print('►►►base complete', observable)

            if (closed) then
                return
            end

            closed = true
            newSubscriber.complete()

            if (type(subscription) == 'function') then
                subscription()
            end
        end

        return {
            next = newNext,
            err = newErr,
            complete = newComplete,
        }
    end

    local subscribe = function(observerOrNext, err, complete)
        subscriber = createSubscriber(observerOrNext, err, complete)
        print('►►►source', observable, '►►►destination', subscriber)

        subscription = subscribeFn(subscriber)
        return subscription or function() subscriber.complete() end
    end

    local pipe = function(...)
        local args = {...}
        args = type(args[1]) == 'table' and args[1] or args
        local operators = util.onlyFunctions(args)
        local operatorCount = #operators

        if (operatorCount == 0) then
            return observable
        end

        if (operatorCount == 1) then
            local source = observable
            local operator = operators[1]
            return source.lift(function(destination)
                operator(source, destination)
            end)
        end

        return util.reduce(operators, function(source, operator)
            return source.lift(function(destination)
                operator(source, destination)
            end)
        end, observable)
    end

    local lift = function(operator)
        local source = observable
        local operator = operator

        return create(function(destination)
            return source.subscribe(operator(destination))
        end)
    end

    observable = { subscribe = subscribe, pipe = pipe, lift = lift }

    print('►►►creating', observable)

    return observable
end

return create
