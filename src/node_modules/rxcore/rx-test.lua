local assert = require('luassert')
local spy = require('luassert.spy')
local util = require('util')
local createObserver = require('rx.observer.create')

local OBSERVABLE_KEY = '__stream_state'

local is = function(state) return state end

local observable = function(state, args, level)
    rawset(state, OBSERVABLE_KEY, args[1])
    return state
end

local observableSpy = function(observable)
    local onNextSpy = spy.new(function() end)
    local onErrorSpy = spy.new(function() end)
    local onCompletedSpy = spy.new(function() end)
    local observer = createObserver(
        function (...) onNextSpy(...) end,
        function (...) onErrorSpy(...) end,
        function () onCompletedSpy() end
    )
    observable.subscribe(observer)
    return onNextSpy, onErrorSpy, onCompletedSpy
end

local produce = function(state, args, level)
    local _ = rawget(state, OBSERVABLE_KEY)
    local onNext, onError, onComplete = observableSpy(_)
    for key, val in pairs(onNext.calls) do
        assert.to.equal(args[key], val.vals[1])
    end
    assert.spy(onComplete).was.called(1)
    return true
end

assert:register('modifier', 'expect', observable)
assert:register('modifier', 'to', util.identity)
assert:register('assertion', 'produce', produce)

return function(...) return assert.expect(...) end
