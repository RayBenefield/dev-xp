local assert = require('luassert.assert')
local spy = require('luassert.spy')
local util = require('util')
local rx = require'rx'()
local global = require('global')

local truePrint = print
local printSpy = spy.new(function() end)
global('print', printSpy)

local OBSERVABLE_KEY = '__stream_state'
local NULL = '__nil__'

local is = function(state) return state end

local observable = function(state, args, level)
    rawset(state, OBSERVABLE_KEY, args[1])
    return state
end

local observableSpy = function(observable)
    local onNextSpy = spy.new(function() end)
    local onErrorSpy = spy.new(function() end)
    local onCompletedSpy = spy.new(function() end)
    local observer = rx.observer(
        function (...) onNextSpy(...) end,
        function (...) onErrorSpy(...) end,
        function () onCompletedSpy() end
    )
    observable.subscribe(observer)
    return onNextSpy, onErrorSpy, onCompletedSpy
end

local produce = function(state, args, level)
    local _ = rawget(state, OBSERVABLE_KEY)

    local onNext, onError, onComplete = observableSpy(_)
    local nextCalls = onNext.calls
    local received = {}
    local expected = {}

    for key, val in pairs(nextCalls) do
        table.insert(received, val.vals[1])
    end

    for i = 1, args['n'] do
        if (args[i]) then
            table.insert(expected, args[i])
        else
            table.insert(expected, NULL)
        end
    end

    local assertCalls = #received == #expected
    if (not assertCalls)then
        util.printTable(received, 'Received', truePrint)
        util.printTable(expected, 'Expected', truePrint)
    end
    assert(assertCalls, 'expected '..#expected..' calls, received '..#received..' calls')

    for key, val in pairs(received) do
        if (expected[key] == NULL) then
            assert.to.equal(expected[key], nil)
        elseif (type(expected[key]) == 'table') then
            local assertTables = util.areTablesEqual(expected[key], val)
            if (not assertTables)then
                util.printTable(val, 'Received', truePrint)
                util.printTable(expected[key], 'Expected', truePrint)
            end
            assert(assertTables, 'tables are not equal')
        else
            assert.to.equal(expected[key], val)
        end
    end

    assert.spy(onComplete).was.called(1)

    return true
end

--TODO
-- Allow arguments to check exact output
local printReset = function(state, args, level)
    local times = args[1]
    assert.spy(printSpy).was.called(times)
    printSpy:clear()
    return true
end

assert:register('modifier', 'expect', observable)
assert:register('modifier', 'to', util.identity)
assert:register('assertion', 'produce', produce)
assert:register('assertion', 'printed', printReset)

local expect = function(...) return assert.expect(...) end
local printed = function(...) return assert.printed(...) end

return function() return expect, printed end
