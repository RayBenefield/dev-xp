local util = require('util')

local isSubscriber = function(value)
    if type(value) == 'function' then
        return false
    end

    return value
        and type(value.next) == 'function'
        and type(value.err) == 'function'
        and type(value.complete) == 'function'
end

local create

create = function(subscribeFn)
    subscribeFn = subscribeFn or util.noop
    local subscriber = nil
    local observable = nil
    local closed = false
    local subscription = nil

    local createSafeSubscriber = function(observerOrNext, err, complete)
        local next = isSubscriber(observerOrNext) and observerOrNext.next or observerOrNext
        local err = isSubscriber(observerOrNext) and observerOrNext.err or err
        local complete = isSubscriber(observerOrNext) and observerOrNext.complete or complete

        return {
            next = function(...)
                if (closed) then
                    return
                end

                if(type(next) == 'function') then
                    next(...)
                end
            end,
            err = type(err) == 'function' and err or util.printError,
            complete = function()
                if (closed) then
                    return
                end

                closed = true

                if (type(complete) == 'function') then
                    complete()
                end

                if (type(subscription) == 'function') then
                    closed = true
                    subscription()
                end
            end,
        }
    end

    local subscribe = function(observerOrNext, err, complete)
        subscriber = createSafeSubscriber(observerOrNext, err, complete)

        subscription = subscribeFn(subscriber)
        return subscription or function() subscriber.complete() end
    end

    local pipe = function(...)
        local args = {...}
        local operators = util.onlyFunctions(args)
        local operatorCount = #operators

        if (operatorCount == 0) then
            return observable
        end

        if (operatorCount == 1) then
            local source = observable
            local operator = operators[1]
            return operator(source)
        end

        return util.reduce(operators, function(source, operator)
            return operator(source)
        end, observable)
    end

    observable = { subscribe = subscribe, pipe = pipe }

    return observable
end

return create
