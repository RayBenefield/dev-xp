local util = require('util')

local createSafeSubscriber = function(observerOrNext, err, complete)
    return {
        next = type(observerOrNext) == 'function' and observerOrNext or util.noop,
        err = type(err) == 'function' and err or util.printError,
        complete = type(complete) == 'function' and complete or util.noop,
    }
end

local isSubscriber = function(value)
    if type(value) == 'function' then
        return false
    end

    return value
        and type(value.next) == 'function'
        and type(value.error) == 'function'
        and type(value.complete) == 'function'
end

return function(subscribeFn)
    local subscriber
    local observable

    local subscribe = function(observerOrNext, err, complete)
        subscriber = isSubscriber(observerOrNext) and observerOrNext
            or createSafeSubscriber(observerOrNext, err, complete)

        local subscription = subscribeFn(subscriber)
        return function() end
    end

    local pipe = function(...)
        local args = {...}
        local operators = util.onlyFunctions(args)
        local operatorCount = #operators

        if (operatorCount == 0) then
            return observable
        end

        if (operatorCount == 1) then
            return operators[1](observable)
        end

        return util.reduce(operators, function(source, operator)
            return operator(source)
        end, observable)
    end

    observable = { subscribe = subscribe, pipe = pipe }

    return observable
end
