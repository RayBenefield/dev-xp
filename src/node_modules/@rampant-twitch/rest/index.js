import twitch from 'twitch'
import { classToPlain } from 'class-transformer'

const helixData = obj => classToPlain(obj)['_data']

export const createRestClient = ({ id, secret, update }) => creds => {
    const noop = () => {}
    const onRefresh = update || noop
    const client = twitch.withCredentials(
        id,
        creds['access_token'],
        creds['scope'],
        {
            clientSecret: secret,
            expiry: creds['expires'],
            onRefresh,
            refreshToken: creds['refresh_token'],
        }
    )
    client.credentials = creds

    return client.helix.users
        .getMe(true)
        .then(details => ({
            id: details.id,
            ...helixData(details),
        }))
        .then(user => {
            client.user = user
            return client
        })
}

export const createRestUpdatingClient = ({ id, secret, authRepo }) => userId =>
    createRestClient({
        id,
        secret,
        update: credentials =>
            authRepo.saveToken({
                userId,
                platform: 'twitch',
                credentials: helixData(credentials),
            }),
    })

export default ({ id, secret, authRepo }) => {
    const creator = createRestUpdatingClient({ id, secret, authRepo })
    const cache = {}

    return userId => {
        if (userId in cache) return Promise.resolve(cache[userId])

        return authRepo
            .getToken({ userId, platform: 'twitch' })
            .then(credentials => creator(userId)(credentials))
            .then(client => {
                cache[userId] = client
                return client
            })
    }
}
