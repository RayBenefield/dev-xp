import twitch from 'twitch'
import admin from 'firebase-admin'
import { classToPlain } from 'class-transformer'

export const createRestClient = ({ id, secret }) => creds => {
    const client = twitch.withCredentials(id, creds.access_token, creds.scope, {
        clientSecret: secret,
        expiry: creds.expires,
        onRefresh: creds.update,
        refreshToken: creds.refresh_token,
    })
    client.creds = creds

    return client.helix.users
        .getMe(true)
        .then(details => ({
            id: details.id,
            ...classToPlain(details)['_data'],
        }))
        .then(user => {
            client.user = user
            return client
        })
}

export default ({ id, secret, db }) => {
    const creator = createRestClient({ id, secret })
    const cache = {}

    return userId => {
        if (userId in cache) return Promise.resolve(cache[userId])

        const update = token =>
            db.update(`users/${userId}/auth/twitch`, {
                access_token: token.accessToken,
                refresh_token: token.refreshToken,
                expires: admin.firestore.Timestamp.fromDate(token.expiryDate),
                scope: token.scope,
            })

        return db
            .get(`users/${userId}/auth/twitch`)
            .then(creds =>
                creator({
                    ...creds,
                    expires: creds.expires.toDate(),
                    update,
                })
            )
            .then(client => {
                cache[userId] = client
                return client
            })
    }
}
