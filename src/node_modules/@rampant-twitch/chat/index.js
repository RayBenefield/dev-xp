import { Observable } from 'rxjs'
import twitch from 'twitch-chat-client'
import { tap, share } from 'rxjs/operators'
import { classToPlain } from 'class-transformer'
import createTwitchRest from '@rampant-twitch/rest'

export default ({ clientId, clientSecret, db }) => {
    const restCreator = createTwitchRest({ clientId, clientSecret, db })
    const cache = {}

    return async ({ channelId, userId }) => {
        if (channelId in cache && userId in cache[channelId])
            return cache[channelId][userId]

        const restClient = await restCreator(userId)
        const client = twitch.forTwitchClient(restClient, {
            channels: [channelId],
        })
        await client.connect()

        const chat = Observable.create(observer => {
            // eslint-disable-next-line max-params
            client.onPrivmsg((channel, user, text, message) =>
                observer.next({
                    channel,
                    user,
                    text,
                    details: classToPlain(message)['_tags'],
                    message,
                })
            )
        }).pipe(
            tap(({ channel, user, text, details }) =>
                db.push('twitch-chat-log', {
                    channel,
                    user,
                    text,
                    details,
                })
            ),
            share()
        )

        chat.message = msg => client.say(channelId, msg)

        chat.whisper = (username, msg) => client.whisper(username, msg)

        chat.erase = msgId => client.deleteMessage(channelId, msgId)

        chat.clear = () => client.clear(channelId)

        if (!(channelId in cache)) cache[channelId] = {}
        cache[channelId][userId] = chat

        return chat
    }
}
