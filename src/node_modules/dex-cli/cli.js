import argv from 'argv'
import promptSession from '@dexterity/prompt'
import createCommitter from '@dexterity/committer'
import createWorklogger from '@dexterity/worklog'
import createConfigHandler from '@dexterity/config'
import { prettify, createLogger } from '@dexterity/logger'

argv.version('0.0.23')
argv.info('Dex is a Pomodoro inspired worklog system.')

argv.option([
    {
        name: 'log',
        short: 'l',
        type: 'string',
        description:
            'Level of logging to print [error, warn, info, verbose, debug, silly]',
        example: '--log=level-name',
    },
])

const {
    options: { log: level = 'info' },
} = argv.run()
const logger = createLogger({ level })
const configuration = createConfigHandler({ logger })
const worklog = createWorklogger({ logger })
const committer = createCommitter({ logger })

logger.info('Dex CLI')

const config = configuration.get()
logger.info(`${config.session} sessions currently logged.`)

promptSession({ logger })
    .then(({ newSessions, entry }) => {
        const next = config.session + 1
        const last = next + newSessions - 1
        logger.debug(`Next Session: ${next}`)
        logger.debug(`Last Session: ${last}`)

        return { next, last, entry }
    })
    .then(session => {
        worklog.write(session)
        configuration.write(session)
        return {
            ...session,
            worklogPath: worklog.path(),
            configPath: configuration.path(),
        }
    })
    .then(session => committer.commit(session))
    .catch(err => {
        logger.error('Error loading config file')
        logger.error(prettify(err))
    })
