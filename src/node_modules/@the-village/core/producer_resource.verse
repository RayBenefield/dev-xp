
using. /Verse.org/Simulation

using. Numb
using. Tableau

producer_settings<public> := class<concrete>():
    @editable Tier:int = 0
    @editable CostResource:string = ""
    @editable ProduceResource:string = ""
    @editable BaseCost:float = 3.738
    @editable CostGrowth:float = 1.07
    @editable ProductionRate:float = 0.6
    @editable Production:float = 1.67
    @editable HireCost:num = num. Value := 1000.0

CreateProducerResource<public><constructor>(ID:string, P:producer_settings) := resource:
    ID := ID
    Type := "Producer"
    Props := map:
        "Cost Growth" => Float of P.CostGrowth
        "Base Cost" => Float of P.BaseCost
        "Production Rate" => Float of P.ProductionRate
        "Hire Cost" => Num of P.HireCost
        "Tier" => Integer of P.Tier
        "Working" => Bool of false
        "Count" => Num of 0.0
        "Workers" => Num of 0.0
        "Produced Count" => Num of 0.0
        "Start Produced Count" => Num of 0.0
        "Production" => Float of P.Production
        "Exists" => Bool of (Path("Can Afford"), "OR", Path("Has Some"))
        "Production Amount" => Num of (Path("Count"), "Multiply", Path("Production"))
        "Cost Rate" => Num of (Path("Cost Growth"), "Power", Path("Count"))
        "Cost" => Num of (Path("Cost Rate"), "Multiply", Path("Base Cost"))
        "Can Afford" => Bool of (Path(P.CostResource, "Count"), ">=", Path("Cost"))
        "Can Hire" => Bool of (Path(P.CostResource, "Count"), ">=", Path("Hire Cost"))
        "Has One" => Bool of (Path("Count"), "=", ONE())
        "Has Some" => Bool of (Path("Count"), ">=", ONE())
        "Has Workers" => Bool of (Path("Workers"), ">=", ONE())
        "No Workers" => Bool of (Path("Workers"), "=", ZERO())
        "Hireable" => Bool of (Path("No Workers"), "AND", Path("Can Hire"))
        "Can Work" => Bool of (Path("Has Some"), "AND", Path("No Workers"))
        "Not Working" => Bool of (Path("Working"), "NOT")
    Actions := map:
        "Buy" => Action of array:
            IsTrue("Can Afford")
            Decrease(P.CostResource, "Count").By("Cost")
            Increase("Count").By(ONE())
            IsTrue("Has Workers")
            Execute("Produce")
        "Produce" => Action of array:
            IsTrue("Has Some")
            IsFalse("Working")
            Set("Working").To(TRUE())
            Increase("Start Produced Count").By(ONE())
            DelayBy("Production Rate")
            Increase(P.ProduceResource, "Count").By("Production Amount")
            Increase("Produced Count").By(ONE())
            Set("Working").To(FALSE())
            IsTrue("Has Workers")
            Execute("Produce")
        "Hire" => Action of array:
            IsFalse("Has Workers")
            IsTrue("Can Hire")
            Decrease(P.CostResource, "Count").By("Hire Cost")
            Increase("Workers").By(ONE())
            IsTrue("Has Some")
            Execute("Produce")
