
using. /Fortnite.com/Devices
using. /Verse.org/Simulation

using. Numb
using. Tableau
using. TableauResource

producer_settings<public> := class<concrete>():
    @editable ID:string = ""
    @editable CostResource:string = ""
    @editable ProduceResource:string = ""
    @editable BaseCost:float = 3.738
    @editable CostGrowth:float = 1.07
    @editable ProductionRate:float = 0.6
    @editable Production:float = 1.67
    @editable HireCost:num = num. Value := 1000.0

CreateProducerResource<public><constructor>(P:producer_settings) := resource:
    ID := P.ID
    StatProps := stat_props:
        Strs := array:
            prop_str{ ID := "Name", Default := P.ID }
        Floats := array:
            prop_float{ ID := "Cost Growth", Default := P.CostGrowth }
            prop_float{ ID := "Base Cost", Default := P.BaseCost }
            prop_float{ ID := "Production Rate", Default := P.ProductionRate }
        Nums := array:
            prop_num{ ID := "Hire Cost", Default := P.HireCost }
    Props := props:
        Per := map:
            "Working" => prop_bool. Default := false
            "Count" => prop_num{}
            "Workers" => prop_num{}
            "Produced Count" => prop_num{}
            "Start Produced Count" => prop_num{}
            "Production" => prop_float. Default := P.Production
    CompProps := comp_props:
        Nums := array:
            comp_num:
                ID := "Production Amount"
                BaseProp := "Count"
                Computer := computer{ FN := "Multiply", Pay := Load(Path("Production")) }
            comp_num:
                ID := "Cost Rate"
                BaseProp := "Cost Growth"
                Computer := computer{ FN := "Power", Pay := Load(Path("Count")) }
            comp_num:
                ID := "Cost"
                BaseProp := "Cost Rate"
                Computer := computer{ FN := "Multiply", Pay := Load(Path("Base Cost")) }
        Bools := array:
            comp_bool:
                ID := "Can Afford"
                BaseResource := P.CostResource
                BaseProp := "Count"
                Computer := computer{ FN := ">=", Pay := Load(Path("Cost")) }
            comp_bool:
                ID := "Can Afford Hire"
                BaseResource := P.CostResource
                BaseProp := "Count"
                Computer := computer{ FN := ">=", Pay := Load(Path("Hire Cost")) }
            comp_bool:
                ID := "Has One"
                BaseResource := P.ID
                BaseProp := "Count"
                Computer := computer{ FN := "=", Pay := load. Float := 1.0 }
            comp_bool:
                ID := "Has Some"
                BaseResource := P.ID
                BaseProp := "Count"
                Computer := computer{ FN := ">=", Pay := load. Float := 1.0 }
            comp_bool:
                ID := "Has Workers"
                BaseResource := P.ID
                BaseProp := "Workers"
                Computer := computer{ FN := ">=", Pay := load. Float := 1.0 }
            comp_bool:
                ID := "No Workers"
                BaseResource := P.ID
                BaseProp := "Workers"
                Computer := computer{ FN := "=", Pay := load. Float := 0.0 }
            comp_bool:
                ID := "Hireable"
                BaseResource := P.ID
                BaseProp := "No Workers"
                Computer := computer{ FN := "AND", Pay := Load(Path("Can Afford Hire")) }
            comp_bool:
                ID := "Can Work"
                BaseResource := P.ID
                BaseProp := "Has Some"
                Computer := computer{ FN := "AND", Pay := Load(Path("No Workers")) }
            comp_bool:
                ID := "Not Working"
                BaseResource := P.ID
                BaseProp := "Working"
                Computer := computer{ FN := "NOT" }
    Abilities := map:
        "Buy" => array:
            effect{ FN := "Is True", Focus := Path("Can Afford") }
            effect{ FN := "Decrease", Focus := Path(P.CostResource, "Count"), Pay := Load(Path("Cost")) }
            effect{ FN := "Increase", Focus := Path("Count"), Pay := load. Float := 1.0 }
            effect{ FN := "Is True", Focus := Path("Has One") }
            effect{ FN := "Is True", Focus := Path("Has Workers") }
            effect{ FN := "Execute Ability", Focus := Path("Produce") }
        "Produce" => array:
            effect{ FN := "Is True", Focus := Path("Has Some") }
            effect{ FN := "Is False", Focus := Path("Working") }
            effect{ FN := "Make True", Focus := Path("Working") }
            effect{ FN := "Increase", Focus := Path("Start Produced Count"), Pay := load. Float := 1.0 }
            effect{ FN := "Delay", Focus := Path("Production Rate") }
            effect{ FN := "Increase", Focus := Path(P.ProduceResource, "Count"), Pay := Load(Path("Production Amount")) }
            effect{ FN := "Increase", Focus := Path("Produced Count"), Pay := load. Float := 1.0 }
            effect{ FN := "Make False", Focus := Path("Working") }
            effect{ FN := "Is True", Focus := Path("Has Workers") }
            effect{ FN := "Execute Ability", Focus := Path("Produce") }
        "Hire" => array:
            effect{ FN := "Is False", Focus := Path("Has Workers") }
            effect{ FN := "Is True", Focus := Path("Can Afford Hire") }
            effect{ FN := "Decrease", Focus := Path(P.CostResource, "Count"), Pay := Load(Path("Hire Cost")) }
            effect{ FN := "Increase", Focus := Path("Workers"), Pay := load. Float := 1.0 }
            effect{ FN := "Is True", Focus := Path("Has Some") }
            effect{ FN := "Execute Ability", Focus := Path("Produce") }

producer_config<public> := class(creative_device, config_device):
    @editable ProducerSettings<public>:[]producer_settings = array{}
    GetResources<override>():[]resource= for (P:ProducerSettings). CreateProducerResource(P)
