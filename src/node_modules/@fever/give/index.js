import { tap, map, mergeMap, filter, withLatestFrom } from 'rxjs/operators'
import createCommandStream from '@rampant-giveaway/commands'

export default ({ moderator, db, prefix, logger: baseLogger }) => {
    const logger = baseLogger.child({ plugin: '@fever/give' })
    const command$ = createCommandStream(moderator)
    const currentGiveaway$ = db.onDocumentChange('giveaways/current')

    command$
        .pipe(
            filter(
                ({ user_name, command }) =>
                    command === 'give' &&
                    user_name.toLowerCase() === 'raybenefield'
            ),
            withLatestFrom(currentGiveaway$),
            tap(
                ([, { giveaway }]) =>
                    giveaway &&
                    moderator.whisper(
                        'raybenefield',
                        `You are already running a [${giveaway}] giveaway.`
                    )
            ),
            filter(([, { giveaway }]) => !giveaway),
            tap(
                ([{ args }]) =>
                    args.length === 0 &&
                    moderator.whisper(
                        'raybenefield',
                        `You've given no arguments for a giveaway.`
                    )
            ),
            filter(([{ args }]) => args.length > 0),
            map(([{ args }]) => {
                let giveaway = null
                let entryPool = prefix
                const slots = 1

                if (args.length === 1) {
                    giveaway = args[0]
                }
                if (args.length === 2) {
                    giveaway = args[0]
                    entryPool = args[1]
                }
                return { giveaway, entryPool, slots }
            }),
            mergeMap(({ giveaway, entryPool, slots }) =>
                db
                    .get(`giveaways/${entryPool}/giveaways/${giveaway}`)
                    .then(
                        data =>
                            !data
                                ? db.set(
                                      `giveaways/${entryPool}/giveaways/${giveaway}`,
                                      { winners: 0, slots }
                                  )
                                : db.update(
                                      `giveaways/${entryPool}/giveaways/${giveaway}`,
                                      { slots: data.slots + slots }
                                  )
                    )
                    .then(() => ({ giveaway, entryPool, slots }))
            )
        )
        // eslint-disable-next-line complexity
        .subscribe(({ giveaway, entryPool, slots }) => {
            db.set('giveaways/current', { entryPool, giveaway })
            logger.extend(
                `Starting a giveaway with ${entryPool}-entries for ${giveaway} giveaway with ${slots} winner${
                    slots > 1 ? 's' : ''
                }`
            )
        })
}
