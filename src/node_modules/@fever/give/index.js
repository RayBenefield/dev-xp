import repoCreator from '@fever/giveaway-repo'
import { tap, map, mergeMap, filter, withLatestFrom } from 'rxjs/operators'

export default ({ moderator, db, prefix, logger: baseLogger }) => {
    const logger = baseLogger.child({ plugin: '@fever/give' })
    const currentGiveaway$ = db.onDocumentChange('giveaways/current')
    const createRepo = repoCreator({ db, logger })

    const checkCurrentGiveaway = ([, { giveaway }]) =>
        giveaway &&
        moderator.whisperStreamer(
            `You are already running a [${giveaway}] giveaway.`
        )

    const checkGiveawayArgs = ([{ args }]) =>
        args.length === 0 &&
        moderator.whisperStreamer(`You've given no arguments for a giveaway.`)

    const startOrUpdate = ({ repo, slots }) => data =>
        !data
            ? repo.startGiveaway(slots)
            : repo.updateGiveaway(data.slots + slots)

    const startGiveaway = ({ repo, slots }) =>
        repo
            .getGiveaway()
            .then(startOrUpdate({ repo, slots }))
            .then(() => repo.updateCurrentGiveaway())

    moderator
        .command$('give', { streamer: true })
        .pipe(
            withLatestFrom(currentGiveaway$),
            tap(checkCurrentGiveaway),
            filter(([, { giveaway }]) => !giveaway),
            tap(checkGiveawayArgs),
            filter(([{ args }]) => args.length > 0),
            map(([{ args }]) => {
                let giveaway = null
                let entryPool = prefix
                const slots = 1

                if (args.length === 1) giveaway = args[0]

                if (args.length === 2) {
                    giveaway = args[0]
                    entryPool = args[1]
                }
                return { giveaway, entryPool, slots }
            }),
            map(({ giveaway, entryPool, slots }) => ({
                repo: createRepo({ giveaway, entryPool }),
                slots,
            })),
            mergeMap(startGiveaway)
        )
        .subscribe()
}
