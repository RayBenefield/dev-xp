import pick from 'lodash.pick'
import omitBy from 'lodash.omitby'
import mapValues from 'lodash.mapvalues'
import repoCreator from '@rampant-giveaway/repo'
import { tap, filter, map, mergeMap } from 'rxjs/operators'
import chooseWinners from '@rampant-giveaway/choose-winners'

export default ({ moderator, db, logger }) => {
    const createRepo = repoCreator({ db, logger })

    moderator
        .command$('pick', { streamer: true })
        .pipe(
            moderator.currentGiveaway(),
            map(([, { entryPool, giveaway, entrants = [] }]) => ({
                entrants,
                repo: createRepo({ entryPool, giveaway }),
            })),
            mergeMap(({ repo, entrants }) =>
                Promise.all([
                    repo.getEntrantEntries(entrants),
                    repo.getGiveawayWinners(),
                    Promise.resolve(repo),
                ])
            ),
            map(([allEntries, winners, repo]) => {
                const noWinners = omitBy(allEntries, (_, id) => id in winners)
                const makeEntries = (entry, id) => ({
                    id,
                    ...pick(entry, ['name', 'entries']),
                })
                return { repo, entrants: mapValues(noWinners, makeEntries) }
            }),
            filter(({ entrants }) => Object.values(entrants).length > 0),
            mergeMap(({ entrants, repo }) =>
                repo
                    .stashGiveawayEntries(entrants)
                    .then(pool => ({ entrants, pool, repo }))
            ),
            map(({ entrants, pool, repo }) => {
                const winners = chooseWinners(entrants)
                winners.forEach(({ name }) => {
                    moderator.message(`@${name} has won the giveaway`)
                    logger.extend(`${name} has won the giveaway`)
                })
                return { repo, winners: winners.map(win => ({ ...win, pool })) }
            }),
            tap(({ winners, repo }) => repo.addWinnersToGiveaway(winners)),
            tap(({ repo }) => repo.clearCurrentGiveaway())
        )
        .subscribe()
}
