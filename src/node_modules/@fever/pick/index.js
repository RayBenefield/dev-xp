import pick from 'lodash.pick'
import omitBy from 'lodash.omitby'
import mapValues from 'lodash.mapvalues'
import { tap, filter, map, mergeMap } from 'rxjs/operators'
import chooseWinners from '@rampant-giveaway/choose-winners'
import diminishingReturns from '@dev-xp/diminishing-returns'

const RETURNS_SCALE = 3

export default ({ moderator, logger, giveawayRepo }) =>
    moderator.command$('pick', { streamer: true }).pipe(
        moderator.currentGiveaway(),
        map(([, { entryPool, giveaway, entrants = [] }]) => ({
            entrants,
            giveaway: giveawayRepo.with({ entryPool, giveaway }),
        })),
        mergeMap(({ giveaway, entrants }) =>
            Promise.all([
                giveaway.getEntrantEntries(entrants),
                giveaway.getGiveawayWinners(),
                Promise.resolve(giveaway),
            ])
        ),
        map(([allEntries, winners, giveaway]) => {
            const noWinners = omitBy(allEntries, (_, id) => id in winners)
            const makeEntries = (entry, id) => ({
                id,
                ...pick(entry, ['name', 'entries']),
                weight: entry.entries
                    ? diminishingReturns(entry.entries, RETURNS_SCALE)
                    : 1,
            })
            return { giveaway, entrants: mapValues(noWinners, makeEntries) }
        }),
        filter(({ entrants }) => Object.values(entrants).length > 0),
        mergeMap(({ entrants, giveaway }) =>
            giveaway
                .stashGiveawayEntries(entrants)
                .then(pool => ({ entrants, pool, giveaway }))
        ),
        map(({ entrants, pool, giveaway }) => {
            const winners = chooseWinners(entrants)
            winners.forEach(({ name }) => {
                moderator.message(`@${name} has won the giveaway`)
                logger.extend(`${name} has won the giveaway`)
            })
            return { giveaway, winners: winners.map(win => ({ ...win, pool })) }
        }),
        tap(({ winners, giveaway }) => giveaway.addWinnersToGiveaway(winners)),
        tap(({ giveaway }) => giveaway.clearCurrentGiveaway())
    )
