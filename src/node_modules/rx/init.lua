local ludash = require ('ludash')

local observable = require('rx.observable')
local observer = require('rx.observer')
local operate = require('rx.operator')

local of = require('rx.observable.of')
local from = require('rx.observable.from')
local empty = require('rx.observable.empty')
local merge = require('rx.observable.merge')
local range = require('rx.observable.range')
local sequence = require('rx.observable.sequence')

local log = require('rx.operator.log')
local map = require('rx.operator.map')
local take = require('rx.operator.take')
local tap = require('rx.operator.tap')
local filter = require('rx.operator.filter')
local buffer = require('rx.operator.buffer')
local distinct = require('rx.operator.distinct')
local mergeMap = require('rx.operator.mergeMap')

local rx = {
    observable = observable,
    observer = observer,
    operate = operate,

    of = of,
    from = from,
    empty = empty,
    EMPTY = empty(),
    range = range,
    merge = merge,
    sequence = sequence,
}

local operators = {
    log = log,
    map = map,
    filter = filter,
    take = take,
    tap = tap,
    buffer = buffer,
    distinct = distinct,
    mergeMap = mergeMap,
}

return function(...)
    local extensions = {...}

    for _, ext in pairs(extensions) do
        local main, ops, other = ext()
        main = main or {}
        ops = ops or {}
        other = other or {}

        for key, val in pairs(main) do
            rx[key] = val
        end
    end

    return rx, operators, ludash
end
