import fs from 'fs';
import sha from 'sha.js';
import slugify from 'slugify';
import unmkdirp from 'mkdirp';
import callsite from 'callsite';
import { promisify } from 'util';
import sortBy from 'lodash.sortby';
import serialize from 'pretty-format';
import transmute from 'transmutation';
import { resolve, dirname } from 'path';
import { white, green, grey } from 'chalk';

const mkdirp = promisify(unmkdirp);
const writeFile = promisify(fs.writeFile);

const runTest = subject =>
    transmute()
        .extend('result', ({ input }) => Promise.resolve(subject(...input)))
        .extend('snapshot', ({ result }) => serialize(result));

const collectTests = examples => {
    const tests = [];
    const it = (test, setup) => {
        let inputs = [];
        const given = args => {
            inputs = [...inputs, ...args];
        };
        setup(given);
        inputs.forEach((input, index) =>
            tests.push({
                id: sha('sha256')
                    .update(serialize(input))
                    .digest('hex'),
                test,
                index,
                input,
            }),
        );
    };
    examples(it);
    return tests;
};

export const run = (suite, subject, examples) => {
    const tests = collectTests(examples);
    return transmute({ suite }).extend(
        'results',
        Promise.all(tests.map(runTest(subject))),
    );
};

const generateFileContents = ({ results }) =>
    sortBy(results, 'test', 'id').reduce(
        (all, { id, test, snapshot }) => `${all}

exports[\`${test} ${id}\`] = \`
${snapshot}
\`;`,
        '// Kape Snapshot v1',
    );

const ensureSnapshotsDirectoryExists = ({ snapshotDir }) => mkdirp(snapshotDir);

const saveSnapshotFile = ({ suiteFile, fileContents }) =>
    writeFile(suiteFile, fileContents);

const getSnapshotDir = ({ testFile }) =>
    resolve(dirname(testFile), '__snapshots__');

const getSuiteFile = ({ snapshotDir, suite }) =>
    resolve(snapshotDir, `${slugify(suite, { lower: true })}.js.snap`);

const printPass = ({ test, index }) =>
    `    ${green('âœ”')} ${grey(test)} ${white('#')}${white(index)}`;

const withResultPrinter = results =>
    console.log(results.map(printPass).join('\n'));

export default (...args) =>
    run(...args)
        .extend('testFile', callsite()[1].getFileName())
        .extend('snapshotDir', getSnapshotDir)
        .extend('suiteFile', getSuiteFile)
        .extend('previousSnapshots')
        .log('Tests from: ', 'testFile')
        .log('results', withResultPrinter)
        .extend('fileContents', generateFileContents)
        .do(ensureSnapshotsDirectoryExists)
        .then(saveSnapshotFile);
