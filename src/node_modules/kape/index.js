import fs from 'fs';
import slugify from 'slugify';
import unmkdirp from 'mkdirp';
import callsite from 'callsite';
import { promisify } from 'util';
import serialize from 'pretty-format';
import transmute from 'transmutation';
import { resolve, dirname } from 'path';

const mkdirp = promisify(unmkdirp);
const writeFile = promisify(fs.writeFile);

const runTest = subject =>
    transmute()
        .extend('result', ({ input }) => Promise.resolve(subject(...input)))
        .extend('snapshot', ({ result }) => serialize(result));

const collectTests = examples => {
    const tests = [];
    const it = (test, setup) => {
        let inputs = [];
        const given = args => {
            inputs = [...inputs, ...args];
        };
        setup(given);
        inputs.forEach((input, index) =>
            tests.push({
                test,
                index,
                input,
            }),
        );
    };
    examples(it);
    return tests;
};

export const run = (suite, subject, examples) => {
    const tests = collectTests(examples);
    return transmute({ suite }).extend(
        'results',
        Promise.all(tests.map(runTest(subject))),
    );
};

const generateFileContents = ({ results }) =>
    results.reduce(
        (all, { test, index, snapshot }) => `
${all}
exports[\`${test} ${index}\`] = \`
${snapshot}
\`;
`,
        '',
    );

const ensureSnapshotsDirectoryExists = ({ testFile }) =>
    mkdirp(resolve(dirname(testFile), '__snapshots__'));

const saveSnapshotFile = ({ testFile, suite, fileContents }) =>
    writeFile(
        resolve(
            dirname(testFile),
            '__snapshots__',
            `${slugify(suite, { lower: true })}.js.snap`,
        ),
        fileContents,
    );

export default (...args) =>
    run(...args)
        .extend('testFile', callsite()[1].getFileName())
        .log('Tests from: ', 'testFile')
        .log('results')
        .extend('fileContents', generateFileContents)
        .do(ensureSnapshotsDirectoryExists)
        .then(saveSnapshotFile);
