import fs from 'fs';
import slugify from 'slugify';
import unmkdirp from 'mkdirp';
import kapeRun from '@kape/run';
import callsite from 'callsite';
import { promisify } from 'util';
import sortBy from 'lodash.sortby';
import { resolve, dirname } from 'path';
import { red, white, green, grey } from 'chalk';

const mkdirp = promisify(unmkdirp);
const writeFile = promisify(fs.writeFile);
const readFile = promisify(fs.readFile);

export const run = kapeRun;

const generateFileContents = ({ results }) =>
    sortBy(results, 'test', 'id').reduce(
        (all, { id, test, snapshot }) => `${all}

exports[\`${test} ${id}\`] = \`
${snapshot}
\`;`,
        '// Kape Snapshot v1',
    );

const ensureSnapshotsDirectoryExists = ({ snapshotDir }) => mkdirp(snapshotDir);

const saveSnapshotFile = ({ suiteFile, fileContents }) =>
    writeFile(suiteFile, fileContents);

const getSnapshotDir = ({ testFile }) =>
    resolve(dirname(testFile), '__snapshots__');

const getSuiteFile = ({ snapshotDir, suite }) =>
    resolve(snapshotDir, `${slugify(suite, { lower: true })}.js.snap`);

const printPass = ({ test, index }) =>
    `    ${green('✔')} ${grey(test)} ${white('#')}${white(index)}`;

const printFail = ({ test, index }) =>
    `    ${red.bold('✖')} ${red(test)} ${red.bold('#')}${red.bold(index)}`;

const withResultPrinter = results =>
    console.log(
        results
            .map(
                result =>
                    result.result ? printPass(result) : printFail(result),
            )
            .join('\n'),
    );

const getPreviousSnapshots = ({ suiteFile }) =>
    readFile(suiteFile, 'utf8').then(contents => {
        // eslint-disable-next-line no-new-func
        const generate = new Function('exports', contents);
        const snapshots = {};
        generate(snapshots);
        return snapshots;
    });

const testSnapshots = ({ previousSnapshots, results }) =>
    results.map(result => ({
        ...result,
        result:
            result.snapshot.trim() ===
            previousSnapshots[`${result.test} ${result.id}`].trim(),
    }));

export default (...args) =>
    run(...args)
        .extend('testFile', callsite()[1].getFileName())
        .extend('snapshotDir', getSnapshotDir)
        .extend('suiteFile', getSuiteFile)
        .extend('previousSnapshots', getPreviousSnapshots)
        .extend('testedResults', testSnapshots)
        .log('Tests from: ', 'testFile')
        .log('testedResults', withResultPrinter)
        .extend('fileContents', generateFileContents)
        .do(ensureSnapshotsDirectoryExists)
        .then(saveSnapshotFile);
