import fs from 'fs';
import slugify from 'slugify';
import kapeRun from '@kape/run';
import callsite from 'callsite';
import { promisify } from 'util';
import 'loud-rejection/register';
import { resolve, dirname } from 'path';
import updateSnapshots from '@kape/update-snapshots';
import { red, white, green, grey } from 'chalk';

const readFile = promisify(fs.readFile);

export const run = kapeRun;

const getSnapshotDir = ({ testFile }) =>
    resolve(dirname(testFile), '__snapshots__');

const getSuiteFile = ({ snapshotDir, suite }) =>
    resolve(snapshotDir, `${slugify(suite, { lower: true })}.js.snap`);

const printPass = ({ test, index }) =>
    `    ${green('✔')} ${grey(test)} ${white('#')}${white(index)}`;

const printAdd = ({ test, index }) =>
    `    ${green('+')} ${green(test)} ${green.bold('#')}${green.bold(index)}`;

const printFail = ({ test, index }) =>
    `    ${red('✖')} ${red(test)} ${red.bold('#')}${red.bold(index)}`;

const withResultPrinter = results =>
    console.log(
        results
            .map(result => {
                if (result.snapshotMatched) return printPass(result);
                if (!result.previousSnapshot) return printAdd(result);
                return printFail(result);
            })
            .join('\n'),
    );

const getPreviousSnapshots = ({ suiteFile }) =>
    readFile(suiteFile, 'utf8').then(contents => {
        // eslint-disable-next-line no-new-func
        const generate = new Function('exports', contents);
        const snapshots = {};
        generate(snapshots);
        return snapshots;
    });

const testSnapshots = ({ previousSnapshots, results }) =>
    results.map(result => ({
        ...result,
        previousSnapshot:
            previousSnapshots[`${result.test} ${result.id}`] || null,
        snapshotMatched: previousSnapshots[`${result.test} ${result.id}`]
            ? result.snapshot.trim() ===
              previousSnapshots[`${result.test} ${result.id}`].trim()
            : false,
    }));

export default (...args) =>
    run(...args)
        .extend('testFile', callsite()[1].getFileName())
        .extend('snapshotDir', getSnapshotDir)
        .extend('suiteFile', getSuiteFile)
        .extend('previousSnapshots', getPreviousSnapshots)
        .extend('testedResults', testSnapshots)
        .log('Tests from: ', 'testFile')
        .log('testedResults', withResultPrinter)
        .then(updateSnapshots);
