import * as _ from '@dev-xp/utils'
import { Input, Output } from 'rete'
import sockets, { isArraySocket } from '@runic/sockets'

const createIO = (obj, io) =>
    _.map(
        socket => name => ({
            name: socket.name,
            type: io,
            create: (altar, key) =>
                _.constructN(4, obj)(
                    key.toString(),
                    name.toString(),
                    socket,
                    isArraySocket(socket) || _.equals('output', io)
                ),
        }),
        sockets
    )

export const input = createIO(Input, 'input')
export const output = createIO(Output, 'output')

const getBaseType = _.cond([
    [_.pipe(_.toList, _.all(_.isNumber)), _.always('number')],
    [_.pipe(_.toList, _.all(_.isFunction)), _.always('function')],
    [_.pipe(_.toList, _.all(_.isBoolean)), _.always('boolean')],
    [_.T, _.always('any')],
])

export const getType = _.cond([
    [_.isArray, _.pipe(getBaseType, _.prefix('array-'))],
    [_.T, getBaseType],
])

export const createOutput = (value, name = '') => output[getType(value)](name)
export const createInput = (value, name = '') => input[getType(value)](name)
