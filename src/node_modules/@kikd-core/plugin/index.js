import { resolve } from 'path'

import map from 'lodash.map'
import { copy } from '@dev-xp/fs'
import winRoot from '@dev-xp/win-root'
import manifest from '@kikd-core/manifest'
import resolveName from '@dev-xp/resolve-name'
import getStructures from '@kikd/package-structure'

const type = 'core-game'

export const corespecJson = (root, srcDir, files) =>
    files.includes('corespec.json')
        ? // eslint-disable-next-line global-require, import/no-dynamic-require
          require(resolve(root, srcDir, 'corespec.json'))
        : false

export const filter = ({ root = '.', srcDir = '.', files = [] }) => {
    const manifestData = corespecJson(root, srcDir, files)
    return manifestData
}

const docs = 'Dropbox/My PC (Ray-PC)/Documents'
const coreDir = 'My Games/CORE/Saved/Maps'
const scriptsDir = 'Data/Scripts'

const convertToPost = post => ({ type: 'lua-rock', post })

export default {
    type,
    manifest,
    config: ({
        manifest: { name: folder, dependencies: packageNames },
        structure: { name, root, srcDir },
    }) => {
        const win = winRoot('RayBenefield')
        const destDir = resolve(win, docs, coreDir, folder, scriptsDir)
        const post = { root, name, dependencies: packageNames, srcDir, destDir }
        return [
            ...map(getStructures({ root, packageNames }), convertToPost),
            { type, post },
        ]
    },
    filter,
    build: () => {},
    postBuild: ({ config: { dependencies, root, destDir } }) =>
        Promise.all(
            dependencies.map(pkg =>
                copy(
                    resolve(root, 'dist', pkg, `${resolveName(pkg)}.lua`),
                    resolve(destDir, `${resolveName(pkg)}.lua`)
                )
            )
        ),
}
