
using. /Verse.org/Assets
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /UnrealEngine.com/Temporary/SpatialMath

using. TheDoctorAssets.Materials
using. Tableau
using. Vertex

CreateHeroSlot<constructor>(SlotNumber:int, Location:vector3) := resource:
    ID := "Hero Slot{SlotNumber}"
    Props := map:
        "Slot Number" => Integer of SlotNumber
        "Location" => Vec3 of Location

CreateHeroCardResource<constructor>(CardNumber:int) := resource:
    ID := "Hero Card{CardNumber}"
    Type := "Hero Card"
    Props := map:
        "My ID" => Str of "Hero Card{CardNumber}"
        "Slot Label" => Str of "Hero Slot"
        "Slot ID" => Str of (Path("Slot Label"), "Append", Path("Slot Number"))
        "Slot Number" => Integer of (Path("Targets", "Active Cards"), "Find", Path("My ID"))
        "Card Number" => Integer of CardNumber
        "Location" => Vec3 of Path(Path("Slot ID"), "Location")
        "Current Hero ID" => Str of ""
        "Active" => Bool of (Path(Path("Current Hero ID"), "Need Healing"))
        "Hero Type" => Str of (Path(Path("Current Hero ID"), "Hero Type"))
        "Health Ratio" => Float of Path(Path("Current Hero ID"), "Health Ratio")
    Actions := map:
        "Get Next Hero" => Action of array:
            Set("Current Hero ID").To("Heroes", "Next Hero ID")
            Set(Path("Current Hero ID"), "Assigned Card ID").To("My ID")
            Set(Path("Current Hero ID"), "Assigned Card Number").To("Card Number")

hero_slot_device<public> := class(tableau_device):
    @editable ResourceID<override>:string = "Hero Card"
    @editable SideEffectSettings<override>:side_effect_settings = side_effect_settings. PerResource := true

    @editable Avatar:creative_prop_asset = DefaultCreativePropAsset
    @editable AvatarBackground:creative_prop_asset = DefaultCreativePropAsset
    @editable AvatarFrame:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthBar:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthBackground:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthFrame:creative_prop_asset = DefaultCreativePropAsset

    GetResources<override>():[]resource=
        GridSize := 112.0
        Offset := GetTransform().Translation
        EmptySlot := array. CreateHeroSlot(0, Offset + V3(0.0, GridSize * 0.5, GridSize * -5))
        Slots := for (X := 1..2, Y := 1..4, SlotNumber := ((Y-1) * 2) + X):
            CreateHeroSlot(SlotNumber, Offset + V3(0.0, (X-1) * GridSize, (Y-1) * -GridSize))
        Cards := for (X := 1..2, Y := 1..4, CardNumber := ((Y-1) * 2) + X):
            CreateHeroCardResource(CardNumber)
        Concatenate(array{ EmptySlot, Slots, Cards })

    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Mat := MI_HeroAvatar_material{}

        AvatarProp := Spawn(Avatar, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0), option. material[Mat])
        AvatarFrameProp := Spawn(AvatarFrame, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        AvatarBackgroundProp := Spawn(AvatarBackground, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        HealthBarProp := Spawn(HealthBar, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        HealthBackgroundProp := Spawn(HealthBackground, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        HealthFrameProp := Spawn(HealthFrame, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))

        array:
            PushStr("Hero Type", SetTexture(AvatarSetter(Mat).FN, HeroTypes, DefaultTexture).FN)
            PushFloat("Health Ratio", Offsetter(0.06).FN, SetScaleY(HealthBarProp).FN)
            PushVec3("Location", Wait(0.2).FN, Move(AvatarProp, 0.5, V3X(-0.3)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(AvatarFrameProp, 0.5, V3X(-0.2)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(AvatarBackgroundProp, 0.5, V3X(-0.1)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(HealthBarProp, 0.5, V3(-0.5, -48.0, -48.0)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(HealthBackgroundProp, 0.5, V3(-0.4, -48.0, -48.0)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(HealthFrameProp, 0.5, V3(-0.6, 0.0, -48.0)).FN)
            PushBool("Active", Toggle(AvatarProp).FN)
            PushBool("Active", Toggle(AvatarFrameProp).FN)
            PushBool("Active", Toggle(AvatarBackgroundProp).FN)
            PushBool("Active", Toggle(HealthBarProp).FN)
            PushBool("Active", Toggle(HealthBackgroundProp).FN)
            PushBool("Active", Toggle(HealthFrameProp).FN)
