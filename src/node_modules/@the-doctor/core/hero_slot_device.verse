
using. /Verse.org/Assets
using. /Verse.org/Random
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. TheDoctor.Materials
using. FantasyWarriorHUD.HUD
using. Anima
using. Tableau
using. TableauDevice
using. TableauEffect
using. TableauResource
using. Vertex

place_hero_fn := class():
    Prop:creative_prop_asset
    Offset:vector3
    Mat:?MI_HeroAvatar_material = false
    var SpawnedProp:?creative_prop = false
    FN<public>(Position:vector3)<suspends>:void=
        Rotation := MakeRotationFromYawPitchRollDegrees(0.0, 90.0, 0.0)
        MaybeProp := SpawnProp(Prop, Offset + Position, Rotation)(0)
        set SpawnedProp = MaybeProp
        if (P := MaybeProp?, Anim := P.GetAnimationController[]):
            if (M := Mat?). P.SetMaterial(M)
    GetProp<public>()<transacts>:?creative_prop= SpawnedProp

change_hero_texture_fn<public> := class():
    Mat<public>:MI_HeroAvatar_material
    TexMap<public>:[string]texture
    Default<public>:texture
    FN<public>(Key:string):void= set Mat.AvatarTexture = TexMap[Key] or Default

update_health_fn<public> := class():
    Prop<public>:type{_()<transacts>:?creative_prop}
    Offset<public>:float = 0.0
    FN<public>(Value:float)<suspends>:void=
        if (P := Prop()?, A := P.GetAnimationController[]):
            Scaled := Frame(ScaleYTo(Value + Offset)).SetTime(0.0)
            A.SetAnimation(array. Scaled.Delta(P.GetTransform()), ?Mode:=animation_mode.OneShot)
            A.Play()

CreateHeroSlotResource<constructor>(X:int, Y:int, Offset:vector3, SlotNumber:int) := resource:
    ID := "Hero Slot{X},{Y}"
    Type := "Hero Slot"
    Props := map:
        "Slot Number" => prop_int. Default := SlotNumber
        "Location" => prop_vec3. Default := Offset + vector3{ X := 0.0, Y := (X-1) * 112.0, Z := (Y-1) * -112.0 }

CreateHeroCardResource<constructor>(X:int, Y:int, CardNumber:int) := resource:
    ID := "Hero Card{CardNumber}"
    Type := "Hero Card"
    Props := map:
        "Slot ID" => prop_str. Default := "Hero Slot{X},{Y}"
        "Card Number" => prop_int. Default := CardNumber
        "Location" => prop_vec3. Focus := Path(Path("Slot ID"), "Location")
        "Current Hero ID" => prop_str{ Focus := Path("Heroes", "Heroes"), FN := "Get", Tweak := Path("Card Number") }
        "Hero Type" => prop_str{ Focus := Path(Path("Current Hero ID"), "Hero Type") }
        "Show" => prop_bool{ Focus := Path("Hero Type"), FN := "Not Empty" }
        "Health Ratio" => prop_float. Focus := Path(Path("Current Hero ID"), "Health Ratio")

hero_slot_device<public> := class(creative_device, config_device, side_effect_device):
    @editable TypeID:string = "Hero Card"
    @editable AvatarProp:creative_prop_asset = DefaultCreativePropAsset
    @editable BackgroundProp:creative_prop_asset = DefaultCreativePropAsset
    @editable FrameProp:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthBarProp:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthBackgroundProp:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthFrameProp:creative_prop_asset = DefaultCreativePropAsset
    DefaultTexture:texture = SPR_HUD_FantasyWarrior_Icon_Tooltip01

    @editable AltAction:input_trigger_device = input_trigger_device{}

    GetResources<override>():[]resource=
        Offset := GetTransform().Translation
        Slots := for (X := 1..2, Y := 1..4, SlotNumber := ((Y-1) * 2) + X):
            CreateHeroSlotResource(X, Y, Offset, SlotNumber)
        Cards := for (X := 1..2, Y := 1..4, CardNumber := ((Y-1) * 2) + X):
            CreateHeroCardResource(X, Y, CardNumber)
        Concatenate(array{ Slots, Cards })

    GetResourceID<override>()<computes>:?string= false
    GetPerType<override>()<computes>:?string= option. TypeID
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Mat := MI_HeroAvatar_material {}

        PlaceAvatar := place_hero_fn{ Prop := AvatarProp, Mat := option. Mat, Offset := vector3{ X := -0.3, Y := 0.0, Z := 0.0 }  }
        PlaceFrame := place_hero_fn{ Prop := FrameProp, Offset := vector3{ X := -0.2, Y := 0.0, Z := 0.0 } }
        PlaceBackground := place_hero_fn{ Prop := BackgroundProp, Offset := vector3{ X := -0.1, Y := 0.0, Z := 0.0 } }
        PlaceHealthBar := place_hero_fn{ Prop := HealthBarProp, Offset := vector3{ X := -0.5, Y := -48.0, Z := -48.0 } }
        PlaceHealthBackground := place_hero_fn{ Prop := HealthBackgroundProp, Offset := vector3{ X := -0.4, Y := -48.0, Z := -48.0 } }
        PlaceHealthFrame := place_hero_fn{ Prop := HealthFrameProp, Offset := vector3{ X := -0.6, Y := 0.0, Z := -48.0 } }

        ChangeHero := change_hero_texture_fn{ Mat := Mat, TexMap := HeroTypes, Default := DefaultTexture }

        Visible := array. Frame(ScaleZTo(2.0)).SetTime(1.0)
        Invisible := array. Frame(ScaleZTo(1.0)).SetTime(1.0)
        HealthVisible := array. Frame(ScaleZTo(2.0)).SetTime(0.25)
        HealthInvisible := array. Frame(ScaleZTo(1.0)).SetTime(1.0)

        UpdateHealth := update_health_fn{ Prop := PlaceHealthBar.GetProp, Offset := 0.06 }

        array:
            PushSusVec3("Location", PlaceAvatar.FN)
            PushSusVec3("Location", PlaceFrame.FN)
            PushSusVec3("Location", PlaceBackground.FN)
            PushSusVec3("Location", PlaceHealthBar.FN)
            PushSusVec3("Location", PlaceHealthBackground.FN)
            PushSusVec3("Location", PlaceHealthFrame.FN)
            PushStr("Hero Type", ChangeHero.FN)
            toggle_anim{ PropertyID := "Show", Prop := PlaceAvatar.GetProp, True := Visible, False := Invisible }
            toggle_anim{ PropertyID := "Show", Prop := PlaceFrame.GetProp, True := Visible, False := Invisible }
            toggle_anim{ PropertyID := "Show", Prop := PlaceBackground.GetProp, True := Visible, False := Invisible }
            toggle_anim{ PropertyID := "Show", Prop := PlaceHealthBar.GetProp, True := HealthVisible, False := HealthInvisible }
            toggle_anim{ PropertyID := "Show", Prop := PlaceHealthBackground.GetProp, True := HealthVisible, False := HealthInvisible }
            toggle_anim{ PropertyID := "Show", Prop := PlaceHealthFrame.GetProp, True := HealthVisible, False := HealthInvisible }
            PushSusFloat("Health Ratio", UpdateHealth.FN)
            # Debug("Location", "{State.Source} Location")
            # Debug("Hero Type", "{State.Source} Hero Type")
            # Debug("Health Ratio", "{State.Source} Health Ratio")
            # Debug("Current Hero ID", "{State.Source} Hero ID")
