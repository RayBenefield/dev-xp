
using. /Verse.org/Assets
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /UnrealEngine.com/Temporary/SpatialMath

using. TheDoctorAssets.Materials
using. Tableau
using. Vertex

CreateHeroSlot<constructor>(SlotNumber:int, Location:vector3) := resource:
    ID := "Hero Slot{SlotNumber}"
    Props := map:
        "Slot Number" => prop_int. Default := SlotNumber
        "Location" => prop_vec3. Default := Location

CreateHeroCardResource<constructor>(CardNumber:int) := resource:
    ID := "Hero Card{CardNumber}"
    Type := "Hero Card"
    Props := map:
        "My ID" => prop_str. Default := "Hero Card{CardNumber}"
        "Slot Label" => prop_str. Default := "Hero Slot"
        "Slot ID" => prop_str{ Focus := Path("Slot Label"), FN := "Append", Tweak := Path("Slot Number") }
        "Slot Number" => prop_int{ Focus := Path("Targets", "Active Cards"), FN := "Find", Tweak := Path("My ID") }
        "Card Number" => prop_int. Default := CardNumber
        "Location" => prop_vec3. Focus := Path(Path("Slot ID"), "Location")
        "Current Hero ID" => prop_str{}
        "Hero Type" => prop_str{ Focus := Path(Path("Current Hero ID"), "Hero Type") }
        "Show" => prop_bool{ Focus := Path("Slot Number"), FN := "Int >", Tweak := ZERO() }
        "Health Ratio" => prop_float. Focus := Path(Path("Current Hero ID"), "Health Ratio")
    Abilities := map:
        "Get Next Hero" => ability. Effects := array:
            Set("Current Hero ID").To("Heroes", "Next Hero ID")
            Set(Path("Current Hero ID"), "Assigned Card ID").To("My ID")
            Set(Path("Current Hero ID"), "Assigned Card Number").To("Card Number")

hero_slot_device<public> := class(creative_device, config_device, side_effect_device):
    @editable TypeID:string = "Hero Card"
    @editable Avatar:creative_prop_asset = DefaultCreativePropAsset
    @editable AvatarBackground:creative_prop_asset = DefaultCreativePropAsset
    @editable AvatarFrame:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthBar:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthBackground:creative_prop_asset = DefaultCreativePropAsset
    @editable HealthFrame:creative_prop_asset = DefaultCreativePropAsset

    GetResources<override>():[]resource=
        GridSize := 112.0
        Offset := GetTransform().Translation
        EmptySlot := array. CreateHeroSlot(0, Offset + V3(0.0, GridSize * 0.5, GridSize * -5))
        Slots := for (X := 1..2, Y := 1..4, SlotNumber := ((Y-1) * 2) + X):
            CreateHeroSlot(SlotNumber, Offset + V3(0.0, (X-1) * GridSize, (Y-1) * -GridSize))
        Cards := for (X := 1..2, Y := 1..4, CardNumber := ((Y-1) * 2) + X):
            CreateHeroCardResource(CardNumber)
        Concatenate(array{ EmptySlot, Slots, Cards })

    GetResourceID<override>()<computes>:?string= false
    GetPerType<override>()<computes>:?string= option. TypeID
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Mat := MI_HeroAvatar_material{}

        AvatarProp := Spawn(Avatar, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0), option. material[Mat])
        AvatarFrameProp := Spawn(AvatarFrame, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        AvatarBackgroundProp := Spawn(AvatarBackground, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        HealthBarProp := Spawn(HealthBar, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        HealthBackgroundProp := Spawn(HealthBackground, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))
        HealthFrameProp := Spawn(HealthFrame, V3(), R3Pitch(90.0), V3(1.0, 1.0, 2.0))

        array:
            PushStr("Hero Type", SetTexture(AvatarSetter(Mat).FN, HeroTypes, DefaultTexture).FN)
            PushFloat("Health Ratio", Offsetter(0.06).FN, SetScaleY(HealthBarProp).FN)
            PushVec3("Location", Wait(0.2).FN, Move(AvatarProp, 0.5, V3X(-0.3)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(AvatarFrameProp, 0.5, V3X(-0.2)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(AvatarBackgroundProp, 0.5, V3X(-0.1)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(HealthBarProp, 0.5, V3(-0.5, -48.0, -48.0)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(HealthBackgroundProp, 0.5, V3(-0.4, -48.0, -48.0)).FN)
            PushVec3("Location", Wait(0.2).FN, Move(HealthFrameProp, 0.5, V3(-0.6, 0.0, -48.0)).FN)
            PushBool("Show", Toggle(AvatarProp).FN)
            PushBool("Show", Toggle(AvatarFrameProp).FN)
            PushBool("Show", Toggle(AvatarBackgroundProp).FN)
            PushBool("Show", Toggle(HealthBarProp).FN)
            PushBool("Show", Toggle(HealthBackgroundProp).FN)
            PushBool("Show", Toggle(HealthFrameProp).FN)
            # Debug("Location", "{State.Source} Location")
            # Debug("Slot Number", "{State.Source} Slot Number")
            # Debug("Show", "{State.Source} Show")
            # Debug("Hero Type", "{State.Source} Hero Type")
            # Debug("Health Ratio", "{State.Source} Health Ratio")
            # Debug("Current Hero ID", "{State.Source} Hero ID")
