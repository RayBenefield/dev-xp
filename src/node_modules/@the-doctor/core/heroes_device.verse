
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Tableau
using. Vertex

heroes_device<public> := class(tableau_device):
    @editable ResourceID<override>:string = "Targets"
    @editable GridID:string = "Target Grid"
    @editable CursorID:string = "Target Cursor"

    GetResources<override>():[]resource= array:
        resource:
            ID := "Heroes"
            Props := map:
                "Hero Label" => Str of "Hero"
                "All Hero Types" => Strs of HeroTypes.Keys()
                "Heroes" => Strs of array{}
                "Hero Count" => Integer of (Path("Heroes"), "Length")
                "Next Hero Number" => Integer of (Path("Hero Count"), "+", ONE())
                "Next Hero ID" => Str of (Path("Hero Label"), "Append", Path("Next Hero Number"))
            Actions := map:
                "Add Random Hero" => Action of array:
                    IsTrue("Targets", "Has Available Cards")
                    Create("Next Hero ID").As("Hero Label")
                    Execute("Targets", "Assign Hero Card")
                    Insert("Next Hero ID").Into("Heroes")
        resource:
            ID := ResourceID
            Props := map:
                "Slot Number" => Integer of Path(GridID, "Selection Number")
                "Current Card" => Str of (Path("Active Cards"), "Get", Path("Slot Number"))
                "Is On Card" => Bool of (Path("Current Card"), "Not Empty")
                "Current Hero ID" => Str of Path(Path("Current Card"), "Current Hero ID")
                "Available Cards" => Strs of for(I:=1..8). "Hero Card{I}"
                "First Available Card" => Str of (Path("Available Cards"), "Get", ONE())
                "Active Cards" => Strs of array{}
                "Available Count" => Integer of (Path("Available Cards"), "Length")
                "Has Available Cards" => Bool of (Path("Available Count"), "Int >", ZERO())
                "Target Count" => Integer of (Path("Active Cards"), "Length")
                "Has Targets" => Bool of (Path("Target Count"), "Int >", ZERO())
            Actions := map:
                "Assign Hero Card" => Action of array:
                    Execute(Path("First Available Card"), "Get Next Hero")
                    Insert("First Available Card").Into("Active Cards")
                    Remove(ONE()).From("Available Cards")
                "Prim Action" => Action of array:
                    IsTrue("Is On Card")
                    Execute("Inventory", "Use Item")
                    Execute("Section Selector", "Set Inventory")
                    Execute(Path("Current Hero ID"), "Heal")
                    Insert("Current Card").Into("Available Cards")
                    RemoveItem("Current Card").From("Active Cards")
                "Move Up" => Action of Execute(GridID, "Decrease Y")
                "Move Down" => Action of Execute(GridID, "Increase Y")
                "Move Right" => Action of Execute(GridID, "Increase X")
                "Move Left" => Action of Execute(GridID, "Decrease X")
