
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Tableau
using. Vertex

heroes_device<public> := class(creative_device, config_device, side_effect_device):
    @editable TargetCursor:creative_prop = creative_prop{}
    @editable TargetCursorSettings:cursor_settings = cursor_settings{}

    GetResources<override>():[]resource= array:
        resource:
            ID := "Heroes"
            Props := map:
                "Hero Label" => prop_str. Default := "Hero"
                "All Hero Types" => prop_strs. Default := HeroTypes.Keys()
                "Heroes" => prop_strs{}
                "Hero Count" => prop_int{ Focus := Path("Heroes"), FN := "Length" }
                "Next Hero Number" => prop_int{ Focus := Path("Hero Count"), FN := "+", Tweak := ONE() }
                "Next Hero ID" => prop_str{ Focus := Path("Hero Label"), FN := "Append", Tweak := Path("Next Hero Number") }
            Abilities := map:
                "Add Random Hero" => Action of array:
                    IsTrue("Targets", "Has Available Cards")
                    Create("Next Hero ID").As("Hero Label")
                    Execute("Targets", "Assign Hero Card")
                    Insert("Next Hero ID").Into("Heroes")
        resource:
            Type := "Hero"
            Props := map:
                "Loss Range" => prop_float. Default := 0.8
                "Loss Minimum" => prop_float. Default := 0.1
                "Hero Type" => prop_str{ Focus := Path("Heroes", "All Hero Types"), FN := "Random" }
                "Random Loss" => prop_float{ Focus := Path("Loss Range"), FN := "Random" }
                "Health Ratio" => prop_float{ Focus := Path("Random Loss"), FN := "+", Tweak := Path("Loss Minimum") }
                "Full Health" => prop_bool. Default := false
                "Assigned Card Number" => prop_int{}
                "Assigned Card ID" => prop_str{}
            Abilities := map:
                "Heal" => Action of array:
                    Set("Full Health").To(TRUE())
        CreateCursorResource(TargetCursorSettings)
        resource:
            ID := "Targets"
            Props := map:
                "Target Label" => prop_str. Default := "Targets"
                "Inventory Label" => prop_str. Default := "Inventory"
                "In Targets" => prop_bool{ Focus := Path("Root", "Context"), FN := "String Equals", Tweak := Path("Target Label") }
                "Target Location" => prop_vec3. Focus := Path("Target Cursor", "Location")
                "Slot Number" => prop_int. Focus := Path("Target Cursor", "Selection Number")
                "Current Card" => prop_str{ Focus := Path("Active Cards"), FN := "Get", Tweak := Path("Slot Number") }
                "Is On Card" => prop_bool{ Focus := Path("Current Card"), FN := "Not Empty" }
                "Current Hero ID" => prop_str. Focus := Path(Path("Current Card"), "Current Hero ID")
                "Available Cards" => prop_strs. Default := for(I:=1..8). "Hero Card{I}"
                "First Available Card" => prop_str{ Focus := Path("Available Cards"), FN := "Get", Tweak := ONE() }
                "Active Cards" => prop_strs{}
                "Available Count" => prop_int{ Focus := Path("Available Cards"), FN := "Length" }
                "Has Available Cards" => prop_bool{ Focus := Path("Available Count"), FN := "Int >", Tweak := ZERO() }
                "Target Count" => prop_int{ Focus := Path("Active Cards"), FN := "Length" }
                "Has Targets" => prop_bool{ Focus := Path("Target Count"), FN := "Int >", Tweak := ZERO() }
            Abilities := map:
                "Assign Hero Card" => Action of array:
                    Execute(Path("First Available Card"), "Get Next Hero")
                    Insert("First Available Card").Into("Active Cards")
                    Remove(ONE()).From("Available Cards")
                "Prim Action" => Action of array:
                    IsTrue("Is On Card")
                    Execute("Inventory", "Use Item")
                    Set("Root", "Context").To("Inventory Label")
                    Execute(Path("Current Hero ID"), "Heal")
                    Insert("Current Card").Into("Available Cards")
                    RemoveItem("Current Card").From("Active Cards")
                "Move Up" => Action of array:
                    Execute(TargetCursorSettings.ID, "Decrease Y")
                "Move Down" => Action of array:
                    Execute(TargetCursorSettings.ID, "Increase Y")
                "Move Right" => Action of array:
                    Execute(TargetCursorSettings.ID, "Increase X")
                "Move Left" => Action of array:
                    Execute(TargetCursorSettings.ID, "Decrease X")

    GetResourceID<override>()<computes>:?string= option. "Targets"
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= option. "Player"
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect= array:
        PushBool("In Targets", Toggle(TargetCursorSettings.Prop).FN)
        PushVec3("Target Location", SetLocation(TargetCursorSettings.Prop).FN)
        # Debug("Hero Count")
        # Debug("Next Hero ID")
