
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Tableau
using. Vertex

heroes_device<public> := class(creative_device, config_device, side_effect_device):
    @editable TargetCursor:creative_prop = creative_prop{}
    @editable GridSettings:grid_settings = grid_settings{}
    @editable CursorSettings:cursor_settings = cursor_settings{}

    GetResources<override>():[]resource= array:
        resource:
            ID := "Heroes"
            Props := map:
                "Hero Label" => Str of "Hero"
                "All Hero Types" => Strs of HeroTypes.Keys()
                "Heroes" => Strs of array{}
                "Hero Count" => Integer of (Path("Heroes"), "Length")
                "Next Hero Number" => Integer of (Path("Hero Count"), "+", ONE())
                "Next Hero ID" => Str of (Path("Hero Label"), "Append", Path("Next Hero Number"))
            Actions := map:
                "Add Random Hero" => Action of array:
                    IsTrue("Targets", "Has Available Cards")
                    Create("Next Hero ID").As("Hero Label")
                    Execute("Targets", "Assign Hero Card")
                    Insert("Next Hero ID").Into("Heroes")
        resource:
            Type := "Hero"
            Props := map:
                "Loss Range" => Float of 0.8
                "Loss Minimum" => Float of 0.1
                "Hero Type" => Str of (Path("Heroes", "All Hero Types"), "Random")
                "Random Loss" => Float of (Path("Loss Range"), "Random")
                "Health Ratio" => Float of (Path("Random Loss"), "+", Path("Loss Minimum"))
                "Full Health" => Bool of false
                "Assigned Card Number" => Integer of 0
                "Assigned Card ID" => Str of ""
            Actions := map:
                "Heal" => Action of array:
                    Set("Full Health").To(TRUE())
        CreateGridResource(GridSettings)
        CreateCursorResource(CursorSettings)
        resource:
            ID := "Targets"
            Props := map:
                "Target Label" => Str of "Targets"
                "Inventory Label" => Str of "Inventory"
                "In Targets" => Bool of (Path("Root", "Context"), "String Equals", Path("Target Label"))
                "Target Location" => Vec3 of Path(CursorSettings.ID, "Location")
                "Slot Number" => Integer of Path(GridSettings.ID, "Selection Number")
                "Current Card" => Str of (Path("Active Cards"), "Get", Path("Slot Number"))
                "Is On Card" => Bool of (Path("Current Card"), "Not Empty")
                "Current Hero ID" => Str of Path(Path("Current Card"), "Current Hero ID")
                "Available Cards" => Strs of for(I:=1..8). "Hero Card{I}"
                "First Available Card" => Str of (Path("Available Cards"), "Get", ONE())
                "Active Cards" => Strs of array{}
                "Available Count" => Integer of (Path("Available Cards"), "Length")
                "Has Available Cards" => Bool of (Path("Available Count"), "Int >", ZERO())
                "Target Count" => Integer of (Path("Active Cards"), "Length")
                "Has Targets" => Bool of (Path("Target Count"), "Int >", ZERO())
            Actions := map:
                "Assign Hero Card" => Action of array:
                    Execute(Path("First Available Card"), "Get Next Hero")
                    Insert("First Available Card").Into("Active Cards")
                    Remove(ONE()).From("Available Cards")
                "Prim Action" => Action of array:
                    IsTrue("Is On Card")
                    Execute("Inventory", "Use Item")
                    Set("Root", "Context").To("Inventory Label")
                    Execute(Path("Current Hero ID"), "Heal")
                    Insert("Current Card").Into("Available Cards")
                    RemoveItem("Current Card").From("Active Cards")
                "Move Up" => Action of Execute(GridSettings.ID, "Decrease Y")
                "Move Down" => Action of Execute(GridSettings.ID, "Increase Y")
                "Move Right" => Action of Execute(GridSettings.ID, "Increase X")
                "Move Left" => Action of Execute(GridSettings.ID, "Decrease X")

    GetResourceID<override>()<computes>:?string= option. "Targets"
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= option. "Player"
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect= array:
        PushBool("In Targets", Toggle(CursorSettings.Prop).FN)
        PushVec3("Target Location", SetLocation(CursorSettings.Prop).FN)
        # Debug("Hero Count")
        # Debug("Next Hero ID")
