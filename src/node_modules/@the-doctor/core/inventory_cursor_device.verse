
using. /Fortnite.com/Devices
using. /Verse.org/Simulation

using. Tableau

inventory_cursor_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ResourceID:string = "Inventory Cursor"

    @editable Cursor:creative_prop = creative_prop{}
    @editable CursorSettings:cursor_settings = cursor_settings{}

    @editable ItemLabel:billboard_device = billboard_device{}

    GetResources<override>():[]resource= array:
        CreateCursorResource(CursorSettings)
        resource:
            ID := "Inventory"
            Props := map:
                "Target Label" => prop_str. Default := "Targets"
                "Max Item Count" => prop_int. Default := 25
                "Items" => prop_strs. Default := for(I:=1..25). "Bottle_14"
                "Item Count" => prop_int{ Focus := Path("Items"), FN := "Length" }
                "Maxed" => prop_bool{ Focus := Path("Item Count"), FN := "Int >=", Tweak := Path("Max Item Count") }
                "Current Item Number" => prop_int{ Focus := Path(Path("Inventory Cursor", "Current Slot"), "Slot Number") }
                "Current Item Type" => prop_str{ Focus := Path("Items"), FN := "Get", Tweak := Path("Current Item Number") }
                "Needs Target" => prop_bool. Focus := Path(Path("Current Item Type"), "Needs Target")
            Abilities := map:
                "Prim Action" => Action of array:
                    Execute("Use Target Item")
                    Execute("Use Self Item")
                "Use Item" => Action of array:
                    Remove("Current Item Number").From("Inventory", "Items")
                "Use Target Item" => Action of array:
                    IsTrue("Needs Target")
                    IsTrue("Targets", "Has Targets")
                    Set("Root", "Context").To("Target Label")
                "Use Self Item" => Action of array:
                    IsFalse("Needs Target")
                    Execute("Use Item")
                "Move Right" => Action of array:
                    Execute(CursorSettings.ID, "Increase X")
                "Move Left" => Action of array:
                    Execute("Try Shop")
                    IsTrue("Inventory Cursor", "In Inventory")
                    Execute(CursorSettings.ID, "Decrease X")
                "Try Shop" => Action of array:
                    IsTrue("Inventory Cursor", "To Shop")
                    Set("Root", "Context").To("Inventory Cursor", "Shop Label")
                "Move Up" => Action of array:
                    Execute(CursorSettings.ID, "Decrease Y")
                "Move Down" => Action of array:
                    Execute(CursorSettings.ID, "Increase Y")
                "Alt Action" => Action of array:
                    Execute("Heroes", "Add Random Hero")
        resource:
            ID := ResourceID
            Props := map:
                "Slot Label" => prop_str. Default := "Slot"
                "Inventory Label" => prop_str. Default := "Inventory"
                "Shop Label" => prop_str. Default := "Shop"
                "Location" => prop_vec3. Focus := Path(CursorSettings.ID, "Location")
                "Current Slot" => prop_str{ Focus := Path("Slot Label"), FN := "Append", Tweak := Path(CursorSettings.ID, "Location ID")}
                "Item Type" => prop_str{ Focus := Path("Inventory", "Current Item Type") }
                "Items" => prop_strs{ Focus := Path("Inventory", "Items") }
                "Visible Item Type" => prop_str{ Focus := Path("In Inventory"), FN := "If True", Tweak := Path("Inventory", "Current Item Type") }
                "In Inventory" => prop_bool{ Focus := Path("Root", "Context"), FN := "String Equals", Tweak := Path("Inventory Label") }
                "In Shop" => prop_bool{ Focus := Path("Root", "Context"), FN := "String Equals", Tweak := Path("Shop Label") }
                "To Shop" => prop_bool{ Focus := Path("In Inventory"), FN := "AND", Tweak := Path("Cursor", "At Min X") }
            Abilities := map{}

    GetResourceID<override>()<computes>:?string= option. ResourceID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect= array:
        PushMsg("Visible Item Type", SetText(ItemLabel).FN)
        PushBool("In Inventory", Toggle(option. Cursor).FN)
        PushVec3("Location", Move(option. Cursor, 0.1).FN)
        # Debug("Item Type")
        # Debug("Items")
        # Debug("Current Slot")
