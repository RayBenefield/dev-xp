
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Gooey
using. Tableau
using. TableauDevice
using. TableauEffect
using. TableauLogic
using. TableauResource

inventory_cursor_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ResourceID:string = "Inventory Cursor"
    @editable CursorSettings:cursor_settings = cursor_settings{}

    @editable Cursor:creative_prop = creative_prop{}
    @editable Action:input_trigger_device = input_trigger_device{}
    @editable AltAction:input_trigger_device = input_trigger_device{}

    @editable Forward:input_trigger_device = input_trigger_device{}
    @editable Left:input_trigger_device = input_trigger_device{}
    @editable Right:input_trigger_device = input_trigger_device{}
    @editable Back:input_trigger_device = input_trigger_device{}

    @editable ItemLabel:billboard_device = billboard_device{}

    GetResources<override>():[]resource=
        RootSettings := switcher_settings:
            ID := "Root"
            StartingContext := "Inventory"
            Actions := array{ "Action", "Alt Action", "Move Up", "Move Down", "Move Left", "Move Right" }
        array:
            CreateContextSwitcherResource(RootSettings)
            CreateCursorResource(CursorSettings)
            resource:
                ID := "Inventory"
                Props := map:
                    "Target Label" => prop_str. Default := "Targets"
                    "Items" => prop_strs. Default := array{ "Book_01", "Book_02", "Book_03" }
                    "Current Item Number" => prop_int{ Focus := Path(Path("Inventory Cursor", "Current Slot"), "Slot Number") }
                    "Current Item Type" => prop_str{ Focus := Path("Items"), FN := "Get", Tweak := Path("Current Item Number") }
                    "Needs Target" => prop_bool. Focus := Path(Path("Current Item Type"), "Needs Target")
                Abilities := map:
                    "Action" => ability. Effects := array:
                        Execute("Use Target Item")
                        Execute("Use Self Item")
                    "Use Item" => ability. Effects := array:
                        Remove("Current Item Number").From(Path("Inventory", "Items"))
                    "Use Target Item" => ability. Effects := array:
                        IsTrue("Needs Target")
                        Set("Root", "Context").To("Target Label")
                    "Use Self Item" => ability. Effects := array:
                        IsFalse("Needs Target")
                        Execute("Use Item")
                    "Move Right" => ability. Effects := array:
                        Execute(CursorSettings.ID, "Increase X")
                    "Move Left" => ability. Effects := array:
                        Execute("Try Shop")
                        IsTrue("Inventory Cursor", "In Inventory")
                        Execute(CursorSettings.ID, "Decrease X")
                    "Try Shop" => ability. Effects := array:
                        IsTrue("Inventory Cursor", "To Shop")
                        Set("Root", "Context").To("Inventory Cursor", "Shop Label")
                    "Move Up" => ability. Effects := array:
                        Execute(CursorSettings.ID, "Decrease Y")
                    "Move Down" => ability. Effects := array:
                        Execute(CursorSettings.ID, "Increase Y")
                    "Alt Action" => ability. Effects := array:
                        Execute("Heroes", "Add Random Hero")
            resource:
                ID := ResourceID
                Props := map:
                    "Slot Label" => prop_str. Default := "Slot"
                    "Inventory Label" => prop_str. Default := "Inventory"
                    "Shop Label" => prop_str. Default := "Shop"
                    "Target Label" => prop_str. Default := "Targets"
                    "Location ID" => prop_str. Focus := Path(CursorSettings.ID, "Location ID")
                    "Location" => prop_vec3. Focus := Path(CursorSettings.ID, "Location")
                    "Current Slot" => prop_str{ Focus := Path("Slot Label"), FN := "Append", Tweak := Path(CursorSettings.ID, "Location ID")}
                    "Visible Item Type" => prop_str{ Focus := Path("In Inventory"), FN := "If True", Tweak := Path("Inventory", "Current Item Type") }
                    "Context" => prop_str. Focus := Path("Root", "Context")
                    "In Inventory" => prop_bool{ Focus := Path("Context"), FN := "String Equals", Tweak := Path("Inventory Label") }
                    "To Inventory" => prop_bool{ Focus := Path("In Shop") }
                    "In Shop" => prop_bool{ Focus := Path("Context"), FN := "String Equals", Tweak := Path("Shop Label") }
                    "To Shop" => prop_bool{ Focus := Path("In Inventory"), FN := "AND", Tweak := Path("Cursor", "At Min X") }
                Abilities := map{}

    GetResourceID<override>()<computes>:?string= option. ResourceID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        State.AttachAction("Root", "Action", Action.ReleasedEvent)
        State.AttachAction("Root", "Alt Action", AltAction.ReleasedEvent)

        State.AttachAction("Root", "Move Up", Forward.PressedEvent)
        State.AttachAction("Root", "Move Left", Left.PressedEvent)
        State.AttachAction("Root", "Move Right", Right.PressedEvent)
        State.AttachAction("Root", "Move Down", Back.PressedEvent)

        array:
            PushToMsg("Visible Item Type", ItemLabel.SetText)
            toggle_prop{ PropertyID := "In Inventory", Prop := option. Cursor }
            move{ PropertyID := "Location", Prop := option. Cursor, Time := 0.1 }
            # Debug("Location")
            # Debug("Location ID")
            # Debug("Current Item Number")
            # Debug("Current Item Type")
