
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Gooey
using. Tableau
using. TableauDevice
using. TableauEffect
using. TableauLogic
using. TableauResource

inventory_cursor_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ResourceID:string = "Inventory Cursor"
    @editable CursorSettings:cursor_settings = cursor_settings{}

    @editable Cursor:creative_prop = creative_prop{}
    @editable Action:input_trigger_device = input_trigger_device{}
    @editable AltAction:input_trigger_device = input_trigger_device{}

    @editable Forward:input_trigger_device = input_trigger_device{}
    @editable Left:input_trigger_device = input_trigger_device{}
    @editable Right:input_trigger_device = input_trigger_device{}
    @editable Back:input_trigger_device = input_trigger_device{}

    @editable ItemLabel:billboard_device = billboard_device{}

    GetResources<override>():[]resource= array:
        CreateCursorResource(CursorSettings)
        resource:
            ID := "Inventory"
            Props := map:
                "Items" => prop_strs. Default := array{ "Book_01", "Book_02", "Book_03" }
            Abilities := map:
                "Move Right" => ability. Effects := array:
                    IsTrue("Inventory Cursor", "In Inventory")
                    Execute(CursorSettings.ID, "Move Right")
                "Move Left" => ability. Effects := array:
                    IsTrue("Inventory Cursor", "In Inventory")
                    Execute(CursorSettings.ID, "Move Left")
                "Move Up" => ability. Effects := array:
                    IsTrue("Inventory Cursor", "In Inventory")
                    Execute(CursorSettings.ID, "Move Forward")
                "Move Down" => ability. Effects := array:
                    IsTrue("Inventory Cursor", "In Inventory")
                    Execute(CursorSettings.ID, "Move Back")
        resource:
            ID := ResourceID
            Props := map:
                "-ONE" => prop_float. Default := -1.0
                "Slot Label" => prop_str. Default := "Slot"
                "Inventory Label" => prop_str. Default := "Inventory"
                "Shop Label" => prop_str. Default := "Shop"
                "Offset" => prop_vec3. Default := GetTransform().Translation
                "X Coord" => prop_float{}
                "Y Coord" => prop_float. Focus := Path(CursorSettings.ID, "X Coord")
                "Z Coord" => prop_float{ Focus := Path(CursorSettings.ID, "Y Coord"), FN := "*", Tweak := Path("-ONE") }
                "XY Coord" => prop_vec2{ Focus := Path("X Coord"), FN := "Append", Tweak := Path("Y Coord") }
                "XYZ Coord" => prop_vec3{ Focus := Path("XY Coord"), FN := "Append", Tweak := Path("Z Coord") }
                "Location" => prop_vec3{ Focus := Path("XYZ Coord"), FN := "+", Tweak := Path("Offset") }
                "Current Slot" => prop_str{ Focus := Path("Slot Label"), FN := "Append", Tweak := Path(CursorSettings.ID, "Location ID")}
                "Current Item Number" => prop_int{ Focus := Path(Path("Current Slot"), "Slot Number") }
                "Current Item Type" => prop_str{ Focus := Path("Inventory", "Items"), FN := "Get", Tweak := Path("Current Item Number") }
                "Visible Item Type" => prop_str{ Focus := Path("In Inventory"), FN := "If True", Tweak := Path("Current Item Type") }
                "Context" => prop_str. Default := "Inventory"
                "In Inventory" => prop_bool{ Focus := Path("Context"), FN := "String Equals", Tweak := Path("Inventory Label") }
                "To Inventory" => prop_bool{ Focus := Path("In Shop") }
                "In Shop" => prop_bool{ Focus := Path("Context"), FN := "String Equals", Tweak := Path("Shop Label") }
                "To Shop" => prop_bool{ Focus := Path("In Inventory"), FN := "AND", Tweak := Path("Cursor", "At Min X") }
            Abilities := map:
                "Action" => ability. Effects := array:
                    Execute("Use Item")
                    Execute("Shop", "Add Shop Item")
                "Use Item" => ability. Effects := array:
                    IsTrue("In Inventory")
                    Remove("Current Item Number").From(Path("Inventory", "Items"))
                "Move Left" => ability. Effects := array:
                    Execute("Try Shop")
                    Execute("Inventory", "Move Left")
                "Move Right" => ability. Effects := array:
                    Execute("Inventory", "Move Right")
                    Execute("Try Inventory")
                "Move Down" => ability. Effects := array:
                    Execute("Inventory", "Move Down")
                    IsTrue("In Shop")
                    Execute("Item Selector", "Next")
                "Move Up" => ability. Effects := array:
                    Execute("Inventory", "Move Up")
                    IsTrue("In Shop")
                    Execute("Item Selector", "Previous")
                "Try Inventory" => ability. Effects := array:
                    IsTrue("To Inventory")
                    Set("Context").To("Inventory Label")
                "Try Shop" => ability. Effects := array:
                    IsTrue("To Shop")
                    Set("Context").To("Shop Label")

    GetResourceID<override>()<computes>:?string= option. ResourceID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        State.AttachAction("Action", Action.ReleasedEvent)

        State.AttachAction("Move Up", Forward.PressedEvent)
        State.AttachAction("Move Left", Left.PressedEvent)
        State.AttachAction("Move Right", Right.PressedEvent)
        State.AttachAction("Move Down", Back.PressedEvent)

        array:
            PushToMsg("Visible Item Type", ItemLabel.SetText)
            toggle_prop{ PropertyID := "In Inventory", Prop := option. Cursor }
            move{ PropertyID := "Location", Prop := option. Cursor, Time := 0.1 }
            # Debug("Current Item Number")
            # Debug("Current Item Type")
