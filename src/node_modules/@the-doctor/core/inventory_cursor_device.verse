
using. /Fortnite.com/Devices
using. /Verse.org/Simulation

using. Tableau

inventory_cursor_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ResourceID:string = "Inventory Cursor"

    @editable GridSettings:grid_settings = grid_settings{}
    @editable CursorSettings:cursor_settings = cursor_settings{}

    @editable ItemLabel:billboard_device = billboard_device{}

    GetResources<override>():[]resource= array:
        CreateGridResource(GridSettings)
        CreateCursorResource(CursorSettings)
        resource:
            ID := "Inventory"
            Props := map:
                "Target Label" => Str of "Targets"
                "Max Item Count" => Integer of 25
                "Items" => Strs of for(I:=1..25). "Bottle_14"
                "Item Count" => Integer of (Path("Items"), "Length")
                "Maxed" => Bool of (Path("Item Count"), "Int >=", Path("Max Item Count"))
                "Current Item Number" => Integer of (Path(Path("Inventory Cursor", "Current Slot"), "Slot Number"))
                "Current Item Type" => Str of (Path("Items"), "Get", Path("Current Item Number"))
                "Needs Target" => Bool of Path(Path("Current Item Type"), "Needs Target")
            Actions := map:
                "Prim Action" => Action of array:
                    IsTrue("Needs Target").Else("Use Self Item")
                    IsTrue("Targets", "Has Targets")
                    Set("Root", "Context").To("Target Label")
                "Use Item" => Action of array:
                    Remove("Current Item Number").From("Inventory", "Items")
                "Use Self Item" => Action of array:
                    IsFalse("Needs Target")
                    Execute("Use Item")
                "Try Shop" => Action of array:
                    IsTrue("Inventory Cursor", "To Shop")
                    Set("Root", "Context").To("Inventory Cursor", "Shop Label")
                "Alt Action" => Action of Execute("Heroes", "Add Random Hero")
                "Move Right" => Action of Execute(GridSettings.ID, "Increase X")
                "Move Up" => Action of Execute(GridSettings.ID, "Decrease Y")
                "Move Down" => Action of Execute(GridSettings.ID, "Increase Y")
                "Move Left" => Action of array:
                    Execute("Try Shop")
                    IsTrue("Inventory Cursor", "In Inventory")
                    Execute(GridSettings.ID, "Decrease X")
        resource:
            ID := ResourceID
            Props := map:
                "Slot Label" => Str of "Slot"
                "Inventory Label" => Str of "Inventory"
                "Shop Label" => Str of "Shop"
                "Location" => Vec3 of Path(CursorSettings.ID, "Location")
                "Current Slot" => Str of (Path("Slot Label"), "Append", Path(GridSettings.ID, "Location ID"))
                "Item Type" => Str of (Path("Inventory", "Current Item Type"))
                "Items" => Strs of (Path("Inventory", "Items"))
                "Visible Item Type" => Str of (Path("In Inventory"), "If True", Path("Inventory", "Current Item Type"))
                "In Inventory" => Bool of (Path("Root", "Context"), "String Equals", Path("Inventory Label"))
                "In Shop" => Bool of (Path("Root", "Context"), "String Equals", Path("Shop Label"))
                "To Shop" => Bool of (Path("In Inventory"), "AND", Path(GridSettings.ID, "At Min X"))
            Actions := map{}

    GetResourceID<override>()<computes>:?string= option. ResourceID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= option. "Player"
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect= array:
        PushMsg("Visible Item Type", SetText(ItemLabel).FN)
        PushBool("In Inventory", Toggle(CursorSettings.Prop).FN)
        PushVec3("Location", Move(CursorSettings.Prop, 0.1).FN)
        # Debug("Item Type")
        # Debug("Items")
        # Debug("Current Slot")
