import { map, filter, share, tap } from 'rxjs/operators'

export default chat => {
    const commandPattern = new RegExp(/^[.!,\s]+(.*)/)

    const addRawMessage = map(msg => ({
        ...msg,
        rawMessage: msg.message.message.reduce(
            (all, m) => `${all}${m.text}`,
            ''
        ),
    }))

    const onlyCommands = filter(({ user_name: userName, rawMessage }) => {
        const notRay =
            userName !== 'RayBenefield' && commandPattern.test(rawMessage)
        const isRay =
            userName === 'RayBenefield' &&
            !rawMessage.startsWith(' ') &&
            commandPattern.test(rawMessage)

        return notRay || isRay
    })

    const deleteMessage = tap(({ id }) => chat.erase(id))

    const getCommand = map(all => {
        const [, core] = commandPattern.exec(all.rawMessage)
        const parts = core.replace(/\s+/g, ' ').split(' ')
        return {
            ...all,
            command: parts[0].toLowerCase(),
            args: parts.slice(1).filter(arg => arg),
        }
    })

    return chat.pipe(
        addRawMessage,
        onlyCommands,
        deleteMessage,
        getCommand,
        share()
    )
}
