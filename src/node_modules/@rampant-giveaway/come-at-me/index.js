import { from } from 'rxjs'
import find from 'lodash.find'
import {
    tap,
    map,
    filter,
    groupBy,
    mergeMap,
    throttleTime,
} from 'rxjs/operators'
import { firestore } from 'firebase-admin'

const { FieldValue } = firestore

export default ({
    prefix = '',
    entryThrottle = 600,
    logger: baseLogger,
    db,
    moderator,
}) => {
    const logger = baseLogger.child({ plugin: 'come-at-me' })

    const onlyMessagesThatContainTags = entry =>
        find(entry.message.message, { type: 'tag' })
    const onlyMessagesWithTagType = ({ type }) => type === 'tag'

    const withTags$ = moderator.pipe(filter(onlyMessagesThatContainTags))
    const withEntries$ = withTags$.pipe(
        map(({ userId, userName, message }) => ({
            friend: { id: userId, name: userName.toLowerCase() },
            entrants: message.message
                .filter(onlyMessagesWithTagType)
                .map(({ username, id }) => ({ id, name: username })),
        }))
    )
    const entries$ = withEntries$.pipe(
        mergeMap(({ friend, entrants }) =>
            from(entrants).pipe(map(entrant => ({ friend, entrant })))
        )
    )
    const notSelfPromo$ = entries$.pipe(
        filter(({ friend, entrant }) => friend.id !== entrant.id)
    )
    const throttledEntries$ = notSelfPromo$.pipe(
        groupBy(({ friend, entrant }) => `${friend.id} -> ${entrant.id}`),
        mergeMap(entry$ => entry$.pipe(throttleTime(entryThrottle * 1000))),
        tap(({ friend, entrant }) =>
            logger.extend(`${friend.name} -> ${entrant.name}`)
        )
    )

    throttledEntries$.subscribe(({ friend, entrant }) => {
        Promise.all([
            db.upsert(`pools/${prefix}`, { entries: FieldValue.increment(1) }),
            db.upsert(`pools/${prefix}/entries/${entrant.id}`, {
                name: entrant.name,
                entries: FieldValue.increment(1),
                [friend.id]: {
                    entries: FieldValue.increment(1),
                    name: friend.name,
                },
            }),
        ])
    })
    logger.platform('Chat entry stream setup.')
}
