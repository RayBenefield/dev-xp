import { filter, tap, map, withLatestFrom, mergeMap } from 'rxjs/operators'
import weighted from 'weighted'
import omitBy from 'lodash.omitby'
import pickBy from 'lodash.pickby'
import mapValues from 'lodash.mapvalues'
import { firestore } from 'firebase-admin'
import createCommandStream from '@rampant-giveaway/commands'

const { FieldValue } = firestore

export default ({ moderator, db, prefix, logger: baseLogger }) => {
    const logger = baseLogger.child({ plugin: 'selection' })
    const command$ = createCommandStream(moderator)

    const currentGiveaway$ = db.onDocumentChange('giveaways/current')
    command$
        .pipe(
            filter(
                ({ user_name, command }) =>
                    command === 'give' &&
                    user_name.toLowerCase() === 'raybenefield'
            )
        )
        // eslint-disable-next-line complexity
        .subscribe(({ args }) => {
            let giveaway = null
            let entryPool = prefix
            const slots = 1

            if (args.length === 0) {
                console.log('No arguments given for giveaway.')
            }

            if (args.length === 1) {
                giveaway = args[0]
            }
            if (args.length === 2) {
                giveaway = args[0]
                entryPool = args[1]
            }
            db.set('giveaways/current', { entryPool, giveaway })
            logger.extend(
                `Starting a giveaway with ${entryPool}-entries for ${giveaway} giveaway with ${slots} winner${
                    slots > 1 ? 's' : ''
                }`
            )
        })

    command$
        .pipe(
            filter(({ command }) => command === 'enter'),
            map(({ user_id: userId, user_name: userName }) => ({
                userId,
                userName,
            })),
            withLatestFrom(currentGiveaway$)
        )
        .subscribe(([{ userId, userName }, { entrants = [] }]) => {
            if (entrants.includes(userId))
                return moderator.whisper(
                    userName,
                    'You are already in the giveaway.'
                )

            logger.extend(`${userName} entered the giveaway.`)
            moderator.whisper(
                userName,
                'You have been entered into the giveaway.'
            )
            return db.update('giveaways/current', {
                entrants: FieldValue.arrayUnion(userId),
            })
        })

    command$
        .pipe(
            filter(
                ({ command, user_name }) =>
                    command === 'pick' &&
                    user_name.toLowerCase() === 'raybenefield'
            ),
            withLatestFrom(currentGiveaway$),
            mergeMap(([, { entryPool, giveaway, entrants }]) =>
                Promise.all([
                    db.get(`pools/${entryPool}/entries`).then(allEntries =>
                        mapValues(allEntries, ({ name, entries }, id) => ({
                            id,
                            name,
                            entries,
                        }))
                    ),
                    db.get(`${entryPool}-${giveaway}-winners`),
                    Promise.resolve(entrants),
                    Promise.resolve(entryPool),
                    Promise.resolve(giveaway),
                ])
            ),
            map(
                ([
                    allEntries,
                    winners,
                    currentEntrants,
                    entryPool,
                    giveaway,
                ]) => ({
                    entryPool,
                    giveaway,
                    entrants: omitBy(
                        pickBy(allEntries, ({ id }) =>
                            currentEntrants.includes(parseInt(id, 10))
                        ),
                        ({ id }) => id in winners
                    ),
                    entries: mapValues(
                        omitBy(
                            pickBy(allEntries, ({ id }) =>
                                currentEntrants.includes(parseInt(id, 10))
                            ),
                            ({ id }) => id in winners
                        ),
                        ({ entries }) => entries
                    ),
                })
            ),
            filter(({ entries }) => Object.values(entries).length > 0),
            tap(({ entrants, entryPool, giveaway }) =>
                db.set(`${entryPool}-giveaways/${giveaway}`, entrants)
            ),
            map(({ entrants, entries, entryPool, giveaway }) => {
                const winner = weighted.select(entries)
                return {
                    winner: entrants[winner],
                    entryPool,
                    giveaway,
                }
            }),
            tap(({ winner: { name } }) =>
                moderator.message(`@${name} has won the giveaway`)
            ),
            tap(({ winner, entryPool, giveaway }) =>
                db.raw
                    .doc(`${entryPool}-${giveaway}-winners/${winner.id}`)
                    .set(winner)
            ),
            tap(() =>
                db.set('giveaways/current', { entryPool: null, giveaway: null })
            )
        )
        .subscribe()
}
