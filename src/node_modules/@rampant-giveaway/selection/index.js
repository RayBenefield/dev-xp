import {
    filter,
    tap,
    skipUntil,
    map,
    distinct,
    takeUntil,
    toArray,
    withLatestFrom,
    mergeMap,
} from 'rxjs/operators'
import weighted from 'weighted'
import omitBy from 'lodash.omitby'
import pickBy from 'lodash.pickby'
import mapValues from 'lodash.mapvalues'
import createCommandStream from '@rampant-giveaway/commands'

export default ({ moderator, db, prefix, logger: baseLogger }) => {
    const logger = baseLogger.child({ plugin: 'selection' })
    const command$ = createCommandStream(moderator)
    let entryPool = prefix
    let giveaway = prefix

    const startEntries$ = command$.pipe(
        filter(
            ({ user_name, command }) =>
                command === 'start-entries' &&
                user_name.toLowerCase() === 'raybenefield'
        ),
        tap(({ args }) => {
            if (args.length > 0) giveaway = args[0]
            if (args.length > 1) entryPool = `${args[1]}-`
        }),
        tap(() =>
            logger.extend(
                `Starting a giveaway with ${entryPool}-entries for ${giveaway} giveaway`
            )
        )
    )

    const endEntries$ = command$.pipe(
        filter(
            ({ user_name, command }) =>
                command === 'end-entries' &&
                user_name.toLowerCase() === 'raybenefield'
        ),
        tap(() => logger.extend(`Ending ${giveaway} giveaway`))
    )

    const entries$ = command$.pipe(
        skipUntil(startEntries$),
        filter(({ command }) => command === 'enter'),
        tap(({ user_name: userName }) => {
            logger.extend(`${userName} entered the giveaway.`)
            moderator.whisper(
                userName,
                'You have been entered into the giveaway.'
            )
        }),
        map(({ user_id: userId }) => userId),
        distinct(),
        takeUntil(endEntries$),
        toArray()
    )

    command$
        .pipe(
            filter(
                ({ command, user_name }) =>
                    command === 'pick' &&
                    user_name.toLowerCase() === 'raybenefield'
            ),
            withLatestFrom(entries$),
            mergeMap(([, currentEntrants]) =>
                Promise.all([
                    db.get(`${entryPool}entries`).then(allEntries =>
                        mapValues(allEntries, ({ name, entries }, id) => ({
                            id,
                            name,
                            entries,
                        }))
                    ),
                    db.get(`${entryPool}${giveaway}-winners`),
                    Promise.resolve(currentEntrants),
                ])
            ),
            map(([allEntries, winners, currentEntrants]) => ({
                entrants: omitBy(
                    pickBy(allEntries, ({ id }) =>
                        currentEntrants.includes(parseInt(id, 10))
                    ),
                    ({ id }) => id in winners
                ),
                entries: mapValues(
                    omitBy(
                        pickBy(allEntries, ({ id }) =>
                            currentEntrants.includes(parseInt(id, 10))
                        ),
                        ({ id }) => id in winners
                    ),
                    ({ entries }) => entries
                ),
            })),
            tap(({ entrants }) =>
                db.set(`${entryPool}giveaways/${giveaway}`, entrants)
            ),
            map(({ entrants, entries }) => {
                const winner = weighted.select(entries)
                return entrants[winner]
            }),
            tap(({ name }) =>
                moderator.message(`@${name} has won the giveaway`)
            ),
            tap(winner =>
                db.raw
                    .doc(`${entryPool}${giveaway}-winners/${winner.id}`)
                    .set(winner)
            )
        )
        .subscribe()
}
