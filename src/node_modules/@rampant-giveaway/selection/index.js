import give from '@fever/give'
import weighted from 'weighted'
import enter from '@fever/enter'
import omitBy from 'lodash.omitby'
import mapValues from 'lodash.mapvalues'
import createCommandStream from '@rampant-giveaway/commands'
import { filter, tap, map, withLatestFrom, mergeMap } from 'rxjs/operators'

export default ({ moderator, db, prefix, logger: baseLogger }) => {
    const logger = baseLogger.child({ plugin: 'selection' })
    const command$ = createCommandStream(moderator)

    const currentGiveaway$ = db.onDocumentChange('giveaways/current')

    give({ moderator, db, prefix, logger })
    enter({ moderator, db, prefix, logger })

    command$
        .pipe(
            filter(
                ({ command, user_name }) =>
                    command === 'pick' &&
                    user_name.toLowerCase() === 'raybenefield'
            ),
            withLatestFrom(currentGiveaway$),
            mergeMap(([, { entryPool, giveaway, entrants }]) =>
                Promise.all([
                    db
                        .getAll(
                            entrants.map(
                                id => `pools/${entryPool}/entries/${id}`
                            )
                        )
                        .then(allEntries =>
                            mapValues(allEntries, ({ name, entries }, id) => ({
                                id,
                                name,
                                entries,
                            }))
                        ),
                    db.get(
                        `giveaways/${entryPool}/giveaways/${giveaway}/winners`
                    ),
                    Promise.resolve(entryPool),
                    Promise.resolve(giveaway),
                ])
            ),
            map(([allEntries, winners, entryPool, giveaway]) => ({
                entryPool,
                giveaway,
                entrants: omitBy(allEntries, ({ id }) => id in winners),
                entries: mapValues(
                    omitBy(allEntries, ({ id }) => id in winners),
                    ({ entries }) => entries
                ),
            })),
            filter(({ entries }) => Object.values(entries).length > 0),
            mergeMap(({ entrants, entries, entryPool, giveaway }) =>
                db
                    .push(
                        `giveaways/${entryPool}/giveaways/${giveaway}/entrants`,
                        entrants
                    )
                    .then(entriesLocation => ({
                        entrants,
                        entries,
                        entryPool,
                        giveaway,
                        entriesLocation,
                    }))
            ),
            map(
                ({
                    entrants,
                    entries,
                    entryPool,
                    giveaway,
                    entriesLocation,
                }) => {
                    const winner = weighted.select(entries)
                    return {
                        winner: {
                            ...entrants[winner],
                            entriesLocation,
                            candidates: Object.keys(entrants).length,
                            allEntries: Object.values(entrants).reduce(
                                (all, { entries: currentEntries = 0 }) =>
                                    currentEntries + all,
                                0
                            ),
                        },
                        entryPool,
                        giveaway,
                    }
                }
            ),
            tap(({ winner: { name } }) =>
                moderator.message(`@${name} has won the giveaway`)
            ),
            tap(({ winner, entryPool, giveaway }) =>
                db
                    .set(`giveaways/${entryPool}/giveaways/${giveaway}`, {
                        winners: 1,
                        slots: 1,
                    })
                    .then(() =>
                        db.set(
                            `giveaways/${entryPool}/giveaways/${giveaway}/winners/${
                                winner.id
                            }`,
                            winner
                        )
                    )
            ),
            tap(() =>
                db.set('giveaways/current', { entryPool: null, giveaway: null })
            )
        )
        .subscribe()
}
