
using. Goo

Execute<public><constructor>(Focus:string)<transacts> := effect. Execute<constructor>(Path(Focus))
Execute<public><constructor>(ResID:string, PropID:string)<transacts> := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(ResID:half_path, PropID:string)<transacts> := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(ResID:string, PropID:half_path)<transacts> := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(ResID:half_path, PropID:half_path)<transacts> := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(Focus:half_path)<transacts> := effect{ FN := "Execute Action", Focus := Focus }
execute_effect<public> := class():
    Focus<public>:half_path
    State<public>:scoped_state
    # TODO: This should really be a Tap with Strings
    Affect<public>()<suspends>:?string=
        State.ExecuteAction(Focus)
        return false
