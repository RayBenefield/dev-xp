
using. Goo

Execute<public><constructor>(Focus:string) := effect. Execute<constructor>(Path(Focus))
Execute<public><constructor>(ResID:string, PropID:string) := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(ResID:half_path, PropID:string) := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(ResID:string, PropID:half_path) := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(ResID:half_path, PropID:half_path) := effect. Execute<constructor>(Path(ResID, PropID))
Execute<public><constructor>(Focus:half_path) := effect{ FN := "Execute Ability", Focus := Focus }
execute_effect<public> := class():
    Focus<public>:half_path
    State<public>:scoped_state
    # TODO: This should really be a Tap with Strings
    Affect<public>()<suspends>:?string=
        SwitchMap(Once(State.ToResourceID(Focus)), RunAbility)
        return false

    RunAbility(ResourceID:string)<suspends>:string_goo=
        PropertyID := Focus.PropertyID? or ""
        State.GetAbility(ResourceID, PropertyID).Set()
        StrGoo()
