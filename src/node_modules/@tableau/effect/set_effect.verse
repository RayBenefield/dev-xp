
using. Goo

Set<public><constructor>(Focus:string)<transacts> := effect. Set<constructor>(Path(Focus))
Set<public><constructor>(ResID:string, PropID:string)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(ResID:half_path, PropID:string)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(ResID:string, PropID:half_path)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(ResID:half_path, PropID:half_path)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(Focus:half_path)<transacts> := effect{ FN := "Set", Focus := Focus }
set_effect<public> := class():
    Focus<public>:half_path
    Tweak<public>:half_path
    State<public>:scoped_state

    Affect<public>()<suspends>:?string=
        ResourceID := State.ToResourceID(Focus).Get()
        PropertyID := Focus.PropertyID? or ""
        PropType := State.GetPropType(ResourceID, PropertyID)

        case(PropType):
            prop_type.NumType =>
                Value := State.ToNum(Tweak).Get()
                State.ToNum(Focus).Set(Value)
            prop_type.StrType =>
                Value := State.ToStr(Tweak).Get()
                State.ToStr(Focus).Set(Value)
            prop_type.BoolType =>
                Value := State.ToBool(Tweak).Get()
                State.ToBool(Focus).Set(Value)
            prop_type.IntegerType =>
                Value := State.ToInt(Tweak).Get()
                State.ToInt(Focus).Set(Value)
            prop_type.AgentType =>
                Value := State.ToAgent(Tweak).Get()
                State.ToAgent(Focus).Set(Value)
            prop_type.FloatType =>
                Value := State.ToFloat(Tweak).Get()
                State.ToFloat(Focus).Set(Value)
            prop_type.Vec2Type =>
                Value := State.ToVec2(Tweak).Get()
                State.ToVec2(Focus).Set(Value)
            prop_type.Vec3Type =>
                Value := State.ToVec3(Tweak).Get()
                State.ToVec3(Focus).Set(Value)
            _ => {}

        return false
