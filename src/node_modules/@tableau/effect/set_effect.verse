
using. Goo

Set<public><constructor>(Focus:string)<transacts> := effect. Set<constructor>(Path(Focus))
Set<public><constructor>(ResID:string, PropID:string)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(ResID:half_path, PropID:string)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(ResID:string, PropID:half_path)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(ResID:half_path, PropID:half_path)<transacts> := effect. Set<constructor>(Path(ResID, PropID))
Set<public><constructor>(Focus:half_path)<transacts> := effect{ FN := "Set", Focus := Focus }

SetEffect<public>(Focus:half_path, Tweak:half_path, State:scoped_state)<suspends>:?string=
    PropType := State.GetPropType(Focus)
    case(PropType):
        prop_type.NumType =>
            Value := State.ToNum(Tweak).Get()
            State.SetNum(Focus, Value)
        prop_type.StrType =>
            Value := State.ToStr(Tweak).Get()
            State.SetStr(Focus, Value)
        prop_type.BoolType =>
            Value := State.ToBool(Tweak).Get()
            State.SetBool(Focus, Value)
        prop_type.IntegerType =>
            Value := State.ToInt(Tweak).Get()
            State.SetInt(Focus, Value)
        prop_type.AgentType =>
            Value := State.ToAgent(Tweak).Get()
            State.SetAgent(Focus, Value)
        prop_type.FloatType =>
            Value := State.ToFloat(Tweak).Get()
            State.SetFloat(Focus, Value)
        prop_type.Vec2Type =>
            Value := State.ToVec2(Tweak).Get()
            State.SetVec2(Focus, Value)
        prop_type.Vec3Type =>
            Value := State.ToVec3(Tweak).Get()
            State.SetVec3(Focus, Value)
        _ => {}

    return false
