
using. /Verse.org/Simulation

Log<public><constructor>(Focus:string)<transacts> := effect. Log<constructor>(Path(Focus))
Log<public><constructor>(ResID:string, PropID:string)<transacts> := effect. Log<constructor>(Path(ResID, PropID))
Log<public><constructor>(ResID:half_path, PropID:string)<transacts> := effect. Log<constructor>(Path(ResID, PropID))
Log<public><constructor>(ResID:string, PropID:half_path)<transacts> := effect. Log<constructor>(Path(ResID, PropID))
Log<public><constructor>(ResID:half_path, PropID:half_path)<transacts> := effect. Log<constructor>(Path(ResID, PropID))
Log<public><constructor>(Focus:half_path)<transacts> := effect{ FN := "Log", Focus := Focus }
log_effect<public> := class():
    Focus<public>:half_path
    State<public>:scoped_state
    Affect<public>()<suspends>:?string=
        Value := State.ToStr(Focus).Get()
        Print("[{State.Source}] {Value}")
        return false
