
using. Numb

Decrease<public><constructor>(Focus:string)<transacts> := effect. Decrease<constructor>(Path(Focus))
Decrease<public><constructor>(ResID:string, PropID:string)<transacts> := effect. Decrease<constructor>(Path(ResID, PropID))
Decrease<public><constructor>(ResID:half_path, PropID:string)<transacts> := effect. Decrease<constructor>(Path(ResID, PropID))
Decrease<public><constructor>(ResID:string, PropID:half_path)<transacts> := effect. Decrease<constructor>(Path(ResID, PropID))
Decrease<public><constructor>(ResID:half_path, PropID:half_path)<transacts> := effect. Decrease<constructor>(Path(ResID, PropID))
Decrease<public><constructor>(Focus:half_path)<transacts> := effect{ FN := "Decrease", Focus := Focus }

DecreaseEffect<public>(Focus:half_path, Tweak:half_path, State:scoped_state)<suspends>:?string=
    Prop := State.ToNum(Focus)
    StartingValue := Prop.Get()
    ModifierValue := State.ToNum(Tweak).Get()

    PropType := State.GetPropType(Focus)
    case(PropType):
        prop_type.NumType =>
            State.SetNum(Focus, StartingValue + (ModifierValue*-1))
        prop_type.FloatType =>
            State.SetFloat(Focus, NumToFloat(StartingValue + (ModifierValue*-1)))
        _ => {}
    return false
