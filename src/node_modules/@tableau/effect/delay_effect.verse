
using. /Verse.org/Simulation

DelayBy<public><constructor>(Focus:string)<transacts> := effect. DelayBy<constructor>(Path(Focus))
DelayBy<public><constructor>(ResID:string, PropID:string)<transacts> := effect. DelayBy<constructor>(Path(ResID, PropID))
DelayBy<public><constructor>(ResID:half_path, PropID:string)<transacts> := effect. DelayBy<constructor>(Path(ResID, PropID))
DelayBy<public><constructor>(ResID:string, PropID:half_path)<transacts> := effect. DelayBy<constructor>(Path(ResID, PropID))
DelayBy<public><constructor>(ResID:half_path, PropID:half_path)<transacts> := effect. DelayBy<constructor>(Path(ResID, PropID))
DelayBy<public><constructor>(Focus:half_path)<transacts> := effect{ FN := "Delay", Focus := Focus }

DelayEffect<public>(Focus:half_path, Tweak:half_path, State:scoped_state)<suspends>:?string=
    Sleep(State.ToFloat(Focus).Get())
    return false
