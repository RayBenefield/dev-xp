
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /Verse.org/Simulation/Tags }

using { Tableau }
using { TableauAgent }
using { TableauGenerator }

participant_board_tag := class(tag){}
participant_board_device<public> := class(creative_device, updatable):

    # Entity State Management
    @editable ParticipantID:int = 0
    var GeneratorRepository:?generator_repository = false
    var ParticipantRepository:?participant_repository = false

    # Device Properties
    @editable Board:billboard_device = billboard_device{}

    # Messages
    ParticipantLabel<localizes><private>(ID:int):message := "Participant ID: {ID}"
    GeneratorCount<localizes><private>(Count:int):message := "Generators: {Count}"
    ResourceCount<localizes><private>(Count:string):message := "Resources: {Count}"

    Subscriptions<override>()<transacts>:[]event_subscription = array:
        event_subscription:
            Entity := entity_participant{}
            EntityID := option. ParticipantID
    ClearState<override>():void= {}
    Update<override>()<suspends>:void=
        if:
            GenRepo := GeneratorRepository?
            Participant := ParticipantRepository?.GetByID[ParticipantID]
        then:
            Generators := GenRepo.GetOwnedGenerators(ParticipantID)
            var Text:message = ParticipantLabel(ParticipantID) + NL()
            set Text = Text + GeneratorCount(Generators.Length) + NL()
            set Text = Text + ResourceCount("{Participant.Resources}")
            Board.SetText(Text)

    Initialize<public>(
        GeneratorRepo:generator_repository,
        ParticipantRepo:participant_repository
    )<suspends>:void=
        set GeneratorRepository = option. GeneratorRepo
        set ParticipantRepository = option. ParticipantRepo
        spawn. FreshUpdate()

LoadParticipantBoardDevices<public>():[]participant_board_device=
    TaggedDevices := GetCreativeObjectsWithTag(participant_board_tag{})
    for(Index -> Tagged : TaggedDevices, Device := participant_board_device[Tagged]). Device
