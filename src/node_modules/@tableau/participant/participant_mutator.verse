using { Tableau }
using { TableauAgent }
using { TableauResource }

participant_mutator<public> := class(mutator):
    GameState<public>:game_state
    Repo<public>:participant_repository
    AgentRepository<public>:agent_repository
    ResourceRepository<public>:resource_repository

    ApplyEvents<override>(Events:[]domain_event):void=
        for(Ev:Events):
            case(Ev.Event.Name()):
                "Participant Added" => spawn. AddParticipant(Ev.EntityID)
                "Resource Added" => spawn. AddResource(Ev.EntityID)
                "Participant Possessed" => spawn. PossessParticipant(Ev.EntityID)
                # ev_resources_gained{}.Name() => {}
                "Resources Gained" => spawn. UpdateResource(Ev.EntityID, Ev.SubEntityID)
                _ => {}

    AddParticipant(ParticipantID:int)<suspends>:void=
        if (InitialParticipant := Repo.GetByID[ParticipantID]):
            Participant := GameState.AddParticipant(InitialParticipant)
            Resources := ResourceRepository.GetAll()
            for (Resource:Resources, Count := InitialParticipant.GetResource(Resource.ID)):
                Participant.AddResource(Resource.ID, Count)

    AddResource(ResourceID:int)<suspends>:void=
        for(Participant:GameState.Participants, Count := Repo.GetByID[Participant.ID].GetResource(ResourceID)):
            Participant.AddResource(ResourceID, Count)

    PossessParticipant(ParticipantID:int)<suspends>:void=
        Participant := GameState.AwaitParticipant(ParticipantID)
        Participant.Agent.Set(AgentRepository.GetAgent(ParticipantID))

    UpdateResource(ParticipantID:int, ResourceID:int)<suspends>:void=
        Participant := GameState.AwaitParticipant(ParticipantID)
        if:
            Count := Repo.GetByID[ParticipantID].GetResource(ResourceID)
            Resource := Participant.Resources[ResourceID]
        then:
            Resource.Set("{Count}")