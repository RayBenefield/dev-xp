
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }

using { Tableau }
using { TableauTesting }

participant_test := class(creative_device, test_suite):
    GetName<override>():string = "Participant"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should have default 0 resources"
            Test := DefaultResources
        test_case:
            Name := "Should handle adding zero resources"
            Test := AddZeroResources
        test_case:
            Name := "Should handle adding resources from zero"
            Test := AddResourcesOnZero
        test_case:
            Name := "Should handle adding resources"
            Test := AddResources

    DefaultResources():?failure =
        # Arrange
        Participant := participant{ ID := 13 }

        # Act, Assert
        if (not Participant.Resources.IsZero[]). return fail("Default resources are not zero")

        # Pass
        return false

    AddZeroResources():?failure =
        # Arrange
        Participant := participant{ ID := 13 }

        # Act
        Result := Participant.AddResources(num{})

        # Assert
        if (not Result.Resources.IsZero[]). return fail("Resources should still be zero")

        # Pass
        return false

    AddResourcesOnZero():?failure =
        # Arrange
        Participant := participant{ ID := 13 }
        AmountToAdd := num{ Value := 1.23, Exponent := 3 }

        # Act
        Result := Participant.AddResources(num{ Value := 1.23, Exponent := 3 })

        # Assert
        if (not Result.Resources.Equals[AmountToAdd]). return fail("Resources should be the same")

        # Pass
        return false

    AddResources():?failure =
        # Arrange
        InitialAmount := num{ Value := 1.23, Exponent := 3 }
        Participant := participant{ ID := 13, Resources := InitialAmount }
        AmountToAdd := num{ Value := 1.23, Exponent := 3 }
        ExpectedAmount := num{ Value := 2.46, Exponent := 3 }

        # Act
        Result := Participant.AddResources(AmountToAdd)

        # Assert
        if (not Result.Resources.Equals[ExpectedAmount]). return fail("Resources should be what we expect")

        # Pass
        return false
