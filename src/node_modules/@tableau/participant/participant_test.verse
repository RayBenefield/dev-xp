
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }

using { Tableau }
using { TableauTesting }

participant_test := class(creative_device, test_suite):
    GetName<override>():string = "Participant"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should have no resources"
            Test := DefaultResources
        test_case:
            Name := "Should handle adding zero resources"
            Test := AddZeroResources
        test_case:
            Name := "Should handle adding resources from zero"
            Test := AddResourcesOnZero
        test_case:
            Name := "Should handle adding resources"
            Test := AddResources
        test_case:
            Name := "Should return zero if no resources exist"
            Test := GetResourceZero
        test_case:
            Name := "Should return resources"
            Test := GetResource
        test_case:
            Name := "Should remove resources"
            Test := RemoveResources
        test_case:
            Name := "Should not remove zero resources"
            Test := DontRemoveZeroResources
        test_case:
            Name := "Should not remove resources if not enough"
            Test := DontRemoveNotEnoughResources

    DefaultResources():?failure =
        # Arrange
        Participant := participant{ ID := "13" }

        # Act, Assert
        if (not Participant.Resources.Length = 0). return fail("We shouldn't have resources")

        # Pass
        return false

    AddZeroResources():?failure =
        # Arrange
        Participant := participant{ ID := "13" }
        ResourceID := "26"

        # Act
        Result := Participant.AddResources(ResourceID, num{})

        # Assert
        if (not Result.GetResource(ResourceID).IsZero[]). return fail("Resources should not exist")

        # Pass
        return false

    AddResourcesOnZero():?failure =
        # Arrange
        Participant := participant{ ID := "13" }
        AmountToAdd := num{ Value := 1.23, Exponent := 3 }
        ResourceID := "26"

        # Act
        Result := Participant.AddResources(ResourceID, num{ Value := 1.23, Exponent := 3 })

        # Assert
        if (not Result.GetResource(ResourceID).Equals[AmountToAdd]). return fail("Resources should be the same")

        # Pass
        return false

    AddResources():?failure =
        # Arrange
        ResourceID := "26"
        InitialAmount := num{ Value := 1.23, Exponent := 3 }
        Participant := participant{ ID := "13", Resources := map{ ResourceID => InitialAmount } }
        AmountToAdd := num{ Value := 1.23, Exponent := 3 }
        ExpectedAmount := num{ Value := 2.46, Exponent := 3 }

        # Act
        Result := Participant.AddResources(ResourceID, AmountToAdd)

        # Assert
        if (not Result.GetResource(ResourceID).Equals[ExpectedAmount]). return fail("Resources should be what we expect")

        # Pass
        return false

    GetResourceZero():?failure =
        # Arrange
        ResourceID := "26"
        Participant := participant{ ID := "13" }

        # Act
        Result := Participant.GetResource(ResourceID)

        # Assert
        if (not Result.IsZero[]). return fail("Should have no resources")

        # Pass
        return false

    GetResource():?failure =
        # Arrange
        ResourceID := "26"
        InitialAmount := num{ Value := 1.23, Exponent := 3 }
        Participant := participant{ ID := "13", Resources := map{ ResourceID => InitialAmount } }

        # Act
        Result := Participant.GetResource(ResourceID)

        # Assert
        if (not Result.Equals[InitialAmount]). return fail("Should have the expected resources")

        # Pass
        return false

    RemoveResources():?failure =
        # Arrange
        ResourceID := "26"
        InitialAmount := num{ Value := 1.23, Exponent := 3 }
        Participant := participant{ ID := "13", Resources := map{ ResourceID => InitialAmount } }
        AmountToRemove := num{ Value := 2.3, Exponent := 2 }
        ExpectedAmount := num{ Value := 1.0, Exponent := 3 }

        # Act
        if (Result := Participant.RemoveResources[ResourceID, AmountToRemove]):
            # Assert
            if (not Result.GetResource(ResourceID).Equals[ExpectedAmount]). return fail("Resources should be what we expect")

        # Pass
        return false

    DontRemoveZeroResources():?failure =
        # Arrange
        ResourceID := "26"
        InitialAmount := num{ Value := 1.23, Exponent := 3 }
        Participant := participant{ ID := "13", Resources := map{ ResourceID => InitialAmount } }

        # Act
        if (Result := Participant.RemoveResources[ResourceID, num{}]):
            # Assert
            if (not Result.GetResource(ResourceID).Equals[InitialAmount]). return fail("Resources should be what we expect")

        # Pass
        return false

    DontRemoveNotEnoughResources():?failure =
        # Arrange
        ResourceID := "26"
        InitialAmount := num{ Value := 1.23, Exponent := 3 }
        Participant := participant{ ID := "13", Resources := map{ ResourceID => InitialAmount } }
        AmountToRemove := num{ Value := 2.3, Exponent := 3 }

        # Act, Assert
        if (Result := Participant.RemoveResources[ResourceID, AmountToRemove]):
            return fail("Resources should be what we expect")

        # Pass
        return false
