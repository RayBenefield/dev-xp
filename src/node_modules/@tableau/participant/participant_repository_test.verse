
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }

using { Tableau }
using { TableauTesting }

participant_repository_test := class(creative_device, test_suite):
    GetName<override>():string = "Participant Repository"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be fetchable by ID with initial data"
            Test := FetchWithInitial
        test_case:
            Name := "Should be fetchable by ID with Load"
            Test := FetchWithLoad
        test_case:
            Name := "Should clear existing when loading"
            Test := LoadShouldClearInitial
        test_case:
            Name := "Should be updated"
            Test := Update

    FetchWithInitial():?failure =
        # Arrange
        ID := 13
        Participant := participant. ID := ID
        Repo := participant_repository. Initial := array. Participant

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get participant")

        # Pass
        return false

    FetchWithLoad():?failure =
        # Arrange
        ID := 13
        Participant := participant. ID := ID
        Repo := participant_repository{}
        Repo.Load(array. Participant)

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get participant")

        # Pass
        return false

    LoadShouldClearInitial():?failure =
        # Arrange
        ID := 13
        Participant := participant. ID := 12
        NewParticipant := participant. ID := 13
        Repo := participant_repository. Initial := array. Participant
        Repo.Load(array. NewParticipant)

        # Act
        Participants := Repo.GetAll()

        # Assert
        if (not Participants.Length = 1). return fail("More than one participant was returned")
        if (not Participants[0].ID = ID). return fail("First participant isn't the right one")

        # Pass
        return false

    Update():?failure =
        # Arrange
        ID := 13
        Participant := participant{ ID := ID, Resources := num. Value := 1.23 }
        Repo := participant_repository. Initial := array. Participant
        NewParticipant := participant{ ID := ID, Resources := num. Value := 2.46 }

        # Act
        if (Part := Repo.Update[NewParticipant]):
            # Assert
            if (not Part.Resources.Equals[num. Value := 2.46]). return fail("Resources was not updated")
        else:
            return fail("Participant could not be updated")

        # Pass
        return false
