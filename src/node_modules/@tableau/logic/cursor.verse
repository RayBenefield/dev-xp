
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /UnrealEngine.com/Temporary/SpatialMath

grid_settings<public> := class<concrete>():
    @editable ID<public>:string = "Grid"
    @editable X<public>:int = 0
    @editable Y<public>:int = 0
    @editable MinX<public>:?int = false
    @editable MaxX<public>:?int = false
    @editable MinY<public>:?int = false
    @editable MaxY<public>:?int = false

CreateGridResource<public><constructor>(C:grid_settings) := resource:
    ID := C.ID
    Props := map:
        "X" => Integer of C.X
        "X Neg" => Integer of (Path("X"), "Negate")
        "Y" => Integer of C.Y
        "Y Neg" => Integer of (Path("Y"), "Negate")
        "Min X" => Integer of C.MinX? or 0
        "Max X" => Integer of C.MaxX? or 0
        "Min Y" => Integer of C.MinY? or 0
        "Max Y" => Integer of C.MaxY? or 0
        "Has Min X" => Bool of if(C.MinX?). true else. false
        "Has Max X" => Bool of if(C.MaxX?). true else. false
        "Has Min Y" => Bool of if(C.MinY?). true else. false
        "Has Max Y" => Bool of if(C.MaxY?). true else. false
        "At Min X" => Bool of (Path("X"), "Int <=", Path("Min X"))
        "At Max X" => Bool of (Path("X"), "Int >=", Path("Max X"))
        "At Min Y" => Bool of (Path("Y"), "Int <=", Path("Min Y"))
        "At Max Y" => Bool of (Path("Y"), "Int >=", Path("Max Y"))
        "Block Min X" => Bool of (Path("Has Min X"), "AND", Path("At Min X"))
        "Block Max X" => Bool of (Path("Has Max X"), "AND", Path("At Max X"))
        "Block Min Y" => Bool of (Path("Has Min Y"), "AND", Path("At Min Y"))
        "Block Max Y" => Bool of (Path("Has Max Y"), "AND", Path("At Max Y"))
        "+X" => Integer of (Path("X"), "+", ONE())
        "-X" => Integer of (Path("X"), "-", ONE())
        "+Y" => Integer of (Path("Y"), "+", ONE())
        "-Y" => Integer of (Path("Y"), "-", ONE())
        "Row Offset" => Integer of (Path("Y"), "-", ONE())
        "Row Start" => Integer of (Path("Row Offset"), "*", Path("Max X"))
        "Selection Number" => Integer of (Path("Row Start"), "+", Path("X"))
        "Partial ID" => Str of (Path("X"), "Append", COMMA())
        "Location ID" => Str of (Path("Partial ID"), "Append", Path("Y"))
    Actions := map:
        "Decrease X" => Action of array:
            IsFalse("Block Min X")
            Set("X").To("-X")
        "Increase X" => Action of array:
            IsFalse("Block Max X")
            Set("X").To("+X")
        "Increase Y" => Action of array:
            IsFalse("Block Max Y")
            Set("Y").To("+Y")
        "Decrease Y" => Action of array:
            IsFalse("Block Min Y")
            Set("Y").To("-Y")

GetAxis(Parent:string, C:coords):half_path = case(C):
    coords.X => Path(Parent, "X")
    coords.XNeg => Path(Parent, "X Neg")
    coords.Y => Path(Parent, "Y")
    coords.YNeg => Path(Parent, "Y Neg")
    coords.Z => Path(Parent, "Z")
    coords.ZNeg => Path(Parent, "Z Neg")
    coords.Neither => ZERO()

coords<public> := enum{ X, Y, Z, XNeg, YNeg, ZNeg, Neither }
cursor_settings<public> := class<concrete>():
    @editable ID<public>:string = "Cursor"
    @editable Prop<public>:?creative_prop = false
    @editable XScale<public>:float = 512.0
    @editable YScale<public>:float = 512.0
    @editable ZScale<public>:float = 384.0
    @editable XSource<public>:string = "Grid"
    @editable YSource<public>:string = "Grid"
    @editable ZSource<public>:string = "Grid"
    @editable XAxis<public>:coords = coords.X
    @editable YAxis<public>:coords = coords.Y
    @editable ZAxis<public>:coords = coords.Neither

CreateCursorResource<public><constructor>(C:cursor_settings) := resource:
    ID := C.ID
    Props := map:
        "X Scale" => Float of C.XScale
        "Y Scale" => Float of C.YScale
        "Z Scale" => Float of C.ZScale
        "X" => Integer of GetAxis(C.XSource, C.XAxis)
        "Y" => Integer of GetAxis(C.YSource, C.YAxis)
        "Z" => Integer of GetAxis(C.ZSource, C.ZAxis)
        "X Coord" => Float of (Path("X"), "*", Path("X Scale"))
        "Y Coord" => Float of (Path("Y"), "*", Path("Y Scale"))
        "Z Coord" => Float of (Path("Z"), "*", Path("Z Scale"))
        "XY Location" => Vec2 of (Path("X Coord"), "Append", Path("Y Coord") )
        "Without Offset" => Vec3 of (Path("XY Location"), "Append", Path("Z Coord") )
        "Offset" => Vec3 of if (P := C.Prop?). P.GetTransform().Translation else. vector3{}
        "Location" => Vec3 of (Path("Without Offset"), "+", Path("Offset") )
