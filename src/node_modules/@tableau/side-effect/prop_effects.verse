
using. /Verse.org/Assets
using. /Fortnite.com/Devices
using. /UnrealEngine.com/Temporary/SpatialMath
using. /Fortnite.com/Devices/CreativeAnimation
using. /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes

using. Anima
using. Vertex

Toggle<public><constructor>(Prop:?creative_prop)<transacts> := toggle_prop. Prop := Prop
toggle_prop<public> := class():
    Prop<public>:?creative_prop = false
    FN<public>(Value:logic):void= if (P := Prop?):
        if (Value?). P.Show() else. P.Hide()

Move<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := move_prop{ Prop := Prop, Time := Time }
Move<public><constructor>(Prop:?creative_prop, Time:float, Offset:vector3)<transacts> := move_prop{ Prop := Prop, Time := Time, Offset := Offset }
move_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    Offset<public>:vector3 = vector3{}
    Easing<public>:cubic_bezier_parameters = EaseIn
    FN<public>(Value:vector3)<suspends>:void= OneShot(Prop, Frame(MoveTo(Value + Offset)).SetTime(Time).SetEasing(EaseIn))

MoveX<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := move_x_prop{ Prop := Prop, Time := Time }
move_x_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    FN<public>(Value:float)<suspends>:void= OneShot(Prop, Frame(MoveXTo(Value)).SetTime(Time))

MoveY<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := move_y_prop{ Prop := Prop, Time := Time }
move_y_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    FN<public>(Value:float)<suspends>:void= OneShot(Prop, Frame(MoveYTo(Value)).SetTime(Time))

MoveZ<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := move_z_prop{ Prop := Prop, Time := Time }
move_z_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    FN<public>(Value:float)<suspends>:void= OneShot(Prop, Frame(MoveZTo(Value)).SetTime(Time))

Rotate<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := rotate_prop{ Prop := Prop, Time := Time }
rotate_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    FN<public>(Value:vector3)<suspends>:void= if (P := Prop?):
        P.MoveTo(P.GetTransform().Translation, R3(Value), Time)

RotateYaw<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := rotate_yaw_prop{ Prop := Prop, Time := Time }
rotate_yaw_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    FN<public>(Value:float)<suspends>:void= OneShot(Prop, Frame(RotateYawTo(Value)).SetTime(Time))

RotatePitch<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := rotate_pitch_prop{ Prop := Prop, Time := Time }
rotate_pitch_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    FN<public>(Value:float)<suspends>:void= OneShot(Prop, Frame(RotatePitchTo(Value)).SetTime(Time))

RotateRoll<public><constructor>(Prop:?creative_prop, Time:float)<transacts> := rotate_roll_prop{ Prop := Prop, Time := Time }
rotate_roll_prop<public> := class():
    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0
    FN<public>(Value:float)<suspends>:void= OneShot(Prop, Frame(RotateRollTo(Value)).SetTime(Time))

SetLocation<public><constructor>(Prop:?creative_prop)<transacts> := set_location_fn. Prop := Prop
set_location_fn<public> := class():
    Prop<public>:?creative_prop
    FN<public>(Value:vector3):void= if (P := Prop?):
        if. P.TeleportTo[Value, P.GetTransform().Rotation]

SetYaw<public><constructor>(Prop:?creative_prop)<transacts> := set_yaw_fn. Prop := Prop
set_yaw_fn<public> := class():
    Prop<public>:?creative_prop
    FN<public>(Value:float):void= if (P := Prop?):
        if. P.TeleportTo[P.GetTransform().Translation, R3Yaw(Value)]

SetScaleY<public><constructor>(Prop:?creative_prop)<transacts> := set_scale_y_fn. Prop := Prop
set_scale_y_fn<public> := class():
    Prop<public>:?creative_prop
    Offset<public>:float = 0.001
    FN<public>(Value:float):void= OneShot(Prop, Frame(ScaleYTo(Value + Offset)).SetTime(0.0))

anim_creator_bool := type{_(:logic):[]frame}
anim_creator_float := type{_(:float):[]frame}
UpdateAnimWithBool<public><constructor>(Prop:?creative_prop, AnimCreator:anim_creator_bool)<transacts> := update_anim_bool_fn{ Prop := Prop, AnimCreator := AnimCreator }
UpdateAnimWithFloat<public><constructor>(Prop:?creative_prop, AnimCreator:anim_creator_float)<transacts> := update_anim_float_fn{ Prop := Prop, AnimCreator := AnimCreator }
update_anim_bool_fn<public> := class():
    Prop<public>:?creative_prop
    AnimCreator<public>:anim_creator_bool
    FN<public>(Value:logic):void= OneShot(Prop, AnimCreator(Value))
update_anim_float_fn<public> := class():
    Prop<public>:?creative_prop
    AnimCreator<public>:anim_creator_float
    FN<public>(Value:float):void= OneShot(Prop, AnimCreator(Value))

PlayAnim<public><constructor>(Prop:?creative_prop)<transacts> := play_anim_fn. Prop := Prop
play_anim_fn<public> := class():
    Prop<public>:?creative_prop = false
    FN<public>():void= if (P := Prop?, A := P.GetAnimationController[]). A.Play()

SetMesh<public><constructor>(Prop:?creative_prop, MeshMap:[string]mesh)<transacts> := set_mesh_fn{ Prop := Prop, MeshMap := MeshMap }
set_mesh_fn<public> := class():
    Prop<public>:?creative_prop
    MeshMap<public>:[string]mesh
    FN<public>(Value:string):void= if (P := Prop?, Mesh := MeshMap[Value]). P.SetMesh(Mesh)

ToggleMaterial<public><constructor>(Prop:?creative_prop, True:material, False:material)<transacts> := toggle_material_fn{ Prop := Prop, True := True, False := False }
toggle_material_fn<public> := class():
    Prop<public>:?creative_prop = false
    True<public>:material
    False<public>:material
    FN<public>(Value:logic)<suspends>:void= if (P := Prop?):
        if (Value?). P.SetMaterial(True) else. P.SetMaterial(False)
