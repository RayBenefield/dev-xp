
using. /Verse.org/Assets
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Verse.org/Concurrency
using. /UnrealEngine.com/Assets
using. /Verse.org/Simulation/Tags
using. /UnrealEngine.com/Temporary/UI
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Banding
using. Numb
using. Vertex

tap := type{_()<suspends>:void}
context_tap := type{_(Context:context)<suspends>:void}
str_tap := type{_(:string)<suspends>:void}
int_tap := type{_(:int)<suspends>:void}
bool_tap := type{_(:logic)<suspends>:void}
float_tap := type{_(:float)<suspends>:void}
msg_tap := type{_(:message)<suspends>:void}
agent_tap := type{_(:?agent)<suspends>:void}
vec3_tap := type{_(:vector3)<suspends>:void}

side_effect<public> := interface(). PropertyID<public>:string

SyncFloat<public><constructor>(PropertyID:string, From:event(float))<transacts> := sync_float_side_effect{ PropertyID := PropertyID, From := From }
sync_float_side_effect<public> := class(side_effect). From<public>:event(float)

StartWith<public><constructor>(FN:context_tap)<transacts> := first_pipe{ PropertyID := "", FN := FN }
first_pipe<public> := class(side_effect). FN<public>:context_tap

IsSetup(Effect:side_effect)<decides><transacts>:void= not first_pipe[Effect]

Attach<public><constructor>(ActionID:string, Event:awaitable(t) where t:type)<transacts> := action_pipe{ PropertyID := ActionID, Event := Event }
action_pipe<public> := class(side_effect). Event<public>:awaitable()

AttachWithArg<public><constructor>(ActionID:string, Event:awaitable(prop_path))<transacts> := arg_action_pipe{ PropertyID := ActionID, Event := Event }
arg_action_pipe<public> := class(side_effect). Event<public>:awaitable(prop_path)

Generate<public><constructor>(Event:awaitable(resource))<transacts> := generate_pipe{ PropertyID := "", Event := Event }
generate_pipe<public> := class(side_effect). Event<public>:awaitable(resource)

Push<public><constructor>(PropertyID:string, FN:tap)<transacts> := tap_pipe{ PropertyID := PropertyID, FN := FN }
tap_pipe<public> := class(side_effect). FN<public>:tap

PushStr<public><constructor>(PropertyID:string, FN:str_tap)<transacts> := str_pipe{ PropertyID := PropertyID, FN := FN }
str_pipe<public> := class(side_effect). FN<public>:str_tap

PushBool<public><constructor>(PropertyID:string, FN:bool_tap)<transacts> := bool_pipe{ PropertyID := PropertyID, FN := FN }
bool_pipe<public> := class(side_effect). FN<public>:bool_tap

PushFloat<public><constructor>(PropertyID:string, FN:float_tap)<transacts> := float_pipe{ PropertyID := PropertyID, FN := FN }
float_pipe<public> := class(side_effect). FN<public>:float_tap

PushInt<public><constructor>(PropertyID:string, FN:int_tap)<transacts> := int_pipe{ PropertyID := PropertyID, FN := FN }
int_pipe<public> := class(side_effect). FN<public>:int_tap

PushAgent<public><constructor>(PropertyID:string, FN:agent_tap)<transacts> := agent_pipe{ PropertyID := PropertyID, FN := FN }
agent_pipe<public> := class(side_effect). FN<public>:agent_tap

PushVec3<public><constructor>(PropertyID:string, FN:vec3_tap)<transacts> := vec3_pipe{ PropertyID := PropertyID, FN := FN }
vec3_pipe<public> := class(side_effect). FN<public>:vec3_tap

PushMsg<public><constructor>(PropertyID:string, To:msg_tap)<transacts> := msg_pipe{ PropertyID := PropertyID, To := To }
msg_pipe<public> := class(side_effect):
    To<public>:msg_tap
    FN<public>(Value:string)<suspends>:void= To(Str2Msg(Value))

Debug<public><constructor>(PropertyID:string, ResourceID:string, SubID:string)<transacts> := debug_pipe{ PropertyID := PropertyID, ResourceID := ResourceID, SubID := SubID }
debug_pipe<public> := class(side_effect):
    ResourceID<public>:string
    SubID<public>:string
    FN<public>(Value:string)<suspends>:void=
        FinalLabel := "[{ResourceID}.{PropertyID}@{SubID}]"
        FinalValue := if(Value <> ""). Value else. "<EMPTY>"
        Print("{FinalLabel} {FinalValue}")

BindWidget<public><constructor>(Widget:widget, Position:canvas_settings)<transacts> := widget_binding{ PropertyID := "", Widget := Widget, Position := Position }
widget_binding<public> := class(side_effect):
    Widget<public>:widget
    Position<public>:canvas_settings

<#>
    New Side Effects that are subclasses

SpawnVFX<public><constructor>(VFX:?particle_system, Location:vector3)<transacts> := spawn_vfx_fn{ VFX := VFX, Location := Location }
spawn_vfx_fn<public> := class():
    VFX<public>:?particle_system = false
    Location<public>:vector3 = vector3{}
    FN<public>()<suspends>:void= if (V := VFX?). SpawnParticleSystem(V, Location)

tex_tap := type{_(:texture):void}
SetTexture<public><constructor>(Setter:tex_tap, TexMap:[string]texture)<transacts> := set_texture_fn{ Setter := Setter, TexMap := TexMap }
SetTexture<public><constructor>(Setter:tex_tap, TexMap:[string]texture, Default:texture)<transacts> := set_texture_fn{ Setter := Setter, TexMap := TexMap, Default := option. Default }
set_texture_fn<public> := class():
    Setter<public>:tex_tap
    TexMap<public>:[string]texture
    Default<public>:?texture = false
    FN<public>(Key:string)<suspends>:void= if(Texture := TexMap[Key] or Default?). Setter(Texture)

SetScalar<public><constructor>(Setter:float_tap)<transacts> := set_scalar_fn. Setter := Setter
set_scalar_fn<public> := class():
    Setter<public>:float_tap
    FN<public>(Value:float)<suspends>:void= Setter(Value)

SetText<public><constructor>(Text:text_base)<transacts> := set_text. Text := Text
set_text<public> := class():
    Text<public>:text_base
    FN<public>(Value:message):void= Text.SetText(Value)

SetText<public><constructor>(Billboard:billboard_device)<transacts> := set_billboard_text. Billboard := Billboard
set_billboard_text<public> := class():
    Billboard<public>:billboard_device
    FN<public>(Value:message):void= Billboard.SetText(Value)

SetVisibility<public><constructor>(Widget:widget)<transacts> := set_visibility. Widget:= Widget
set_visibility<public> := class():
    Widget<public>:widget
    FN<public>(Value:logic):void=
        Visibility := if (Value?). widget_visibility.Visible else. widget_visibility.Collapsed
        Widget.SetVisibility(Visibility)

SetEnabled<public><constructor>(Widget:widget)<transacts> := set_enabled. Widget:= Widget
set_enabled<public> := class():
    Widget<public>:widget
    FN<public>(Value:logic):void= Widget.SetEnabled(Value)
