
using. Goo

effector := type{_(:half_path, :half_path, :scoped_state)<suspends>:?string}

effector_fn<public> := class:
    Focus<public>:half_path
    Tweak<public>:half_path
    State<public>:scoped_state
    Effector<public>:effector
    FN<public>(ActionTweak:prop_path)<suspends>:?string=
        FinalFocus := if(Focus.ResourceID? = "_ACTION_", Focus.PropertyID? = "_TWEAK_"). ActionTweak.ToPath() else. Focus
        FinalTweak := if(Tweak.ResourceID? = "_ACTION_", Tweak.PropertyID? = "_TWEAK_"). ActionTweak.ToPath() else. Tweak
        Effector(FinalFocus, FinalTweak, State)

Action<public><constructor>(PropPath:half_path)<transacts> := action. Effects := array. Execute(PropPath)
Action<public><constructor>(PropPath:prop_path)<transacts> := action. Effects := array. Execute(PropPath.ToPath())
Action<public><constructor>(ResID:string, PropID:string)<transacts> := action. Effects := array. Execute(ResID, PropID)
Action<public><constructor>(ResPath:half_path, PropID:string)<transacts> := action. Effects := array. Execute(ResPath, PropID)
Action<public><constructor>(Effect:effect)<transacts> := action. Effects := array. Effect
Action<public><constructor>(Effects:[]effect)<transacts> := action. Effects := Effects
EmptyAction<public><constructor>()<transacts> := action{}

action<public> := class():
    Effects<public>:[]effect = array{}
    Effectors<public>:[string]effector = map:
        "Execute Action" => ExecuteEffect
        "Set" => SetEffect
        "Is True" => IsTrueEffect
        "Is False" => IsFalseEffect
        "Delay" => DelayEffect
        "Increase" => IncreaseEffect
        "Decrease" => DecreaseEffect
        "Log" => LogEffect
        "Remove" => RemoveEffect
        "Remove Item" => RemoveItemEffect
        "Insert" => InsertEffect
        "Insert Random" => InsertRandomEffect

    ActionFor<public>(State:scoped_state):event_goo=
        ActionGoo := EventGoo()
        var Stream:event_goo = ActionGoo
        for(Effect:Effects):
            if (E := Effectors[Effect.FN]):
                Eff := effector_fn{ Focus := Effect.Focus, Tweak := Effect.Tweak, State := State, Effector := E }
                set Stream = EventGoo(Affect(Stream, Eff.FN))
            else:
                Print("{Effect.FN} is unsupported")
        ActionGoo
