
using. /Verse.org/Simulation

using. Goo
using. Numb

IntToNum(Value:int)<transacts>:num= num. Value := Value*1.0
FloatToNum(Value:float)<transacts>:num= num. Value := Value
NumPower(First:num, Second:float)<transacts>:num= First.Pow(Second)
NumMultiply(First:num, Second:num)<transacts>:num= First * Second

Num<public><constructor>(Default:float)<transacts> := prop_num. Default := num. Value := Default
Num<public><constructor>(Default:num)<transacts> := prop_num. Default := Default
Num<public><constructor>(Focus:half_path)<transacts> := prop_num. Focus := Focus
Num<public><constructor>(Focus:prop_path)<transacts> := prop_num. Focus := Focus.ToPath()
Num<public><constructor>(Focus:half_path, FN:string)<transacts> := prop_num{ Focus := Focus, FN := FN }
Num<public><constructor>(FN:string, Focus:half_path)<transacts> := prop_num{ Focus := Focus, FN := FN }
Num<public><constructor>(Focus:half_path, FN:string, Tweak:half_path)<transacts> := prop_num{ Focus := Focus, FN := FN, Tweak := Tweak }
Num<public><constructor>(Focus:prop_path, FN:string, Tweak:prop_path)<transacts> := prop_num{ Focus := Focus.ToPath(), FN := FN, Tweak := Tweak.ToPath() }
MaybeNum<public><constructor>(Focus:?prop_path)<transacts> := prop_num. Focus := Focus?.ToPath() or EmptyPath()

num_plug<public> := class<concrete>():
    @editable Default:num = num{}
    @editable Source:?prop_path = false
Num<public>(Plug:num_plug)<transacts>:prop_num := (Num of Plug.Source?) or (Num of Plug.Default)

PropNum<public><constructor>(ResourceID:string, PropertyID:string, Type:prop_type)<transacts> := prop_num{ Focus := Path(ResourceID, PropertyID), Type := Type }
prop_num<public> := class<concrete>(prop):
    @editable Type<override>:prop_type = prop_type.NumType
    @editable Default<public>:num = num{}
    ValueFor<public>(State:scoped_state):num_goo= case(FN):
        "Multiply" => NumGoo(Computed(State.ToNum(Focus), State.ToNum(Tweak), NumMultiply))
        "Power" => NumGoo(Computed(State.ToNum(Focus), State.ToFloat(Tweak), NumPower))
        "Reverse Power" => NumGoo(Computed(State.ToNum(Tweak), State.ToFloat(Focus), NumPower))
        _ => case(Type):
            prop_type.FloatType => NumGoo(Map(State.ToFloat(Focus), FloatToNum))
            prop_type.IntegerType => NumGoo(Map(State.ToInt(Focus), IntToNum))
            _ => if (not Focus.Empty[]). State.ToNum(Focus)
            else. NumGoo(Default)
