using. /Verse.org/Simulation

using. Numb
using. Tableau

CopyResource<constructor>(Old:resource)<transacts> := resource:
    ID := Old.ID
    Type := Old.Type
    Props := Old.Props
    Abilities:= Old.Abilities
    PropNums := Old.PropNums
    PropStrs := Old.PropStrs
    PropFloats := Old.PropFloats
    PropBools := Old.PropBools
    PropAgents := Old.PropAgents

CreateFromTemplate<public><constructor>(ID:string, Template:resource)<transacts> := resource:
    ID := ID
    Type := Template.Type
    Props := Template.Props
    Abilities:= Template.Abilities

props<public> := class<concrete>:
    Per<public>:[string]prop = map{}
    Computed<public>:[string]prop = map{}

resource<public> := class<unique><concrete>():
    @editable ID<public>:string = ""
    @editable Type<public>:string = ""
    Props<public>:props = props{}
    Abilities<public>:[string][]effect = map{}
    var PropNums<public>:[string][string]num = map{}
    var PropStrs<public>:[string][string]string = map{}
    var PropFloats<public>:[string][string]float = map{}
    var PropBools<public>:[string][string]logic = map{}
    var PropAgents<public>:[string][string]?agent = map{}

    SetNumProperty<public>(PropertyID:string, PlayerID:string, Value:num)<decides><transacts>:resource=
        var NewValues:[string][string]num = Self.PropNums
        if (not NewValues[PropertyID]):
            var NewProperty:[string]num = map{}
            if:
                set NewProperty[PlayerID] = Value
                set NewValues[PropertyID] = NewProperty
        else:
            if (set NewValues[PropertyID][PlayerID] = Value) {}

        return resource:
            CopyResource<constructor>(Self)
            PropNums := NewValues

    SetStrProperty<public>(PropertyID:string, PlayerID:string, Value:string)<decides><transacts>:resource=
        var NewValues:[string][string]string = Self.PropStrs
        if (not NewValues[PropertyID]):
            var NewProperty:[string]string = map{}
            if:
                set NewProperty[PlayerID] = Value
                set NewValues[PropertyID] = NewProperty
        else:
            if (set NewValues[PropertyID][PlayerID] = Value) {}

        return resource:
            CopyResource<constructor>(Self)
            PropStrs := NewValues

    SetFloatProperty<public>(PropertyID:string, PlayerID:string, Value:float)<decides><transacts>:resource=
        var NewValues:[string][string]float = Self.PropFloats
        if (not NewValues[PropertyID]):
            var NewProperty:[string]float = map{}
            if:
                set NewProperty[PlayerID] = Value
                set NewValues[PropertyID] = NewProperty
        else:
            if (set NewValues[PropertyID][PlayerID] = Value) {}

        return resource:
            CopyResource<constructor>(Self)
            PropFloats := NewValues

    SetBoolProperty<public>(PropertyID:string, PlayerID:string, Value:logic)<decides><transacts>:resource=
        var NewValues:[string][string]logic = Self.PropBools
        if (not NewValues[PropertyID]):
            var NewProperty:[string]logic = map{}
            if:
                set NewProperty[PlayerID] = Value
                set NewValues[PropertyID] = NewProperty
        else:
            if (set NewValues[PropertyID][PlayerID] = Value) {}

        return resource:
            CopyResource<constructor>(Self)
            PropBools := NewValues

    SetAgentProperty<public>(PropertyID:string, PlayerID:string, Value:?agent)<decides><transacts>:resource=
        var NewValues:[string][string]?agent = Self.PropAgents
        if (not NewValues[PropertyID]):
            var NewProperty:[string]?agent = map{}
            if:
                set NewProperty[PlayerID] = Value
                set NewValues[PropertyID] = NewProperty
        else:
            if (set NewValues[PropertyID][PlayerID] = Value) {}

        return resource:
            CopyResource<constructor>(Self)
            PropAgents := NewValues
