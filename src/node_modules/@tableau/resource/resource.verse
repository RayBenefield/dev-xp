using. /Verse.org/Simulation

using. Numb

CreateFromTemplate<public><constructor>(ID:string, Template:resource)<transacts> := resource:
    ID := ID
    Type := Template.Type
    Props := Template.Props
    Abilities:= Template.Abilities

AddProps<public><constructor>(Old:resource, NewProps:[string]prop)<transacts> := resource:
    ID := Old.ID
    Type := Old.Type
    Props := ConcatenateMaps(Old.Props, NewProps)
    Abilities:= Old.Abilities

resource<public> := class<unique><concrete>():
    @editable ID<public>:string = ""
    @editable Type<public>:string = ""
    Props<public>:[string]prop = map{}
    Abilities<public>:[string]action = map{}

    GetPropType<public>(PropID:string)<transacts>:prop_type= Props[PropID].Type or prop_type.Unknown

    GetAction<public>(PropID:string):action = Abilities[PropID] or action{}
    GetBool<public>(PropID:string):prop_bool =
        if (not Props[PropID]). return prop_bool{}
        prop_bool[Props[PropID]] or PropBool(ID, PropID, GetPropType(PropID))
    GetInt<public>(PropID:string):prop_int =
        if (not Props[PropID]). return prop_int{}
        prop_int[Props[PropID]] or PropInt(ID, PropID, GetPropType(PropID))
    GetFloat<public>(PropID:string):prop_float =
        if (not Props[PropID]). return prop_float{}
        prop_float[Props[PropID]] or PropFloat(ID, PropID, GetPropType(PropID))
    GetNum<public>(PropID:string):prop_num =
        if (not Props[PropID]). return prop_num{}
        prop_num[Props[PropID]] or PropNum(ID, PropID, GetPropType(PropID))
    GetStr<public>(PropID:string):prop_str =
        if (not Props[PropID]). return prop_str{}
        prop_str[Props[PropID]] or PropStr(ID, PropID, GetPropType(PropID))
    GetStrs<public>(PropID:string):prop_strs =
        if (not Props[PropID]). return prop_strs{}
        prop_strs[Props[PropID]] or PropStrs(ID, PropID, GetPropType(PropID))
    GetAgent<public>(PropID:string):prop_agent =
        if (not Props[PropID]). return prop_agent{}
        prop_agent[Props[PropID]] or PropAgent(ID, PropID, GetPropType(PropID))
    GetVec2<public>(PropID:string):prop_vec2 =
        if (not Props[PropID]). return prop_vec2{}
        prop_vec2[Props[PropID]] or PropVec2(ID, PropID, GetPropType(PropID))
    GetVec3<public>(PropID:string):prop_vec3 =
        if (not Props[PropID]). return prop_vec3{}
        prop_vec3[Props[PropID]] or PropVec3(ID, PropID, GetPropType(PropID))
