using. /Verse.org/Simulation

using. Banding
using. Numb
using. Vertex

MergeResources<public><constructor>(Old:resource, New:resource)<transacts> := resource:
    ID := (Old.ID <> "") or New.ID
    Type := (Old.Type <> "") or New.Type
    Props := ConcatenateMaps(Old.Props, New.Props)
    Actions:= ConcatenateMaps(Old.Actions, New.Actions)
MergeToResourceMap<public>(Entry:tuple(t,resource), OldMap:[t]resource where t:subtype(comparable))<transacts>:[t]resource=
    NewValue := if(Old := OldMap[Entry(0)]). MergeResources(Old, Entry(1)) else. Entry(1)
    ConcatenateMaps(OldMap, map{ Entry(0) => NewValue })
CreateResourceMap<public>(Mappable:[]tuple(t, resource) where t:subtype(comparable)):[t]resource=
    Mappable.Reduce(MergeToResourceMap, map{})
ConcatenateResourceMaps<public>(Old:[string]resource, New:[string]resource):[string]resource=
    var AllKeys:[]string = Old.Keys()
    for(K:New.Keys()). if(not AllKeys.Find[K]). set AllKeys += array. K
    var Final:[string]resource = map{}
    for(K:AllKeys):
        if(O := Old[K], N := New[K]). option. set Final[K] = MergeResources(O, N)
        else if(O := Old[K]). option. set Final[K] = O
        else if(N := New[K]). option. set Final[K] = N
        else. Print("HOW!?!?!")
    Final

Copy<constructor>(Old:resource)<transacts> := resource:
    ID := Old.ID
    Type := Old.Type
    Static := Old.Static
    Props := Old.Props
    Actions:= Old.Actions

CreateFromTemplate<public><constructor>(ID:string, Template:resource)<transacts> := resource:
    Copy<constructor>(Template)
    ID := ID

MakeStatic<public><constructor>(Resource:resource)<transacts> := resource:
    Copy<constructor>(Resource)
    Static := true

AddProps<public><constructor>(Old:resource, NewProps:[string]prop)<transacts> := resource:
    Copy<constructor>(Old)
    Props := ConcatenateMaps(Old.Props, NewProps)

resource<public> := class<unique><concrete>():
    @editable ID<public>:string = ""
    @editable Type<public>:string = ""
    @editable Static<public>:logic = false
    Props<public>:[string]prop = map{}
    Actions<public>:[string]action = map{}

    GetPropType<public>(PropID:string)<transacts>:prop_type=
        Props[PropID].Type or (Actions[PropID] and prop_type.ActionType) or prop_type.UnknownType

    GetAction<public>(PropID:string):action = Actions[PropID] or action{}
    GetBool<public>(PropID:string):prop_bool =
        if (not Props[PropID]). return Bool of false
        prop_bool[Props[PropID]] or PropBool(ID, PropID, GetPropType(PropID))
    GetInt<public>(PropID:string):prop_int =
        if (not Props[PropID]). return Integer of 0
        prop_int[Props[PropID]] or PropInt(ID, PropID, GetPropType(PropID))
    GetFloat<public>(PropID:string):prop_float =
        if (not Props[PropID]). return Float of 0.0
        prop_float[Props[PropID]] or PropFloat(ID, PropID, GetPropType(PropID))
    GetNum<public>(PropID:string):prop_num =
        if (not Props[PropID]). return Num of 0.0
        prop_num[Props[PropID]] or PropNum(ID, PropID, GetPropType(PropID))
    GetStr<public>(PropID:string):prop_str =
        if (not Props[PropID]). return Str of ""
        prop_str[Props[PropID]] or PropStr(ID, PropID, GetPropType(PropID))
    GetStrs<public>(PropID:string):prop_strs =
        if (not Props[PropID]). return Strs of array{}
        prop_strs[Props[PropID]] or PropStrs(ID, PropID, GetPropType(PropID))
    GetAgent<public>(PropID:string):prop_agent =
        if (not Props[PropID]). return UEAgent of option. agent[BLANK{}]
        prop_agent[Props[PropID]] or PropAgent(ID, PropID, GetPropType(PropID))
    GetVec2<public>(PropID:string):prop_vec2 =
        if (not Props[PropID]). return Vec2 of V2()
        prop_vec2[Props[PropID]] or PropVec2(ID, PropID, GetPropType(PropID))
    GetVec3<public>(PropID:string):prop_vec3 =
        if (not Props[PropID]). return Vec3 of V3()
        prop_vec3[Props[PropID]] or PropVec3(ID, PropID, GetPropType(PropID))

ToString<public>(Resource:resource):string=
    Tab("RESOURCE [{Resource.ID}]({Resource.Type})") +
        WithIndent("Static: {if(Resource.Static?). "True" else. "False"}") +
        Tab("Props:") +
            IndentedKeys(Resource.Props) +
            EndTab() +
        Tab("Actions:") +
            IndentedKeys(Resource.Actions) +
            EndTab() +
    EndTab()
