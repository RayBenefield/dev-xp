
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/Diagnostics
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Numb
using. Tableau
using. TableauEffect
using. Vertex

resource_vm<public> := class():
    State<public>:game_state
    Resource<public>:resource
    var Abilities<public>:[string]action_maker = map{}

    Init<public>():void =
        for (AbilityID->Effects:Resource.Abilities):
            if. set Abilities[AbilityID] = action_maker:
                State := State
                ResourceID := Resource.ID
                AbilityID := AbilityID
                Effects := Effects

    # ValidateProp(PropID:string, Prop:prop):void=
    #     if (Prop.FN <> ""). ProjectLog("{Prop.Type}[{Prop.FN}] does not exist for {Resource.ID}.{PropID}", log_level.Warning)

    GetPropType<public>(PropID:string)<transacts>:prop_type= Resource.GetPropType(PropID)

action_maker<public> := class():
    State<public>:game_state
    AbilityID<public>:string
    ResourceID<public>:string
    Effects<public>:[]effect

    ActionFor<public>(PlayerID:string):action=
        ActionGoo := EventGoo()
        var Stream:event_goo = ActionGoo
        for(Effect:Effects):
            Scoped := scoped_state{ GameState := State, Source := ResourceID, PropertyID := Effect.Focus.PropertyID? or AbilityID, PlayerID := PlayerID }
            case(Effect.FN):
                "Set" =>
                    Effector := set_effect{ Focus := Effect.Focus, Tweak := Effect.Tweak, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Execute Ability" =>
                    Effector := execute_effect{ Focus := Effect.Focus, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Is True" =>
                    Effector := is_true_effect{ Focus := Effect.Focus, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Is False" =>
                    Effector := is_false_effect{ Focus := Effect.Focus, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Create Resource" =>
                    Effector := create_effect{ Focus := Effect.Focus, Tweak := Effect.Tweak, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Delay" =>
                    Effector := delay_effect{ Focus := Effect.Focus, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Increase" =>
                    Effector := increase_effect{ Focus := Effect.Focus, Tweak := Effect.Tweak, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Decrease" =>
                    Effector := decrease_effect{ Focus := Effect.Focus, Tweak := Effect.Tweak, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                "Log" =>
                    Effector := log_effect{ Focus := Effect.Focus, State := Scoped }
                    set Stream = EventGoo(Affect(Stream, Effector.Affect))
                _ => Print("{Effect.FN} is unsupported")
        action. ActionGoo := ActionGoo

action<public> := class():
    ActionGoo<public>:event_goo

    ExecuteEmpty<public>():void= ActionGoo.Set()
    ExecuteAgentFloat<public>(Agent:agent, Float:float):void= ActionGoo.Set()
