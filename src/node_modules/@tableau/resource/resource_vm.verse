
using { Tableau }

resource_vm<public> := class():
    GameState<public>:game_state
    ID<public>:int
    Name<public>:gooey_string := gooey_string{}
    var StaticProperties<public>:[string]gooey_string = map{}
    var Properties<public>:[string]resource_property_vm = map{}
    var Abilities<public>:[string]action_maker = map{}

    Init<public>(Resource:resource)<suspends>:void =
        spawn. Name.Init(Resource.Name)
        for (Property:Resource.StaticProperties):
            VM := gooey_string{}
            spawn. VM.Init("Gold")
            if:
                set StaticProperties[Property.ID] = VM
        for (Property:Resource.Properties):
            VM := resource_property_vm{ Default := num{ Value := 2.7, Exponent := 3 } }
            spawn. VM.Init(Property.ID)
            if:
                set Properties[Property.ID] = VM
        for (Ability:Resource.Abilities):
            if:
                set Abilities[Ability.ID] = action_maker:
                    GameState := GameState
                    Subject := Resource.ID
                    Effects := Ability.Effects

resource_static_property_vm<public> := class():
    ID<public>:gooey_string := gooey_string{}
    Default<public>:string

    Init<public>(PropertyID:string)<suspends>:void =
        spawn. ID.Init(PropertyID)

resource_property_vm<public> := class():
    ID<public>:gooey_string := gooey_string{}
    Default<public>:num
    var Values<public>:[int]gooey_num := map{}

    Init<public>(PropertyID:string)<suspends>:void =
        spawn. ID.Init(PropertyID)

    ValueFor<public>(ParticipantID:int):gooey_num =
        if (Value := Values[ParticipantID]). return Value
        VM := gooey_num{}
        spawn. VM.Init(Default)
        if:
            set Values[ParticipantID] = VM

        return VM

action_maker<public> := class():
    GameState<public>:game_state
    Subject<public>:int
    Effects<public>:[]effect

    ActionFor<public>(NewTarget:int):action=
        action:
            GameState := GameState
            Subject := Subject
            Target := NewTarget
            Effects := Effects

action<public> := class():
    GameState<public>:game_state
    Subject<public>:int
    Target<public>:int
    Effects<public>:[]effect

    Execute<public>():void =
        spawn. Run()

    Run()<suspends>:void=
        var LastCommandModification:command = command:
            Subject := Subject
            Target := Target
            Payload := payload{}
        for (Effect:Effects, Effector := GameState.EffectorProvider.Get[Effect.Type]):
            set LastCommandModification = Effector.Play(LastCommandModification, Effect.Payload)
