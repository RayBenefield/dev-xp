
using { Tableau }

prop_type<public> := enum:
    Num
    Str
    Float
    StatNum
    StatStr
    StatFloat
    CompNum
    CompStr
    CompFloat

ToString<public>(Type:prop_type):string = case(Type):
    prop_type.Num => "Num"
    prop_type.Str => "Str"
    prop_type.Float => "Float"
    prop_type.StatNum => "StatNum"
    prop_type.StatStr => "StatStr"
    prop_type.StatFloat => "StatFloat"
    prop_type.CompNum => "CompNum"
    prop_type.CompStr => "CompStr"
    prop_type.CompFloat => "CompFloat"

stat_props_vm<public> := class():
    var Strs<public>:[string]gooey_string = map{}
    var Nums<public>:[string]gooey_num = map{}
    var Floats<public>:[string]gooey_float = map{}

props_vm<public> := class():
    var Strs<public>:[string]resource_str_property_vm = map{}
    var Nums<public>:[string]resource_num_property_vm = map{}
    var Floats<public>:[string]resource_float_property_vm = map{}

resource_vm<public> := class():
    GameState<public>:game_state
    ID<public>:string
    PropTypes<public>:[string]prop_type
    var StatProps<public>:stat_props_vm = stat_props_vm{}
    var Props<public>:props_vm = props_vm{}
    var Abilities<public>:[string]action_maker = map{}

    Init<public>(Resource:resource)<suspends>:void =
        for (Property:Resource.StatProps.Strs):
            set PropTypes[P.ID] = prop_type.StatStr
            VM := Property.ToVM()
            if:
                set StatProps.Strs[Property.ID] = VM
        for (Property:Resource.StatProps.Nums):
            set PropTypes[P.ID] = prop_type.StatNum
            VM := Property.ToVM()
            if:
                set StatProps.Nums[Property.ID] = VM
        for (Property:Resource.StatProps.Floats):
            set PropTypes[P.ID] = prop_type.StatFloat
            VM := Property.ToVM()
            if:
                set StatProps.Floats[Property.ID] = VM
        for (Property:Resource.Props.Nums):
            set PropTypes[P.ID] = prop_type.Num
            VM := resource_num_property_vm{ Default := Property.Default }
            spawn. VM.Init(Property.ID)
            if:
                set Props.Nums[Property.ID] = VM
        for (Property:Resource.Props.Strs):
            set PropTypes[P.ID] = prop_type.Str
            VM := resource_str_property_vm{ Default := Property.Default }
            spawn. VM.Init(Property.ID)
            if:
                set Props.Strs[Property.ID] = VM
        for (Property:Resource.Props.Floats):
            set PropTypes[P.ID] = prop_type.Float
            VM := resource_float_property_vm{ Default := Property.Default }
            spawn. VM.Init(Property.ID)
            if:
                set Props.Floats[Property.ID] = VM
        for (Ability:Resource.Abilities):
            if:
                set Abilities[Ability.ID] = action_maker:
                    GameState := GameState
                    Subject := Resource.ID
                    Effects := Ability.Effects

resource_static_property_vm<public> := class():
    ID<public>:gooey_string := gooey_string{}
    Default<public>:string

    Init<public>(PropertyID:string)<suspends>:void =
        spawn. ID.Init(PropertyID)

resource_num_property_vm<public> := class():
    ID<public>:gooey_string := gooey_string{}
    Default<public>:num
    var Values<public>:[string]gooey_num := map{}

    Init<public>(PropertyID:string)<suspends>:void =
        spawn. ID.Init(PropertyID)

    ValueFor<public>(ParticipantID:string):gooey_num =
        if (Value := Values[ParticipantID]). return Value
        VM := gooey_num{}
        spawn. VM.Init(Default)
        if:
            set Values[ParticipantID] = VM

        return VM

resource_float_property_vm<public> := class():
    ID<public>:gooey_string := gooey_string{}
    Default<public>:float
    var Values<public>:[string]gooey_float := map{}

    Init<public>(PropertyID:string)<suspends>:void =
        spawn. ID.Init(PropertyID)

    ValueFor<public>(ParticipantID:string):gooey_float =
        if (Value := Values[ParticipantID]). return Value
        VM := gooey_float{}
        spawn. VM.Init(Default)
        if:
            set Values[ParticipantID] = VM

        return VM

resource_str_property_vm<public> := class():
    ID<public>:gooey_string := gooey_string{}
    Default<public>:string
    var Values<public>:[string]gooey_string := map{}

    Init<public>(PropertyID:string)<suspends>:void =
        spawn. ID.Init(PropertyID)

    ValueFor<public>(ParticipantID:string):gooey_string =
        if (Value := Values[ParticipantID]). return Value
        VM := gooey_string{}
        spawn. VM.Init(Default)
        if:
            set Values[ParticipantID] = VM

        return VM

action_maker<public> := class():
    GameState<public>:game_state
    Subject<public>:string
    Effects<public>:[]effect

    ActionFor<public>(NewTarget:string):action=
        action:
            GameState := GameState
            Subject := Subject
            Target := NewTarget
            Effects := Effects

action<public> := class():
    GameState<public>:game_state
    Subject<public>:string
    Target<public>:string
    Effects<public>:[]effect

    Execute<public>():void= spawn. Run(payload{})
    ExecutePayload<public>(Payload:payload):void= spawn. Run(Payload)

    Run(Payload:payload)<suspends>:void=
        var LastCommandModification:command = command:
            Subject := Subject
            Target := Target
            Payload := Payload
        for (Effect:Effects, Effector := GameState.EffectorProvider.Get[Effect.Type]):
            set LastCommandModification = Effector.Play(LastCommandModification, Effect.Payload)
