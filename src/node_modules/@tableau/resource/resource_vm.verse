
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/Diagnostics
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Numb
using. Tableau
using. Vertex

resource_state<public> := class():
    GameState<public>:game_state
    ResourceID<public>:string
    ForProperty<public>(PropertyID:string)<transacts>:property_state = property_state:
        ResourceState := Self
        ResourceID := ResourceID
        PropertyID := PropertyID

    GetBoolProp<public>(TargetResourceID:string, HP:half_path, PlayerID:string):bool_goo= GameState.GetBoolProp(TargetResourceID, HP, PlayerID)
    GetIntProp<public>(TargetResourceID:string, HP:half_path, PlayerID:string):int_goo= GameState.GetIntProp(TargetResourceID, HP, PlayerID)
    GetFloatProp<public>(TargetResourceID:string, HP:half_path, PlayerID:string):float_goo= GameState.GetFloatProp(TargetResourceID, HP, PlayerID)
    GetNumProp<public>(TargetResourceID:string, HP:half_path, PlayerID:string):num_goo= GameState.GetNumProp(TargetResourceID, HP, PlayerID)
    GetStrProp<public>(TargetResourceID:string, HP:half_path, PlayerID:string):string_goo= GameState.GetStrProp(TargetResourceID, HP, PlayerID)
    GetAgentProp<public>(TargetResourceID:string, HP:half_path, PlayerID:string):agent_goo= GameState.GetAgentProp(TargetResourceID, HP, PlayerID)
    GetVec2Prop<public>(TargetResourceID:string, HP:half_path, PlayerID:string):vec2_goo= GameState.GetVec2Prop(TargetResourceID, HP, PlayerID)
    GetVec3Prop<public>(TargetResourceID:string, HP:half_path, PlayerID:string):vec3_goo= GameState.GetVec3Prop(TargetResourceID, HP, PlayerID)

property_player_scope<public> := class():
    GameState<public>:game_state
    Source<public>:string
    PropertyID<public>:string
    PlayerID<public>:string

    FindStr<public>(HP:half_path):string_goo= GameState.GetStrProp(Source, HP, PlayerID)
    AwaitBool<public>(ResourceID:string):bool_goo= GameState.GetBoolProp(ResourceID, PropertyID, PlayerID)
    AwaitInt<public>(ResourceID:string):int_goo= GameState.GetIntProp(ResourceID, PropertyID, PlayerID)
    AwaitFloat<public>(ResourceID:string):float_goo= GameState.GetFloatProp(ResourceID, PropertyID, PlayerID)
    AwaitNum<public>(ResourceID:string):num_goo= GameState.GetNumProp(ResourceID, PropertyID, PlayerID)
    AwaitStr<public>(ResourceID:string):string_goo= GameState.GetStrProp(ResourceID, PropertyID, PlayerID)
    AwaitAgent<public>(ResourceID:string):agent_goo= GameState.GetAgentProp(ResourceID, PropertyID, PlayerID)
    AwaitVec2<public>(ResourceID:string):vec2_goo= GameState.GetVec2Prop(ResourceID, PropertyID, PlayerID)
    AwaitVec3<public>(ResourceID:string):vec3_goo= GameState.GetVec3Prop(ResourceID, PropertyID, PlayerID)

property_state<public> := class():
    ResourceState<public>:resource_state
    ResourceID<public>:string
    PropertyID<public>:string

    ForPlayer<public>(PlayerID:string):player_state = player_state:
        ResourceState := ResourceState
        ResourceID := ResourceID
        PropertyID := PropertyID
        PlayerID := PlayerID

player_state<public> := class():
    ResourceState<public>:resource_state
    ResourceID<public>:string
    PropertyID<public>:string
    PlayerID<public>:string

    ToBool<public>(HP:half_path):bool_goo= ResourceState.GetBoolProp(ResourceID, HP, PlayerID)
    ToInt<public>(HP:half_path):int_goo= ResourceState.GetIntProp(ResourceID, HP, PlayerID)
    ToFloat<public>(HP:half_path):float_goo= ResourceState.GetFloatProp(ResourceID, HP, PlayerID)
    ToNum<public>(HP:half_path):num_goo= ResourceState.GetNumProp(ResourceID, HP, PlayerID)
    ToStr<public>(HP:half_path):string_goo= ResourceState.GetStrProp(ResourceID, HP, PlayerID)
    ToAgent<public>(HP:half_path):agent_goo= ResourceState.GetAgentProp(ResourceID, HP, PlayerID)
    ToVec2<public>(HP:half_path):vec2_goo= ResourceState.GetVec2Prop(ResourceID, HP, PlayerID)
    ToVec3<public>(HP:half_path):vec3_goo= ResourceState.GetVec3Prop(ResourceID, HP, PlayerID)

resource_vm<public> := class():
    State<public>:resource_state
    Resource<public>:resource
    var Abilities<public>:[string]action_maker = map{}

    Init<public>():void =
        for (AbilityID->Effects:Resource.Abilities):
            if. set Abilities[AbilityID] = action_maker:
                State := State
                Subject := Resource.ID
                Effects := Effects

    # ValidateProp(PropID:string, Prop:prop):void=
    #     if (Prop.FN <> ""). ProjectLog("{Prop.Type}[{Prop.FN}] does not exist for {Resource.ID}.{PropID}", log_level.Warning)

    GetPropType<public>(PropID:string)<transacts>:prop_type= Resource.Props[PropID].Type or prop_type.Unknown

    GetBool(PropID:string):prop_bool = prop_bool[Resource.Props[PropID]] or PropBool(Resource.ID, PropID, GetPropType(PropID))
    GetBoolProp<public>(PropID:string, PlayerID:string):bool_goo=
        GetBool(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

    GetFloat(PropID:string):prop_float = prop_float[Resource.Props[PropID]] or PropFloat(Resource.ID, PropID, GetPropType(PropID))
    GetFloatProp<public>(PropID:string, PlayerID:string):float_goo=
        GetFloat(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

    GetInt(PropID:string):prop_int = prop_int[Resource.Props[PropID]] or PropInt(Resource.ID, PropID, GetPropType(PropID))
    GetIntProp<public>(PropID:string, PlayerID:string):int_goo=
        GetInt(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

    GetNum(PropID:string):prop_num = prop_num[Resource.Props[PropID]] or PropNum(Resource.ID, PropID, GetPropType(PropID))
    GetNumProp<public>(PropID:string, PlayerID:string):num_goo=
        GetNum(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

    GetStr(PropID:string):prop_str = prop_str[Resource.Props[PropID]] or PropStr(Resource.ID, PropID, GetPropType(PropID))
    GetStrProp<public>(PropID:string, PlayerID:string):string_goo=
        GetStr(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

    GetAgent(PropID:string):prop_agent = prop_agent[Resource.Props[PropID]] or PropAgent(Resource.ID, PropID, GetPropType(PropID))
    GetAgentProp<public>(PropID:string, PlayerID:string):agent_goo=
        GetAgent(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

    GetVec2(PropID:string):prop_vec2 = prop_vec2[Resource.Props[PropID]] or PropVec2(Resource.ID, PropID, GetPropType(PropID))
    GetVec2Prop<public>(PropID:string, PlayerID:string):vec2_goo=
        GetVec2(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

    GetVec3(PropID:string):prop_vec3 = prop_vec3[Resource.Props[PropID]] or PropVec3(Resource.ID, PropID, GetPropType(PropID))
    GetVec3Prop<public>(PropID:string, PlayerID:string):vec3_goo=
        GetVec3(PropID).ValueFor(State.ForProperty(PropID).ForPlayer(PlayerID))

action_maker<public> := class():
    State<public>:resource_state
    Subject<public>:string
    Effects<public>:[]effect

    ActionFor<public>(NewTarget:string):action=
        action:
            State := State
            Subject := Subject
            Target := NewTarget
            Effects := Effects

action<public> := class():
    State<public>:resource_state
    Subject<public>:string
    Target<public>:string
    Effects<public>:[]effect

    ExecuteEmpty<public>():void= spawn. Run()
    ExecuteAgentFloat<public>(Agent:agent, Float:float):void= spawn. Run()

    Run()<suspends>:void=
        var Iterator:int = 0
        loop:
            if (Effect := Effects[Iterator]):
                if (Effector := State.GameState.EffectorProvider.Get[Effect.FN]):
                    Focus := State.GameState.ResolvePath(Subject, Effect.Focus, Target)
                    Tweak := State.GameState.ResolvePath(Subject, Effect.Tweak, Target)

                    Commands := Effector.Play(Subject, Target, Focus, Tweak)

                    if (not Commands?). break
                    set Iterator += 1
                else:
                    ProjectLog("[{Effect.FN}] not found", log_level.Warning)
                    break
            else. break
