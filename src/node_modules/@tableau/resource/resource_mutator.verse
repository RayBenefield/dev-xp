using { Tableau }
using { TableauParticipant }

resource_mutator<public> := class(mutator):
    GameState<public>:game_state
    Repo<public>:resource_repository
    ParticipantRepository<public>:participant_repository

    ApplyEvents<override>(Events:[]domain_event):void=
        for(Ev:Events):
            Handler := case(Ev.Event.Name()):
                "Resource Added" => spawn. AddResource(Ev.Subject)
                "Participant Added" => spawn. AddParticipantResource(Ev.Subject)
                "Property Updated" => spawn. UpdateProperty(Ev)
                _ => {}

    AddResource(ResourceID:string)<suspends>:void=
        if (InitialResource := Repo.GetByID[ResourceID]):
            GameState.AddResource(InitialResource)

    AddParticipantResource(ParticipantID:string)<suspends>:void=
        Participant := GameState.AwaitParticipant(ParticipantID)
        Resources := Repo.GetAll()
        for:
            Resource:Resources
            Count := ParticipantRepository.GetByID[ParticipantID].GetResource(Resource.ID)
        do:
            Participant.AddResource(Resource.ID, Count)

    UpdateProperty(Ev:domain_event)<suspends>:void=
        ResourceID := Ev.Subject
        PropertyID := Ev.Property
        ParticipantID := Ev.Target
        Resource := GameState.AwaitResource(ResourceID)

        if:
            Res := Repo.GetByID[ResourceID]
            PropNums := Res.PropNums[PropertyID]
            Value := PropNums[ParticipantID]
            Property := Resource.Props[PropertyID]
        then:
            Property.ValueFor(ParticipantID).Set(Value)
