using. Tableau

resource_mutator<public> := class(mutator):
    GameState<public>:game_state
    Repo<public>:resource_repository

    ApplyEvents<override>(Events:[]domain_event):void=
        for(Ev:Events):
            Handler := case(Ev.Event.Name()):
                "Resource Added" => spawn. AddResource(Ev.Subject)
                "Property Updated" => spawn. UpdateProperty(Ev)
                _ => {}

    AddResource(ResourceID:string)<suspends>:void=
        if (InitialResource := Repo.GetByID[ResourceID]):
            GameState.AddResource(InitialResource)

    UpdateProperty(Ev:domain_event)<suspends>:void=
        ResourceID := Ev.Subject
        PropertyID := Ev.Property
        PlayerID := Ev.Target
        Resource := GameState.AwaitResource(ResourceID)

        if:
            Res := Repo.GetByID[ResourceID]
            PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID]
        then:
            case(PropType):
                prop_type.Integer =>
                    if:
                        Property := Resource.Props.Ints[PropertyID]
                        PropInts := Res.PropInts[PropertyID]
                        Value := PropInts[PlayerID]
                    then:
                        Property.ValueFor(PlayerID).Set(Value)
                prop_type.Num =>
                    if:
                        Property := Resource.Props.Nums[PropertyID]
                        PropNums := Res.PropNums[PropertyID]
                        Value := PropNums[PlayerID]
                    then:
                        Property.ValueFor(PlayerID).Set(Value)
                prop_type.Float =>
                    if:
                        Property := Resource.Props.Floats[PropertyID]
                        PropFloats := Res.PropFloats[PropertyID]
                        Value := PropFloats[PlayerID]
                    then:
                        Property.ValueFor(PlayerID).Set(Value)
                prop_type.Str =>
                    if:
                        Property := Resource.Props.Strs[PropertyID]
                        PropStrs := Res.PropStrs[PropertyID]
                        Value := PropStrs[PlayerID]
                    then:
                        Property.ValueFor(PlayerID).Set(Value)
                prop_type.Bool =>
                    if:
                        Property := Resource.Props.Bools[PropertyID]
                        PropBools := Res.PropBools[PropertyID]
                        Value := PropBools[PlayerID]
                    then:
                        Property.ValueFor(PlayerID).Set(Value)
                prop_type.Agent =>
                    if:
                        Property := Resource.Props.Agents[PropertyID]
                        PropAgents := Res.PropAgents[PropertyID]
                        Value := PropAgents[PlayerID]
                    then:
                        Property.ValueFor(PlayerID).Set(Value)
                _ => {}
