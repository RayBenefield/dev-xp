
using. /Verse.org/Simulation

using. Goo
using. Vertex

IntAdd(First:int, Second:int)<transacts>:int= First + Second
FloatToInt(Value:float)<transacts>:int= Value.ToInt()
StrsLength(Value:[]string)<transacts>:int= Value.Length
Negate(Value:int)<computes>:int= Value * -1
IntMinus(First:int, Second:int)<computes>:int= First - Second
IntMultiply(First:int, Second:int)<computes>:int= First * Second
FindElement(Value:[]string, ToFind:string):int= if (I := Value.Find[ToFind]). I+1 else. 0

Integer<public><constructor>(Default:int)<transacts> := prop_int. Default := Default
Integer<public><constructor>(Focus:half_path)<transacts> := prop_int. Focus := Focus
Integer<public><constructor>(Focus:prop_path)<transacts> := prop_int. Focus := Focus.ToPath()
Integer<public><constructor>(Focus:half_path, FN:string)<transacts> := prop_int{ Focus := Focus, FN := FN }
Integer<public><constructor>(FN:string, Focus:half_path)<transacts> := prop_int{ Focus := Focus, FN := FN }
Integer<public><constructor>(Focus:half_path, FN:string, Tweak:half_path)<transacts> := prop_int{ Focus := Focus, FN := FN, Tweak := Tweak }
MaybeInteger<public><constructor>(Focus:?prop_path)<transacts> := prop_int. Focus := Focus?.ToPath() or EmptyPath()

PropInt<public><constructor>(ResourceID:string, PropertyID:string, Type:prop_type)<transacts> := prop_int{ Focus := Path(ResourceID, PropertyID), Type := Type }
prop_int<public> := class<concrete>(prop):
    @editable Type<override>:prop_type = prop_type.IntegerType
    @editable Default<public>:int = 0
    ValueFor<public>(State:scoped_state):int_goo= case(FN):
        "+" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntAdd))
        "-" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntMinus))
        "*" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntMultiply))
        "Find" => IntGoo(Computed(State.ToStrs(Focus), State.ToStr(Tweak), FindElement))
        "Negate" => IntGoo(Map(State.ToInt(Focus), Negate))
        "Length" => IntGoo(Map(State.ToStrs(Focus), StrsLength))
        _ => case(Type):
            prop_type.FloatType => IntGoo(Map(State.ToFloat(Focus), FloatToInt))
            _ => if (not Focus.Empty[]). State.ToInt(Focus)
            else. IntGoo(Default)
