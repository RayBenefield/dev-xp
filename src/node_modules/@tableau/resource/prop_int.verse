
using. /Verse.org/Random
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Numb
using. Vertex

IntQuotient(First:int, Second:int)<transacts>:int= Quotient[First, Second] or 0
IntMod(First:int, Second:int)<transacts>:int= Mod[First, Second] or 0
IntAdd(First:int, Second:int)<transacts>:int= First + Second
FloatToInt(Value:float)<transacts>:int= Value.ToInt()
NumToInt<public>(Value:num)<transacts>:int= (Value.Value * Pow(10.0, Value.Exponent * 1.0)).ToInt()
BoolToInt<public>(Value:logic)<transacts>:int= if(Value?). 1 else. 0
StrsLength(Value:[]string)<transacts>:int= Value.Length
IntNegate(Value:int)<computes>:int= Value * -1
IntMinus(First:int, Second:int)<computes>:int= First - Second
IntMultiply(First:int, Second:int)<computes>:int= First * Second
FindElement(Value:[]string, ToFind:string):int= if (I := Value.Find[ToFind]). I+1 else. 0
IfTrueInt(Value:logic, IfTrue:int)<computes>:int= if (Value?). IfTrue else. 0
Vec2X(Value:vector2)<transacts>:int= Value.X.ToInt()
Vec2Y(Value:vector2)<transacts>:int= Value.Y.ToInt()
RollDie(Trigger:string, Value:int)<transacts>:int= GetRandomInt(1, Value)
GetPieSlice(Value:float, Increments:int)<transacts>:int=
    Increment := 360.0 / (Increments*1.0)
    MidPoint := Increment/2.0
    SnapPoint := ((Ceil[(Value - MidPoint) / Increment] or 0) * Increment)
    if (SnapPoint = 360.0 or SnapPoint = 0.0). 1 else. (SnapPoint/Increment).ToInt() + 1

Integer<public><constructor>(Default:int)<transacts> := prop_int. Default := Default
Integer<public><constructor>(Focus:half_path)<transacts> := prop_int. Focus := Focus
Integer<public><constructor>(Focus:prop_path)<transacts> := prop_int. Focus := Focus.ToPath()
Integer<public><constructor>(Focus:half_path, FN:string)<transacts> := prop_int{ Focus := Focus, FN := FN }
Integer<public><constructor>(FN:string, Focus:half_path)<transacts> := prop_int{ Focus := Focus, FN := FN }
Integer<public><constructor>(Focus:half_path, FN:string, Tweak:half_path)<transacts> := prop_int{ Focus := Focus, FN := FN, Tweak := Tweak }
MaybeInteger<public><constructor>(Focus:?prop_path)<transacts> := prop_int. Focus := Focus?.ToPath() or EmptyPath()

PropInt<public><constructor>(ResourceID:string, PropertyID:string, Type:prop_type)<transacts> := prop_int{ Focus := Path(ResourceID, PropertyID), Type := Type }
prop_int<public> := class<concrete>(prop):
    @editable Type<override>:prop_type = prop_type.IntegerType
    @editable Default<public>:int = 0
    ValueFor<public>(State:scoped_state):int_goo= case(FN):
        "+" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntAdd))
        "-" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntMinus))
        "*" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntMultiply))
        "Quotient" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntQuotient))
        "Mod" => IntGoo(Computed(State.ToInt(Focus), State.ToInt(Tweak), IntMod))
        "Find" => IntGoo(Computed(State.ToStrs(Focus), State.ToStr(Tweak), FindElement))
        "Negate" => IntGoo(Map(State.ToInt(Focus), IntNegate))
        "Length" => IntGoo(Map(State.ToStrs(Focus), StrsLength))
        "Count" => IntGoo(Map(State.ToStrs(Focus), StrsLength))
        "Roll" => IntGoo(Computed(State.ToStr(Focus), State.ToInt(Tweak), RollDie))
        "If True" => IntGoo(Computed(State.ToBool(Focus), State.ToInt(Tweak), IfTrueInt))
        "Get Pie Slice" => IntGoo(Computed(State.ToFloat(Focus), State.ToInt(Tweak), GetPieSlice))
        "Vec2 X" => IntGoo(Map(State.ToVec2(Focus), Vec2X))
        "Vec2 Y" => IntGoo(Map(State.ToVec2(Focus), Vec2Y))
        _ => case(Type):
            prop_type.FloatType => IntGoo(Map(State.ToFloat(Focus), FloatToInt))
            prop_type.NumType => IntGoo(Map(State.ToNum(Focus), NumToInt))
            prop_type.BoolType => IntGoo(Map(State.ToBool(Focus), BoolToInt))
            _ => if (not Focus.Empty[]). State.ToInt(Focus)
            else. IntGoo(Default)
