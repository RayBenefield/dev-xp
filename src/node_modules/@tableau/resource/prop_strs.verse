
using. /Verse.org/Simulation
using. Goo

Strs<public><constructor>(Default:[]string)<transacts> := prop_strs. Default := Default
Strs<public><constructor>(Focus:half_path)<transacts> := prop_strs. Focus := Focus
Strs<public><constructor>(Focus:prop_path)<transacts> := prop_strs. Focus := Focus.ToPath()
Strs<public><constructor>(Focus:half_path, FN:string)<transacts> := prop_strs{ Focus := Focus, FN := FN }
Strs<public><constructor>(FN:string, Focus:half_path)<transacts> := prop_strs{ Focus := Focus, FN := FN }
Strs<public><constructor>(Focus:half_path, FN:string, Tweak:half_path)<transacts> := prop_strs{ Focus := Focus, FN := FN, Tweak := Tweak }

PropStrs<public><constructor>(ResourceID:string, PropertyID:string, Type:prop_type)<transacts> := prop_strs{ Focus := Path(ResourceID, PropertyID), Type := Type }
prop_strs<public> := class<concrete>(prop):
    @editable Type<override>:prop_type = prop_type.StrsType
    @editable Default<public>:[]string = array{}
    ValueFor<public>(State:scoped_state):strs_goo= case(FN):
        _ => case(Type):
            _ => if (not Focus.Empty[]). State.ToStrs(Focus)
            else. StrsGoo(Default)
