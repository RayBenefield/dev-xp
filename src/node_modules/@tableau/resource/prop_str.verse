
using. /Verse.org/Random
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Banding
using. Goo
using. Numb

RandStr(Value:[]string)<transacts>:string= Value[GetRandomInt(0, Value.Length-1)] or ""
GetStr(Value:[]string, Index:int)<transacts>:string= Value[Index-1] or ""
AgentToStr(Value:?agent)<transacts>:string= if (Value?). "[HAS AGENT]" else. "[NO AGENT]"
Vec3ToStr(Value:vector3)<transacts>:string= "{Value}"
Vec2ToStr(Value:vector2)<transacts>:string= "{Value}"
IntToStr(Value:int)<transacts>:string= "{Value}"
FloatToStr(Value:float)<transacts>:string= "{Value}"
NumToStr(Value:num)<transacts>:string= "{Value}"
BoolToStr(Value:logic)<transacts>:string= if (Value?). "true" else. "false"
AppendStrs(First:string, Second:string)<transacts>:string = "{First}{Second}"
IfTrueStr(Value:logic, IfTrue:string)<computes>:string= if (Value?). IfTrue else. ""
StrsToStr(Value:[]string)<computes>:string = Value.Join(", ")

Str<public><constructor>(Default:string)<transacts> := prop_str. Default := Default
Str<public><constructor>(Focus:half_path)<transacts> := prop_str. Focus := Focus
Str<public><constructor>(Focus:half_path, FN:string)<transacts> := prop_str{ Focus := Focus, FN := FN }
Str<public><constructor>(FN:string, Focus:half_path)<transacts> := prop_str{ Focus := Focus, FN := FN }
Str<public><constructor>(Focus:half_path, FN:string, Tweak:half_path)<transacts> := prop_str{ Focus := Focus, FN := FN, Tweak := Tweak }

PropStr<public><constructor>(ResourceID:string, PropertyID:string, Type:prop_type)<transacts> := prop_str{ Focus := Path(ResourceID, PropertyID), Type := Type }
prop_str<public> := class<concrete>(prop):
    @editable Type<override>:prop_type = prop_type.StrType
    @editable Default<public>:string = ""
    ValueFor<public>(State:scoped_state):string_goo= case(FN):
        "Append" => StrGoo(Computed(State.ToStr(Focus), State.ToStr(Tweak), AppendStrs))
        "Get" => StrGoo(Computed(State.ToStrs(Focus), State.ToInt(Tweak), GetStr))
        "Random" => StrGoo(Map(State.ToStrs(Focus), RandStr))
        "If True" => StrGoo(Computed(State.ToBool(Focus), State.ToStr(Tweak), IfTrueStr))
        _ => case(Type):
            prop_type.BoolType => StrGoo(Map(State.ToBool(Focus), BoolToStr))
            prop_type.AgentType => StrGoo(Map(State.ToAgent(Focus), AgentToStr))
            prop_type.IntegerType => StrGoo(Map(State.ToInt(Focus), IntToStr))
            prop_type.FloatType => StrGoo(Map(State.ToFloat(Focus), FloatToStr))
            prop_type.NumType => StrGoo(Map(State.ToNum(Focus), NumToStr))
            prop_type.Vec2Type => StrGoo(Map(State.ToVec2(Focus), Vec2ToStr))
            prop_type.Vec3Type => StrGoo(Map(State.ToVec3(Focus), Vec3ToStr))
            prop_type.StrsType => StrGoo(Map(State.ToStrs(Focus), StrsToStr))
            _ => if (not Focus.Empty[]). State.ToStr(Focus)
            else. StrGoo(Default)
