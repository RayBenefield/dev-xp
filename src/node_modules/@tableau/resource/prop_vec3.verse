
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Vertex

Vec3Add(First:vector3, Second:vector3)<transacts>:vector3= First + Second
Vec3Subtract(First:vector3, Second:vector3)<transacts>:vector3= First - Second
Vec3AsX(Value:float)<transacts>:vector3= V3X(Value)
Vec3AsY(Value:float)<transacts>:vector3= V3Y(Value)
Vec3AsZ(Value:float)<transacts>:vector3= V3Z(Value)
Vec3AsXY(Value:float)<transacts>:vector3= V3(Value, Value, 0.0)
AppendVec2AndFloat(Value:vector2, Z:float)<transacts>:vector3= vector3{ X := Value.X, Y := Value.Y, Z := Z }

Vec3<public><constructor>(Default:vector3)<transacts> := prop_vec3. Default := Default
Vec3<public><constructor>(Focus:half_path)<transacts> := prop_vec3. Focus := Focus
Vec3<public><constructor>(Focus:prop_path)<transacts> := prop_vec3. Focus := Focus.ToPath()
Vec3<public><constructor>(Focus:half_path, FN:string)<transacts> := prop_vec3{ Focus := Focus, FN := FN }
Vec3<public><constructor>(FN:string, Focus:half_path)<transacts> := prop_vec3{ Focus := Focus, FN := FN }
Vec3<public><constructor>(Focus:half_path, FN:string, Tweak:half_path)<transacts> := prop_vec3{ Focus := Focus, FN := FN, Tweak := Tweak }
Vec3<public><constructor>(Focus:prop_path, FN:string, Tweak:prop_path)<transacts> := prop_vec3{ Focus := Focus.ToPath(), FN := FN, Tweak := Tweak.ToPath() }
MaybeVec3<public><constructor>(Focus:?prop_path)<transacts> := prop_vec3. Focus := Focus?.ToPath() or EmptyPath()

vec3_plug<public> := class<concrete>():
    @editable Default:vector3 = vector3{}
    @editable Source:?prop_path = false
Vec3<public>(Plug:vec3_plug)<transacts>:prop_vec3 := (Vec3 of Plug.Source?) or (Vec3 of Plug.Default)
Vec3<public>(Plug:?vec3_plug, Default:vector3)<transacts>:prop_vec3 := (Vec3 of Plug?) or (Vec3 of Default)

PropVec3<public><constructor>(ResourceID:string, PropertyID:string, Type:prop_type)<transacts> := prop_vec3{ Focus := Path(ResourceID, PropertyID), Type := Type }
prop_vec3<public> := class<concrete>(prop):
    @editable Type<override>:prop_type = prop_type.Vec3Type
    @editable Default<public>:vector3 = vector3{}
    ValueFor<public>(State:scoped_state):vec3_goo= case(FN):
        "+" => Vec3Goo(Computed(State.ToVec3(Focus), State.ToVec3(Tweak), Vec3Add))
        "-" => Vec3Goo(Computed(State.ToVec3(Focus), State.ToVec3(Tweak), Vec3Subtract))
        "As X" => Vec3Goo(Map(State.ToFloat(Focus), Vec3AsX))
        "As Y" => Vec3Goo(Map(State.ToFloat(Focus), Vec3AsY))
        "As Z" => Vec3Goo(Map(State.ToFloat(Focus), Vec3AsZ))
        "As XY" => Vec3Goo(Map(State.ToFloat(Focus), Vec3AsXY))
        "Append" => Vec3Goo(Computed(State.ToVec2(Focus), State.ToFloat(Tweak), AppendVec2AndFloat))
        _ => case(Type):
            _ => if (not Focus.Empty[]). State.ToVec3(Focus)
            else. Vec3Goo(Default)
