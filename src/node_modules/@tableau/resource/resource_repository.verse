using { /UnrealEngine.com/Temporary/Diagnostics }

using { Tableau }

resource_repository<public> := class<concrete>():
    Initial<public>:[]resource = array{}
    var Keyed:[string]resource = map{}
    var PropTypes<public>:[string][string]prop_type = map{}

    block. Load(Initial)
    Load<public>(New:[]resource)<transacts>:void=
        if (New.Length = 0). return ProjectLog("Attempted to load Zero resources", log_level.Warning)
        set Keyed = map{}
        for (P:New). if (set Keyed[P.ID] = P) {}

    GetAll<public>():[]resource = for (P:Keyed). P
    GetByID<public>(ID:string)<decides><transacts>:resource = Keyed[ID]
    GetPropTypes<public>(ID:string)<decides><transacts>:[string]prop_type= PropTypes[ID]

    Add<public>(Resource:resource)<decides><transacts>:void=
        set Keyed[Resource.ID] = Resource
        if. set PropTypes[Resource.ID] = map{}
        for (P:Resource.StatProps.Floats):
            Print("{Resource.ID}-{P.ID} is a StatFloat")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.StatFloat
        for (P:Resource.StatProps.Nums):
            Print("{Resource.ID}-{P.ID} is a StatNum")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.StatNum
        for (P:Resource.StatProps.Strs):
            Print("{Resource.ID}-{P.ID} is a StatStr")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.StatStr
        for (P:Resource.StatProps.Bools):
            Print("{Resource.ID}-{P.ID} is a StatBool")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.StatBool
        for (P:Resource.StatProps.Agents):
            Print("{Resource.ID}-{P.ID} is a StatAgent")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.StatAgent
        for (P:Resource.Props.Floats):
            Print("{Resource.ID}-{P.ID} is a Float")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.Float
        for (P:Resource.Props.Nums):
            Print("{Resource.ID}-{P.ID} is a Num")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.Num
        for (P:Resource.Props.Strs):
            Print("{Resource.ID}-{P.ID} is a Str")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.Str
        for (P:Resource.Props.Bools):
            Print("{Resource.ID}-{P.ID} is a Bool")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.Bool
        for (P:Resource.Props.Agents):
            Print("{Resource.ID}-{P.ID} is a Agent")
            if. set PropTypes[Resource.ID][P.ID] = prop_type.Agent
        for (P:Resource.CompProps.Floats). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompFloat
        for (P:Resource.CompProps.Nums). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompNum
        for (P:Resource.CompProps.Strs). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompStr
        for (P:Resource.CompProps.Bools). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompBool

    Update<public>(Resource:resource)<decides><transacts>:resource=
        GetByID[Resource.ID]
        set Keyed[Resource.ID] = Resource
