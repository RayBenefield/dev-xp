
using. /UnrealEngine.com/Temporary/Diagnostics

using. Tableau

resource_repository<public> := class<concrete>():
    Initial<public>:[]resource = array{}
    var Keyed:[string]resource = map{}
    var PropTypes<public>:[string][string]prop_type = map{}

    block. Load(Initial)
    Load<public>(New:[]resource)<transacts>:void=
        if (New.Length = 0). return ProjectLog("Attempted to load Zero resources", log_level.Warning)
        set Keyed = map{}
        for (P:New). if (set Keyed[P.ID] = P) {}

    GetAll<public>():[]resource = for (P:Keyed). P
    GetByID<public>(ID:string)<decides><transacts>:resource = Keyed[ID]
    GetPropTypes<public>(ID:string)<decides><transacts>:[string]prop_type= PropTypes[ID]

    Add<public>(Resource:resource)<decides><transacts>:void=
        set Keyed[Resource.ID] = Resource
        if. set PropTypes[Resource.ID] = map{}
        for (ID->P:Resource.Props.Per). if. set PropTypes[Resource.ID][ID] = P.GetType()
        for (ID->P:Resource.Props.Static):
            if. set PropTypes[Resource.ID][ID] = case(P.GetType()):
                prop_type.Num => prop_type.StatNum
                prop_type.Float => prop_type.StatFloat
                prop_type.Str => prop_type.StatStr
                prop_type.Bool => prop_type.StatBool
                prop_type.Agent => prop_type.StatAgent
                _ => P.GetType()
        for (P:Resource.CompProps.Floats). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompFloat
        for (P:Resource.CompProps.Nums). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompNum
        for (P:Resource.CompProps.Strs). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompStr
        for (P:Resource.CompProps.Bools). if. set PropTypes[Resource.ID][P.ID] = prop_type.CompBool

    Update<public>(Resource:resource)<decides><transacts>:resource=
        GetByID[Resource.ID]
        set Keyed[Resource.ID] = Resource
