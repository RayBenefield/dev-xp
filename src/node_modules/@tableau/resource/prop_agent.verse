
using. /Verse.org/Simulation

using. Goo

UEAgent<public><constructor>(Default:?agent)<transacts> := prop_agent. Default := Default
UEAgent<public><constructor>(Focus:half_path)<transacts> := prop_agent. Focus := Focus
UEAgent<public><constructor>(Focus:half_path, FN:string)<transacts> := prop_agent{ Focus := Focus, FN := FN }
UEAgent<public><constructor>(FN:string, Focus:half_path)<transacts> := prop_agent{ Focus := Focus, FN := FN }
UEAgent<public><constructor>(Focus:half_path, FN:string, Tweak:half_path)<transacts> := prop_agent{ Focus := Focus, FN := FN, Tweak := Tweak }

PropAgent<public><constructor>(ResourceID:string, PropertyID:string, Type:prop_type)<transacts> := prop_agent{ Focus := Path(ResourceID, PropertyID), Type := Type }
prop_agent<public> := class<concrete>(prop):
    @editable Type<override>:prop_type = prop_type.AgentType
    Default<public>:?agent = false
    ValueFor<public>(State:scoped_state):agent_goo= case(FN):
        _ => case(Type):
            _ => if (not Focus.Empty[]). State.ToAgent(Focus)
            else. AgentGoo(Default)
