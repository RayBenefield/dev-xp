
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Vertex

hydrator := class():
    Resource:hydrated_resource
    IDSource:prop_path
    var AutoGenerate<public>:logic = false
    UpdatedEvent<public>:event() = event(){}

    GenerateResourceEvent<public>:event(resource) = event(resource){}
    GeneratedResourceEvent<public>:event(prop_path) = event(prop_path){}
    TriggerGenerate()<suspends>:void=
        UpdatedEvent.Debounce(0.0)
        GenerateResourceEvent.Signal(Resource.Dehydrate())
        GeneratedResourceEvent.Signal(IDSource)

    SyncAutoGenerate(Value:logic)<suspends>:void=
        set AutoGenerate = Value
        if (AutoGenerate?, Resource.ID <> ""). spawn. TriggerGenerate()
    SyncID(Value:string)<suspends>:void=
        set Resource.ID = Value
        if (AutoGenerate?, Resource.ID <> ""). spawn. TriggerGenerate()
    SyncInt(ID:string)<transacts>:int_hydrator= int_hydrator{ Resource := Resource, PropertyKey := ID, UpdatedEvent := UpdatedEvent }
    SyncString(ID:string)<transacts>:string_hydrator= string_hydrator{ Resource := Resource, PropertyKey := ID, UpdatedEvent := UpdatedEvent }
    SyncVec3(ID:string)<transacts>:vec3_hydrator= vec3_hydrator{ Resource := Resource, PropertyKey := ID, UpdatedEvent := UpdatedEvent }

int_hydrator := class():
    PropertyKey:string
    Resource:hydrated_resource
    UpdatedEvent:event()
    SetFN(Value:int):void=
        if. set Resource.IntProperties[PropertyKey] = Value
        then. UpdatedEvent.Signal()

string_hydrator := class():
    PropertyKey:string
    Resource:hydrated_resource
    UpdatedEvent:event()
    SetFN(Value:string):void=
        if. set Resource.StringProperties[PropertyKey] = Value
        then. UpdatedEvent.Signal()

vec3_hydrator := class():
    PropertyKey:string
    Resource:hydrated_resource
    UpdatedEvent:event()
    SetFN(Value:vector3):void=
        if. set Resource.Vec3Properties[PropertyKey] = Value
        then. UpdatedEvent.Signal()
