
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }

using { Tableau }
using { TableauTesting }
using { TableauGenerator }
using { TableauParticipant }

generator_service_test := class(creative_device, test_suite):
    GetName<override>():string = "Generator Service"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be able to buy an generator"
            Test := SimpleBuy
        test_case:
            Name := "Should not buy a generator you cannot afford"
            Test := CannotAfford
        test_case:
            Name := "Should buy a generator you can afford"
            Test := CanAfford
        test_case:
            Name := "Should not buy a generator if requirements not met"
            Test := DoesNotHaveRequiredGens
        test_case:
            Name := "Should buy a generator if requirements met"
            Test := SimpleBuyWithRequired

    SimpleBuy():?failure =
        # Arrange
        Generator := generator{ ID := 13 }
        Repo := generator_repository. Initial := array. Generator
        ParticipantRepo := participant_repository. Initial := array{}
        Service := generator_service{ Repo := Repo, ParticipantRepo := ParticipantRepo, EffectProvider := effect_provider{} }
        Ev1 := Ev_GenPurchased(entity_generator{}, 13)
        Ev2 := Ev_GenPurchased(entity_participant{}, 26)

        # Act
        Events := Service.Buy(13, 26)

        # Assert
        if(not Events.Length = 2). return fail("Not the right number of Domain Events")
        if(not Events.Includes[Ev1]). return fail("No generator purchased event for generator")
        if(not Events.Includes[Ev2]). return fail("No generator purchased event for participant")

        # Pass
        return false

    CannotAfford():?failure =
        # Arrange
        Generator := generator{ ID := 13, Cost := option. cost{ Amount := num. Value := 1.0, Type := 1 } }
        Repo := generator_repository. Initial := array. Generator
        Participant := participant{ ID := 26 }
        ParticipantRepo := participant_repository. Initial := array. Participant
        Service := generator_service{ Repo := Repo, ParticipantRepo := ParticipantRepo, EffectProvider := effect_provider{} }

        # Act
        Events := Service.Buy(13, 26)

        # Assert
        if(not Events.Length = 0). return fail("Not the right number of Domain Events")

        # Pass
        return false

    CanAfford():?failure =
        # Arrange
        Generator := generator{ ID := 13, Cost := option. cost{ Amount := num. Value := 1.0, Type := 1 } }
        Repo := generator_repository. Initial := array. Generator
        Participant := participant{ ID := 26, Resources := map{ 1 => num. Value := 2.0 } }
        ParticipantRepo := participant_repository. Initial := array. Participant
        Service := generator_service{ Repo := Repo, ParticipantRepo := ParticipantRepo, EffectProvider := effect_provider{} }
        Ev1 := Ev_GenPurchased(entity_generator{}, 13)
        Ev2 := Ev_GenPurchased(entity_participant{}, 26)
        ExpectedAmount := num. Value := 1.0

        # Act
        Events := Service.Buy(13, 26)

        # Assert
        if(not Events.Length = 2). return fail("Not the right number of Domain Events")
        if(not Events.Includes[Ev1]). return fail("No generator purchased event for generator")
        if(not Events.Includes[Ev2]). return fail("No generator purchased event for participant")
        if(Part := ParticipantRepo.GetByID[26], not Part.GetResource(1).Equals[ExpectedAmount]):
            return fail("Did not subtract resources.")

        # Pass
        return false

    DoesNotHaveRequiredGens():?failure =
        # Arrange
        RequiredGenerator := generator{ ID := 13 }
        Generator := generator{ ID := 14, Required := option. array. 13 }
        Repo := generator_repository. Initial := array{ RequiredGenerator, Generator }
        ParticipantRepo := participant_repository. Initial := array{}
        Service := generator_service{ Repo := Repo, ParticipantRepo := ParticipantRepo, EffectProvider := effect_provider{} }

        # Act
        Events := Service.Buy(14, 26)

        # Assert
        if(not Events.Length = 0). return fail("Not the right number of Domain Events")

        # Pass
        return false

    SimpleBuyWithRequired():?failure =
        # Arrange
        Participant := participant. ID := 26
        RequiredGenerator := generator{ ID := 13, Counts := map{ 26 => 1 } }
        Generator := generator{ ID := 14, Required := option. array. 13 }
        Repo := generator_repository. Initial := array{ RequiredGenerator, Generator }
        ParticipantRepo := participant_repository. Initial := array. Participant
        Service := generator_service{ Repo := Repo, ParticipantRepo := ParticipantRepo, EffectProvider := effect_provider{} }
        Ev1 := Ev_GenPurchased(entity_generator{}, 14)
        Ev2 := Ev_GenPurchased(entity_participant{}, 26)

        # Act
        ProjectLog("THIS TEST")
        Events := Service.Buy(14, 26)

        # Assert
        if(not Events.Length = 2). return fail("Not the right number of Domain Events")
        if(not Events.Includes[Ev1]). return fail("No generator purchased event for generator")
        if(not Events.Includes[Ev2]). return fail("No generator purchased event for participant")

        # Pass
        return false

    # TODO: Add test that combines required and costs