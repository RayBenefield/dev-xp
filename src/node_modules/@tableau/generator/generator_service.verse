using { Tableau }
using { TableauAction }
using { TableauParticipant }

Ev_GenPurchased<constructor>(Type:entity, ID:int) := domain_event:
    Entity := Type
    EntityID := ID
    Event := ev_generator_purchased{}

gen_int_lens := type{_(:generator):[]int}
gen_num_lens := type{_(:generator):[]num}

generator_service<public> := class(service):
    Repo<public>:generator_repository
    EffectProvider<public>:effect_provider

    Buy<public>(GeneratorID:int, BuyerID:int):[]domain_event=
        var DomainEvents:[]domain_event = array{}
        if(Gen := Repo.GetByID[GeneratorID]):
            # if(Gen.IsStealable? and Gen.OwnerID <> OwnerID):
            #     set DomainEvents += array:
            #         domain_event:
            #             Entity := entity_participant
            #             EntityID := Gen.OwnerID
            #             Event := ev.GeneratorLost

            if(NewGenerator := Gen.IncreaseCount[BuyerID]):
                if (Repo.Update[NewGenerator]):
                    set DomainEvents += array:
                        Ev_GenPurchased(entity_generator{}, Gen.ID)
                        Ev_GenPurchased(entity_participant{}, BuyerID)

        return DomainEvents

    #
    # EXPERIMENTAL
    #
    Collect<public>():[]domain_event=
        var DomainEvents:[]domain_event = array{}

        Gens := Repo.GetAll()
        for(Gen:Gens, Abilities := Gen.Abilities, Ability:Abilities):
            var LastCommandModification:command = GeneratorAbilityToCommand(Ability, Gen)
            for (Effect:LastCommandModification.AfterEffects):
                set LastCommandModification = Effect.Play(LastCommandModification)

        return DomainEvents

    Lens_GeneratorID(Gen:generator):[]int = array. Gen.ID
    Lens_GeneratorOwnerID(Gen:generator):[]int = array. Gen.OwnerID
    Lens_GeneratorProductionRate(Gen:generator):[]num = array. Gen.GetProductionRate(Gen.OwnerID)

    GeneratorAbilityToCommand<public>(Ability:generator_ability, Gen:generator):command=
        IntLenses:[generator_int_lenses]gen_int_lens = map:
            generator_int_lenses.ID => Lens_GeneratorID
            generator_int_lenses.OwnerID => Lens_GeneratorOwnerID
        NumLenses:[generator_num_lenses]gen_num_lens = map:
            generator_num_lenses.ProductionRate => Lens_GeneratorProductionRate

        return if:
            SubjectLens := IntLenses[Ability.Subjects]
            TargetLens := IntLenses[Ability.Targets]
            MagnitudeLens := NumLenses[Ability.Magnitudes]
        then:
            command:
                Subjects := SubjectLens(Gen)
                Targets := TargetLens(Gen)
                Magnitudes := MagnitudeLens(Gen)
                AfterEffects := for(Eff:Ability.AfterEffects, Effect := EffectProvider.Get[Eff]). Effect
        else:
            command{}
