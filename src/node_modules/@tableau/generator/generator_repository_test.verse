
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }

using { TableauTesting }
using { TableauGenerator }

generator_repository_test := class(creative_device, test_suite):
    GetName<override>():string = "Generator Repository"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be fetchable by ID with initial data"
            Test := FetchWithInitial
        test_case:
            Name := "Should be fetchable by ID with Load"
            Test := FetchWithLoad
        test_case:
            Name := "Should clear existing when loading"
            Test := LoadShouldClearInitial
        test_case:
            Name := "Should be updated"
            Test := Update
        test_case:
            Name := "Only Owned Generators should be fetchable by OwnerID"
            Test := FetchOwnedGenerators
        test_case:
            Name := "Should fail if generator isn't owned by participant"
            Test := NotOwned
        test_case:
            Name := "Should pass if generator is owned by participant"
            Test := Owned

    FetchWithInitial():?failure =
        # Arrange
        ID := 13
        Generator := generator. ID := ID
        Repo := generator_repository. Initial := array. Generator

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get generator")

        # Pass
        return false

    FetchWithLoad():?failure =
        # Arrange
        ID := 13
        Generator := generator. ID := ID
        Repo := generator_repository{}
        Repo.Load(array. Generator)

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get generator")

        # Pass
        return false

    LoadShouldClearInitial():?failure =
        # Arrange
        ID := 13
        Generator := generator. ID := 12
        NewGenerator := generator{ ID := 13 }
        Repo := generator_repository. Initial := array. Generator
        Repo.Load(array. NewGenerator)

        # Act
        Generators := Repo.GetAll()

        # Assert
        if (not Generators.Length = 1). return fail("More than one generator was returned")
        if (not Generators[0].ID = ID). return fail("First generator isn't the right one")

        # Pass
        return false

    Update():?failure =
        # Arrange
        ID := 13
        Generator := generator{ ID := ID }
        Repo := generator_repository. Initial := array. Generator
        NewGenerator := generator{ ID := ID, MaxCount := 2 }

        # Act
        if (Gen := Repo.Update[NewGenerator]):
            # Assert
            if (Gen.MaxCount = 1). return fail("Max Count was not updated")
        else:
            return fail("Generator could not be updated")

        # Pass
        return false

    FetchOwnedGenerators():?failure =
        # Arrange
        OwnerID := 39
        NotCountedGenerator := generator{ ID := 13, Counts := map{ 39 => 0 } }
        CountedGenerator := generator{ ID := 26, Counts := map{ 39 => 1 } }
        NotOwnedGenerator := generator{ ID := 12 }
        Repo := generator_repository. Initial := array{NotCountedGenerator, CountedGenerator, NotOwnedGenerator}

        # Act
        OwnedGenerators := Repo.GetOwnedGenerators(OwnerID)

        # Assert
        if (not OwnedGenerators.Length = 1). return fail("More than one generator was returned")
        if (not OwnedGenerators[0].ID = 26). return fail("First generator isn't the right one")

        # Pass
        return false

    NotOwned():?failure =
        # Arrange
        OwnerID := 39
        NotOwnedGenerator := generator{ ID := 12 }
        Repo := generator_repository. Initial := array. NotOwnedGenerator

        # Act, Assert
        if (Repo.OwnsGenerator[OwnerID, 12]). return fail("Should not be owned")

        # Pass
        return false

    Owned():?failure =
        # Arrange
        OwnerID := 39
        OwnedGenerator := generator{ ID := 12, Counts := map{ 39 => 1 } }
        Repo := generator_repository. Initial := array. OwnedGenerator

        # Act, Assert
        if (not Repo.OwnsGenerator[OwnerID, 12]). return fail("Should be owned")

        # Pass
        return false
