using { /Verse.org/Simulation }

using { Tableau }
using { TableauAction }

CopyGenerator<constructor><public>(Old:generator)<transacts> := generator:
    ID := Old.ID
    OwnerID := Old.OwnerID
    Production := Old.Production
    MaxCount := Old.MaxCount
    Counts := Old.Counts
    Abilities := Old.Abilities

generator_int_lenses := enum:
    ID
    OwnerID
    # MaxCount
    # AllOwners
    # OwnerCount
    # Counts

generator_num_lenses := enum:
    # Production
    ProductionRate

generator_ability<public> := class<concrete>:
    @editable Subjects:generator_int_lenses = generator_int_lenses.OwnerID
    @editable Targets:generator_int_lenses = generator_int_lenses.ID
    @editable Magnitudes:generator_num_lenses = generator_num_lenses.ProductionRate
    @editable AfterEffects:[]effect_type = array. effect_type.AddResources

# TODO: Initialize all counts to not be higher than the MaxCount
# TODO: HasAny function to check if a participant has any of this generator
generator<public> := class<concrete>():
    @editable ID<public>:int = 0
    @editable OwnerID<public>:int = 0
    # @editable Count<public>:int = 0
    # @editable IsStealable<public>:logic = false
    @editable Production<public>:num = num. Value := 1.67
    @editable MaxCount<public>:int = 1
    Counts<public>:[int]int = map{}
    CommandMaker<public>:?command_maker = false
    @editable Abilities<public>:[]generator_ability = array{}

    HasOwner<public>()<decides><transacts>:void = OwnerID <> 0

    GetCount<public>()<computes>:int = Counts[OwnerID] or 0
    GetCount<public>(CounterID:int)<computes>:int = Counts[CounterID] or 0

    GetProductionRate<public>(ParticipantID:int):num=
        Count := GetCount(ParticipantID)
        if (Count = 0). return num{}
        Production * Count

    IsMaxed<public>()<decides><transacts>:void = HasOwner[] and GetCount(OwnerID) >= MaxCount
    IsMaxed<public>(CounterID:int)<decides><transacts>:void = GetCount(CounterID) >= MaxCount

    IncreaseCount<public>()<decides><transacts>:generator = HasOwner[] and IncreaseCount[OwnerID]
    IncreaseCount<public>(CounterID:int)<decides><transacts>:generator=
        if(IsMaxed[CounterID]). false?

        var NewCounts:[int]int = Self.Counts
        if (set NewCounts[CounterID] = NewCounts[CounterID] + 1 or 1) {}

        return generator:
            CopyGenerator<constructor>(Self)
            Counts := NewCounts

ToString<public>(Gen:generator):string=
    var Result:string = "\n"
    set Result += "  Generator #{Gen.ID}:\n"
    set Result += "\t- Max Count: {Gen.MaxCount}\n"
    set Result += "\t- Production Rate: {Gen.Production}\n"
    set Result += "\t- Counts ({Gen.Counts.Length}):\n"

    for (ID->Count:Gen.Counts). set Result += "\t\t{ID} -> {Count}\n"

    return Result
