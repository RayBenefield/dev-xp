
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /Verse.org/Simulation/Tags }

using { Tableau }
using { TableauAgent }
using { TableauGenerator }

generator_tag := class(tag){}
generator_device<public> := class(creative_device, updatable):

    # Entity State Management
    @editable InitialState<public>:generator = generator{}
    var GeneratorRepository:?generator_repository = false
    var AgentRepository:?agent_repository = false
    var CurrentState:?generator = false

    # Device Properties
    @editable Prop:creative_prop = creative_prop{}
    @editable Button:button_device = button_device{}
    @editable Owner:score_manager_device = score_manager_device{}

    # Commands for Controller
    BuyCommand<public>:event(command) = event(command){}

    Subscriptions<override>()<transacts>:[]event_subscription = array:
        event_subscription:
            Entity := entity_generator{}
            EntityID := option. InitialState.ID
    ClearState<override>():void= set CurrentState = false
    Update<override>()<suspends>:void=
        # No Animation Update
        if (not CurrentState?):
            if:
                Count := InitialState.Counts[InitialState.OwnerID]
                Count > 0
            then:
                Prop.Show()
            else:
                Prop.Hide()

            Owner.SetScoreAward(InitialState.OwnerID)
            if (InitialState.IsMaxed[]). Button.Disable() else. Button.Enable()
            set CurrentState = option. InitialState
            return

        # Animate between current and new state
        if:
            Repo := GeneratorRepository?
            OldState := CurrentState?
            NewState:= Repo.GetByID[OldState.ID]
        then:
            if:
                OldState.GetCount() <= 0
                NewState.GetCount() > 0
            then:
                Prop.Show()

            if:
                OldState.GetCount() > 0
                NewState.GetCount() <= 0
            then:
                Prop.Hide()

            Owner.SetScoreAward(NewState.OwnerID)
            if (NewState.IsMaxed[]). Button.Disable() else. Button.Enable()
            set CurrentState = option. NewState

    Command_Buy()<suspends>:void=
        Agent := Button.InteractedWithEvent.Await()
        if:
            Gen := CurrentState?
            ParticipantID := AgentRepository?.GetParticipant[Agent]?
        then:
            BuyCommand.Signal(
                command:
                    Subjects := array. Gen.ID
                    Targets := array. ParticipantID
            )

    Initialize<public>(
        GeneratorRepo:generator_repository,
        AgentRepo:agent_repository
    )<suspends>:void=
        set GeneratorRepository = option. GeneratorRepo
        set AgentRepository = option. AgentRepo
        spawn. FreshUpdate()

        # Events to Commands
        loop:
            # sync:
                Command_Buy()

LoadGeneratorDevices<public>():[]generator_device=
    TaggedDevices := GetCreativeObjectsWithTag(generator_tag{})
    for(Index -> Tagged : TaggedDevices, Device := generator_device[Tagged]). Device
