generator_repository<public> := class<concrete>():
    Initial<public>:[]generator = array{}
    var Keyed:[int]generator = map{}

    block. Load(Initial)
    Load<public>(New:[]generator)<transacts>:void=
        set Keyed = map{}
        for (G:New). if (set Keyed[G.ID] = G) {}

    GetAll<public>():[]generator = for(G:Keyed). G
    GetByID<public>(ID:int)<decides><transacts>:generator = Keyed[ID]

    Update<public>(Gen:generator)<decides><transacts>:generator=
        GetByID[Gen.ID]
        set Keyed[Gen.ID] = Gen

    GetOwnedGenerators<public>(OwnerID:int)<transacts>:[]generator=
        for (Generator:Keyed, Generator.GetCount(OwnerID) > 0). Generator

    OwnsGenerator<public>(OwnerID:int, GenID:int)<decides><transacts>:int=
        Gen := GetByID[GenID]
        Count := Gen.GetCount(OwnerID)
        Count > 0