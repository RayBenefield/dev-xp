
using { /Verse.org/Assets }
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Assets }
using { /Verse.org/Simulation/Tags }
using { /UnrealEngine.com/Temporary/Diagnostics }

using { Tableau }
using { TableauAgent }
using { TableauGenerator }
using { TableauParticipant }

generator_location_tag := class(tag){}
generator_location_device<public> := class(creative_device, updatable):

    # Entity State Management
    @editable GeneratorID<public>:int = 0
    @editable OwnerID<public>:int = 0
    var GeneratorRepository:?generator_repository = false
    var AgentRepository:?agent_repository = false
    var CurrentState:?generator = false
    ZoneVFX:particle_system = TycoonPack.Particles.Zone.P_BuyZone
    CancelZone:event() = event(){}

    # Device Properties
    @editable Prop:creative_prop = creative_prop{}
    @editable Button:button_device = button_device{}
    @editable Trigger:volume_device = volume_device{}

    # Commands for Controller
    BuyCommand<public>:event(command) = event(command){}

    Subscriptions<override>()<transacts>:[]event_subscription = array:
        event_subscription:
            Entity := entity_generator{}
            EntityID := option. GeneratorID
        event_subscription:
            Entity := entity_participant{}
            EntityID := option. OwnerID
    ClearState<override>():void={}
    Update<override>()<suspends>:void=
        # No Animation Update
        if:
            not CurrentState?
            Repo := GeneratorRepository?
            InitialState := Repo.GetByID[GeneratorID]
        then:
            if:
                Count := InitialState.Counts[OwnerID]
                Count > 0
            then:
                Prop.Show()
            else:
                Prop.Hide()

            if (HasRequiredGenerators[Repo, InitialState, OwnerID]). spawn. NewZone() else. CancelZone.Signal()
            if (InitialState.IsMaxed[OwnerID]):
                Button.Disable()
                CancelZone.Signal()
            else:
                Button.Enable()
                spawn. NewZone()

            set CurrentState = option. InitialState
            return

        # Animate between current and new state
        if:
            Repo := GeneratorRepository?
            OldState := CurrentState?
            NewState:= Repo.GetByID[OldState.ID]
        then:

            if:
                OldState.GetCount(OwnerID) <= 0
                NewState.GetCount(OwnerID) > 0
            then:
                Prop.Show()

            if:
                OldState.GetCount(OwnerID) > 0
                NewState.GetCount(OwnerID) <= 0
            then:
                Prop.Hide()

            if (HasRequiredGenerators[Repo, NewState, OwnerID]). spawn. NewZone() else. CancelZone.Signal()
            if (NewState.IsMaxed[OwnerID]):
                Button.Disable()
                CancelZone.Signal()
            else:
                Button.Enable()
                spawn. NewZone()
            set CurrentState = option. NewState

    NewZone()<suspends>:void=
        Zone:cancelable = SpawnParticleSystem(ZoneVFX, GetTransform().Translation)
        CancelZone.Await()
        Zone.Cancel()

    Command_Buy()<suspends>:void=
        Agent := race:
            Button.InteractedWithEvent.Await()
            Trigger.AgentEntersEvent.Await()
        if:
            Gen := CurrentState?
            ParticipantID := AgentRepository?.GetParticipant[Agent]?
            ParticipantID = OwnerID
        then:
            BuyCommand.Signal(
                command:
                    Subjects := array. Gen.ID
                    Targets := array. ParticipantID
            )

    Initialize<public>(
        GeneratorRepo:generator_repository,
        AgentRepo:agent_repository
    )<suspends>:void=
        set GeneratorRepository = option. GeneratorRepo
        set AgentRepository = option. AgentRepo
        spawn. FreshUpdate()

        # Events to Commands
        loop:
            # sync:
                Command_Buy()

LoadGeneratorLocationDevices<public>():[]generator_location_device=
    TaggedDevices := GetCreativeObjectsWithTag(generator_location_tag{})
    for(Index -> Tagged : TaggedDevices, Device := generator_location_device[Tagged]). Device
