
using { /Verse.org/Assets }
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Fortnite.com/Characters }
using { /UnrealEngine.com/Assets }
using { /Verse.org/Simulation/Tags }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /UnrealEngine.com/Temporary/Diagnostics }

using { Tableau }
using { TableauAgent }
using { TableauGenerator }
using { TableauParticipant }

generator_location_tag := class(tag){}
generator_location_device<public> := class(creative_device, updatable):

    # Entity State Management
    @editable GeneratorID<public>:int = 0
    @editable OwnerID<public>:int = 0
    var GeneratorRepository:?generator_repository = false
    var AgentRepository:?agent_repository = false
    var CurrentState:?generator = false
    var AlreadyZoned:logic = false
    ZoneVFX:particle_system = TycoonPack.Particles.Zone.P_BuyZone
    Bought:event() = event(){}
    InProximity:event(agent) = event(agent){}

    # Device Properties
    @editable Prop:creative_prop = creative_prop{}

    # Commands for Controller
    BuyCommand<public>:event(command) = event(command){}

    Subscriptions<override>()<transacts>:[]event_subscription = array:
        event_subscription:
            Entity := entity_generator{}
            EntityID := option. GeneratorID
        event_subscription:
            Entity := entity_participant{}
            EntityID := option. OwnerID
    ClearState<override>():void={}
    Update<override>()<suspends>:void=
        # No Animation Update
        if:
            not CurrentState?
            Repo := GeneratorRepository?
            InitialState := Repo.GetByID[GeneratorID]
        then:
            if (InitialState.ShouldBeVisible[OwnerID]). Prop.Show() else. Prop.Hide()
            if (ShouldBeBuyable[Repo, InitialState, OwnerID]). spawn. EnablePurchasing()

            set CurrentState = option. InitialState
            return

        # Animate between current and new state
        if:
            Repo := GeneratorRepository?
            OldState := CurrentState?
            NewState:= Repo.GetByID[OldState.ID]
        then:
            if (NewState.ShouldShowNow[OldState, OwnerID]). Prop.Show()
            if (NewState.ShouldHideNow[OldState, OwnerID]). Prop.Hide()

            if (ShouldBeBuyableNow[Repo, NewState, OldState, OwnerID]). spawn. EnablePurchasing()
            if (ShouldBeBoughtNow[Repo, NewState, OldState, OwnerID]). Bought.Signal()

            set CurrentState = option. NewState

    EnablePurchasing()<suspends>:void=
        if (AlreadyZoned = true). return
        Zone:cancelable = SpawnParticleSystem(ZoneVFX, GetTransform().Translation)
        spawn. TrackProximity()
        set AlreadyZoned = true
        Bought.Await()
        Zone.Cancel()
        set AlreadyZoned = false

    TrackProximity()<suspends>:void=
        race:
            Bought.Await()
            loop:
                if (Agent := AgentRepository?.GetAgent[OwnerID]?, Char := Agent.GetFortCharacter[]):
                    Position := Char.GetTransform().Translation
                    Proximity := Distance(Position, GetTransform().Translation)
                    if (Proximity < 150.0). InProximity.Signal(Agent)
                Sleep(0.1)

    Command_Buy()<suspends>:void=
        Agent := InProximity.Await()
        if:
            Gen := CurrentState?
            ParticipantID := AgentRepository?.GetParticipant[Agent]?
            ParticipantID = OwnerID
        then:
            BuyCommand.Signal(
                command:
                    Subjects := array. Gen.ID
                    Targets := array. ParticipantID
            )

    Initialize<public>(
        GeneratorRepo:generator_repository,
        AgentRepo:agent_repository
    )<suspends>:void=
        set GeneratorRepository = option. GeneratorRepo
        set AgentRepository = option. AgentRepo
        spawn. FreshUpdate()

        # Events to Commands
        loop:
            # sync:
                Command_Buy()

LoadGeneratorLocationDevices<public>():[]generator_location_device=
    TaggedDevices := GetCreativeObjectsWithTag(generator_location_tag{})
    for(Index -> Tagged : TaggedDevices, Device := generator_location_device[Tagged]). Device
