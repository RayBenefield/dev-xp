
using { /Verse.org/Assets }
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Fortnite.com/Characters }
using { /UnrealEngine.com/Assets }
using { /Verse.org/Simulation/Tags }
using { /Fortnite.com/Devices/CreativeAnimation }
using { /UnrealEngine.com/Temporary/UI }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes }

using { Tableau }
using { TableauAgent }
using { TableauProducer }
using { TableauParticipant }
using { TableauResource }

producer_state := class():
    VM<public>:producer_pos_vm
    var VFX<public>:producer_vfx_state = producer_vfx_state.NotInitialized
    var Count<public>:int = -1

producer_pos_ui_tag := class(tag){}
producer_pos_ui_device<public> := class(creative_device, updatable):

    # Entity State Management
    @editable ProducerIDs<public>:[]int = array{}
    @editable OwnerID<public>:int = 0

    # Dependencies
    var ProducerRepository:?producer_repository = false
    var ParticipantRepository:?participant_repository = false
    var AgentRepository:?agent_repository = false
    var BuyEffector:?effector = false
    var ProduceEffector:?effector = false

    # Local State Management
    var States:[int]producer_state = map{}
    Bought:event(int) = event(int){}
    Produce:event(int) = event(int){}
    Clear:event() = event(){}

    # VFX
    @editable BuildVFX:?particle_system = false

    # Device Properties
    @editable ShowProps:[]creative_prop = array{}
    @editable HideProps:[]creative_prop = array{}

    Subscriptions<override>()<transacts>:[]event_subscription = array:
        event_subscription:
            Entity := entity_producer{}
        event_subscription:
            Entity := entity_participant{}
            EntityID := option. OwnerID
    ClearState<override>():void={}
    Update<override>()<suspends>:void=
        for (State:States, VM := State.VM, ID := VM.ID, Count := State.Count):
            if:
                Repo := ProducerRepository?
                Prod := Repo.GetByID[ID]
                Part := ParticipantRepository?.GetByID[OwnerID]
            then:
                if (Cost := Prod.GetCost[Part.ID]):
                    VM.Cost.Set(Str2Msg("Cost: {Cost.Amount}"))
                VM.Count.Set(Str2Msg("Count: {Prod.GetCount(Part.ID)}"))
                NewState := WhichVFXState(Repo.GetAllMapped(), Prod, Part, Count)
                if (not NewState = State.VFX):
                    Clear.Signal()
                    NewCount := Prod.GetCount(OwnerID)
                    UpdateVFX(NewState, ID, State.Count, NewCount)
                    if:
                        set States[ID] = producer_state:
                            VFX := NewState
                            Count := NewCount
                            VM := VM

    UpdateVFX(State:producer_vfx_state, ID:int, Current:int, New:int)<suspends>:void=
        case(State):
            producer_vfx_state.AvailableAndFree => {}
            producer_vfx_state.AvailableNotAffordable => {}
            producer_vfx_state.AvailableAndAffordable => {}
            producer_vfx_state.Bought =>
                Bought.Signal(ID)
                UpdateProps(Current, New)
            producer_vfx_state.Maxed => {}
            _ => {}

    UpdateProps(Current:int, New:int)<suspends>:void=
        if (Current = New ). return

        for (Count := Current..New-1):
            if (Count + 1 = 0):
                UnShowProps()
            if (Prop := ShowProps[Count]):
                AnimateProps(array. Prop)
            if (Prop := HideProps[Count]):
                Prop.Hide()

    MakePropsVisible(Props:[]creative_prop)<suspends>:void = for(Prop:Props). Prop.Show()
    UnShowProps()<suspends>:void = for(Prop:ShowProps). Prop.Hide()
    AnimateProps(Props:[]creative_prop)<suspends>:void =
        StartKeyFrame:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=-100.0 }
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(180.0, 0.0, 0.0)
            DeltaScale := vector3 { X:=0.1, Y:=0.1, Z:=0.1 }
            Time := 0.0
        MovementKeyFrame: keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=100.0 }
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(-180.0, 0.0, 0.0)
            DeltaScale := vector3 { X:=10.0, Y:=10.0, Z:=10.0 }
            Time := 0.5
            Interpolation := EaseOut
        SquishDown: keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3 { X:=0.66, Y:=0.66, Z:=0.66 }
            Time := 0.1
            Interpolation := EaseIn
        SquishBack: keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3 { X:=1.5, Y:=1.5, Z:=1.5 }
            Time := 0.1
            Interpolation := EaseOut

        for(Prop:Props):
            if (AController := Prop.GetAnimationController[]):
                FortVaderKeyFrames:[]keyframe_delta = array { StartKeyFrame, MovementKeyFrame, SquishDown, SquishBack }
                AController.SetAnimation(FortVaderKeyFrames, ?Mode:=animation_mode.OneShot)
                AController.Play()
        Sleep(0.01)
        MakePropsVisible(Props)
        if (FirstProp := Props[0], VFX := BuildVFX?). SpawnParticleSystem(VFX, FirstProp.GetTransform().Translation)

    StartVFX(VFX:particle_system)<suspends>:void=
        Cancelable:cancelable = SpawnParticleSystem(VFX, GetTransform().Translation)
        Clear.Await()
        Cancelable.Cancel()

    Command_Buy()<suspends>:void={}
        # if (Effector := BuyEffector?):
        #     Effector.Play(
        #         command:
        #             Subjects := array. ID
        #             Targets := array. OwnerID
        #     )

    Command_Produce()<suspends>:void=
        ID := Produce.Await()
        if (Effector := ProduceEffector?):
            Effector.Play(
                command:
                    Subjects := array. ID
                    Targets := array. OwnerID
            )

    Initialize<public>(
        ProducerRepo:producer_repository,
        ParticipantRepo:participant_repository,
        AgentRepo:agent_repository,
        NewBuyEffector:buy_producer_effector,
        NewProduceEffector:produce_effector
    )<suspends>:void=
        set ProducerRepository = option. ProducerRepo
        set ParticipantRepository = option. ParticipantRepo
        set AgentRepository = option. AgentRepo
        set BuyEffector = option. NewBuyEffector
        set ProduceEffector = option. NewProduceEffector

        # Initial State setup
        for(ID:ProducerIDs):
            if:
                set States[ID] = producer_state:
                    VM := producer_pos_vm{ ID := ID, Buy := NOOP }

        ProducerPosUI := producer_pos_ui. VMs := for(S:States). S.VM
        if (
            Player := player[GetPlayspace().GetPlayers()[0]]
            PlayerUI := GetPlayerUI[Player]
        ):
            Canvas := ProducerPosUI.CreateCanvas()
            PlayerUI.AddWidget(Canvas, player_ui_slot{InputMode := ui_input_mode.All})

        for(State:States, ID := State.VM.ID):
            if (Prod := ProducerRepo.GetByID[ID]):
                State.VM.Name.Set(Str2Msg("Buy x1 {Prod.Name}"))
            spawn. ProduceTimer(ID)

        spawn. FreshUpdate()

        # Events to Commands
        loop:
            race:
                Command_Buy()
                Command_Produce()

    ProduceTimer(ID:int)<suspends>:void=
        Bought.Await()
        loop:
            if (Producer := ProducerRepository?.GetByID[ID]):
                Rate := Producer.GetRate(OwnerID)
                Sleep(Rate)
                Produce.Signal(ID)

    OnEnd<override>():void=
        Clear.Signal()

    NOOP():void={}

LoadProducerPosUiDevices<public>():[]producer_pos_ui_device=
    TaggedDevices := GetCreativeObjectsWithTag(producer_pos_ui_tag{})
    for(Index -> Tagged : TaggedDevices, Device := producer_pos_ui_device[Tagged]). Device
