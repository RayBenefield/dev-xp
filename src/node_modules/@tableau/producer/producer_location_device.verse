
using { /Verse.org/Assets }
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Fortnite.com/Characters }
using { /UnrealEngine.com/Assets }
using { /Verse.org/Simulation/Tags }
using { /Fortnite.com/Devices/CreativeAnimation }
using { /UnrealEngine.com/Temporary/SpatialMath }
using { /UnrealEngine.com/Temporary/Diagnostics }
using { /Fortnite.com/Devices/CreativeAnimation/InterpolationTypes }

using { Tableau }
using { TableauAgent }
using { TableauProducer }
using { TableauParticipant }

producer_location_tag := class(tag){}
producer_location_device<public> := class(creative_device, updatable):

    # Entity State Management
    @editable ProducerID<public>:int = 0
    @editable OwnerID<public>:int = 0
    var ProducerRepository:?producer_repository = false
    var AgentRepository:?agent_repository = false
    var CurrentState:?producer = false
    var AlreadyZoned:logic = false
    ZoneVFX:particle_system = TycoonPack.Particles.Zone.P_BuyZone
    BuildVFX:particle_system = TycoonPack.Particles.Smoke.P_Building
    Bought:event() = event(){}
    InProximity:event(agent) = event(agent){}

    # Device Properties
    @editable Props:[]creative_prop = array{}

    # Commands for Controller
    BuyCommand<public>:event(command) = event(command){}

    Subscriptions<override>()<transacts>:[]event_subscription = array:
        event_subscription:
            Entity := entity_producer{}
            EntityID := option. ProducerID
        event_subscription:
            Entity := entity_participant{}
            EntityID := option. OwnerID
    ClearState<override>():void={}
    Update<override>()<suspends>:void=
        # No Animation Update
        if:
            not CurrentState?
            Repo := ProducerRepository?
            InitialState := Repo.GetByID[ProducerID]
        then:
            if (InitialState.ShouldBeVisible[OwnerID]). ShowProps() else. HideProps()
            if (ShouldBeBuyable[Repo, InitialState, OwnerID]). spawn. EnablePurchasing()

            set CurrentState = option. InitialState
            return

        # Animate between current and new state
        if:
            Repo := ProducerRepository?
            OldState := CurrentState?
            NewState:= Repo.GetByID[OldState.ID]
        then:
            if (NewState.ShouldShowNow[OldState, OwnerID]). AnimateProps()
            if (NewState.ShouldHideNow[OldState, OwnerID]). HideProps()

            if (ShouldBeBuyableNow[Repo, NewState, OldState, OwnerID]). spawn. EnablePurchasing()
            if (ShouldBeBoughtNow[Repo, NewState, OldState, OwnerID]). Bought.Signal()

            set CurrentState = option. NewState

    ShowProps()<suspends>:void = for(Prop:Props). Prop.Show()
    HideProps()<suspends>:void = for(Prop:Props). Prop.Hide()
    AnimateProps()<suspends>:void =
        StartKeyFrame:keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=-100.0 }
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(180.0, 0.0, 0.0)
            DeltaScale := vector3 { X:=0.1, Y:=0.1, Z:=0.1 }
            Time := 0.0
        MovementKeyFrame: keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=100.0 }
            DeltaRotation := MakeRotationFromYawPitchRollDegrees(-180.0, 0.0, 0.0)
            DeltaScale := vector3 { X:=10.0, Y:=10.0, Z:=10.0 }
            Time := 0.5
            Interpolation := EaseOut
        SquishDown: keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3 { X:=0.66, Y:=0.66, Z:=0.66 }
            Time := 0.1
            Interpolation := EaseIn
        SquishBack: keyframe_delta = keyframe_delta:
            DeltaLocation := vector3 { X:=1.0, Y:=1.0, Z:=1.0 }
            DeltaRotation := IdentityRotation()
            DeltaScale := vector3 { X:=1.5, Y:=1.5, Z:=1.5 }
            Time := 0.1
            Interpolation := EaseOut

        for(Prop:Props):
            if (AController := Prop.GetAnimationController[]):
                FortVaderKeyFrames:[]keyframe_delta = array { StartKeyFrame, MovementKeyFrame, SquishDown, SquishBack }
                AController.SetAnimation(FortVaderKeyFrames, ?Mode:=animation_mode.OneShot)
                AController.Play()
        Sleep(0.01)
        ShowProps()
        if (FirstProp := Props[0]). SpawnParticleSystem(BuildVFX, FirstProp.GetTransform().Translation)

    EnablePurchasing()<suspends>:void=
        if (AlreadyZoned = true). return
        Zone:cancelable = SpawnParticleSystem(ZoneVFX, GetTransform().Translation)
        spawn. TrackProximity()
        set AlreadyZoned = true
        Bought.Await()
        Zone.Cancel()
        set AlreadyZoned = false

    TrackProximity()<suspends>:void=
        race:
            Bought.Await()
            loop:
                if (Agent := AgentRepository?.GetAgent[OwnerID]?, Char := Agent.GetFortCharacter[]):
                    Position := Char.GetTransform().Translation
                    Proximity := Distance(Position, GetTransform().Translation)
                    if (Proximity < 150.0). InProximity.Signal(Agent)
                Sleep(0.1)

    Command_Buy()<suspends>:void=
        Agent := InProximity.Await()
        if:
            Prod := CurrentState?
            ParticipantID := AgentRepository?.GetParticipant[Agent]?
            ParticipantID = OwnerID
        then:
            BuyCommand.Signal(
                command:
                    Subjects := array. Prod.ID
                    Targets := array. ParticipantID
            )

    Initialize<public>(
        ProducerRepo:producer_repository,
        AgentRepo:agent_repository
    )<suspends>:void=
        set ProducerRepository = option. ProducerRepo
        set AgentRepository = option. AgentRepo
        spawn. FreshUpdate()

        # Events to Commands
        loop:
            # sync:
                Command_Buy()

LoadProducerLocationDevices<public>():[]producer_location_device=
    TaggedDevices := GetCreativeObjectsWithTag(producer_location_tag{})
    for(Index -> Tagged : TaggedDevices, Device := producer_location_device[Tagged]). Device
