
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }

using { TableauTesting }
using { TableauProducer }

producer_test := class(creative_device, test_suite):
    GetName<override>():string = "Producer"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Producer Non-Owner should not be maxed"
            Test := IsNotMaxed
        test_case:
            Name := "Producer Non-Owner should be maxed"
            Test := IsMaxed
        test_case:
            Name := "Producer should increase its count"
            Test := IncreaseCount
        test_case:
            Name := "Producer should not increase its count when maxed"
            Test := NoIncreaseCountCuzMax
        test_case:
            Name := "Should have no production rate none are owned"
            Test := GetNoRate
        test_case:
            Name := "Should have the default rate of production with 1 count"
            Test := GetDefaultRate
        test_case:
            Name := "Should have double the rate of production with 2 counts"
            Test := GetDoubleRate
        test_case:
            Name := "Should be visible"
            Test := BeVisible
        test_case:
            Name := "Should show"
            Test := ShowNow
        test_case:
            Name := "Should not show"
            Test := NotShowNow
        test_case:
            Name := "Should hide"
            Test := HideNow
        test_case:
            Name := "Should not hide"
            Test := NotHideNow

    IsNotMaxed():?failure =
        # Arrange
        Producer := producer{ ID := 13, MaxCount := 1, Counts := map{ 26 => 1, 39 => 0 } }

        # Act, Assert
        if (Producer.IsMaxed[39]). return fail("Producer shouldn't be maxed")

        # Pass
        return false

    IsMaxed():?failure =
        # Arrange
        Producer := producer{ ID := 13, MaxCount := 1, Counts := map{ 26 => 0, 39 => 1 } }

        # Act, Assert
        if (not Producer.IsMaxed[39]). return fail("Producer should be maxed")

        # Pass
        return false

    IncreaseCount():?failure =
        # Arrange
        Producer := producer{ ID := 13, MaxCount := 1, Counts := map{ 26 => 0 } }
        var NewProd:producer = Producer

        # Act
        if (Value := Producer.IncreaseCount[26], set NewProd = Value) {}

        # Assert
        Count := NewProd.GetCount(26)
        if (Count = 0). return fail("Producer count didn't increase")

        # Pass
        return false

    NoIncreaseCountCuzMax():?failure =
        # Arrange
        Producer := producer{ ID := 13, MaxCount := 1, Counts := map{ 26 => 1 } }
        var NewProd:producer = Producer

        # Act
        if (Value := Producer.IncreaseCount[26], set NewProd = Value) {}

        # Assert
        Count := NewProd.GetCount(26)
        if (Count = 2). return fail("Producer should not have increased")

        # Pass
        return false

    GetNoRate():?failure =
        # Arrange
        Producer := producer{ ID := 13, Counts := map{ 26 => 0 } }
        var NewProd:producer = Producer

        # Act
        Rate := Producer.GetProductionRate(26)

        # Assert
        if (Rate.Value <> 0.0 or Rate.Exponent <> 0). return fail("Should not have a production rate")

        # Pass
        return false

    GetDefaultRate():?failure =
        # Arrange
        Producer := producer{ ID := 13, Counts := map{ 26 => 1 } }
        var NewProd:producer = Producer

        # Act
        Rate := Producer.GetProductionRate(26)

        # Assert
        if (Rate.Value <> 1.67 or Rate.Exponent <> 0). return fail("Should have default production rate")

        # Pass
        return false

    GetDoubleRate():?failure =
        # Arrange
        Producer := producer{ ID := 13, Counts := map{ 26 => 2 } }
        var NewProd:producer = Producer

        # Act
        Rate := Producer.GetProductionRate(26)

        # Assert
        if (Rate.Value <> 3.34 or Rate.Exponent <> 0). return fail("Should have the expected production rate")

        # Pass
        return false

    BeVisible():?failure =
        # Arrange
        Prod:= producer{ ID := 13, Counts := map{ 26 => 1 } }

        # Act, Assert
        if (not Prod.ShouldBeVisible[26]). return fail("Should actually be visible")

        # Pass
        return false

    ShowNow():?failure =
        # Arrange
        OldProd := producer{ ID := 13, Counts := map{ 26 => 0 } }
        NewProd := producer{ ID := 13, Counts := map{ 26 => 1 } }

        # Act, Assert
        if (not NewProd.ShouldShowNow[OldProd, 26]). return fail("Should actually be visible")

        # Pass
        return false

    NotShowNow():?failure =
        # Arrange
        OldProd := producer{ ID := 13, Counts := map{ 26 => 1 } }
        NewProd := producer{ ID := 13, Counts := map{ 26 => 1 } }

        # Act, Assert
        if (NewProd.ShouldShowNow[OldProd, 26]). return fail("Should already be visible")

        # Pass
        return false

    HideNow():?failure =
        # Arrange
        OldProd := producer{ ID := 13, Counts := map{ 26 => 1 } }
        NewProd := producer{ ID := 13, Counts := map{ 26 => 0 } }

        # Act, Assert
        if (not NewProd.ShouldHideNow[OldProd, 26]). return fail("Should be hiding")

        # Pass
        return false

    NotHideNow():?failure =
        # Arrange
        OldProd := producer{ ID := 13, Counts := map{ 26 => 0 } }
        NewProd := producer{ ID := 13, Counts := map{ 26 => 0 } }

        # Act, Assert
        if (NewProd.ShouldHideNow[OldProd, 26]). return fail("Should not be hiding")

        # Pass
        return false
