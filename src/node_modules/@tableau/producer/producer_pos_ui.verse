using { /Fortnite.com/UI }
using { /Verse.org/Simulation }
using { /Verse.org/Colors/NamedColors }
using { /UnrealEngine.com/Temporary/UI }
using { /UnrealEngine.com/Temporary/SpatialMath }

using { Tableau }
using { TableauResource }

buy_producer_ui<public> := class():
    VM<public>:producer_pos_vm

    Initialize<public>():[]widget =
        CostTextBlock := text_block:
            DefaultText := Str2Msg("Cost: 0")
            DefaultTextColor := White
            DefaultShadowOffset := option. vector2{X:=2.5,Y:=2.5}
            DefaultShadowColor := Black
        CountTextBlock := text_block:
            DefaultText := Str2Msg("Count: 0")
            DefaultTextColor := White
            DefaultShadowOffset := option. vector2{X:=2.5,Y:=2.5}
            DefaultShadowColor := Black
        ButtonTextBlock := text_block:
            DefaultText := Str2Msg("Buy")
            DefaultTextColor := White
            DefaultShadowOffset := option. vector2{X:=2.5,Y:=2.5}
            DefaultShadowColor := Black
        Button := button:
            Slot := button_slot:
                Widget := ButtonTextBlock
        ButtonTextBlock.SetShadowOpacity(1.0)
        BuyText := responsive_text_block:
            GooeyText := VM.Name
            TextBlock := ButtonTextBlock
        CostText := responsive_text_block:
            GooeyText := VM.Cost
            TextBlock := CostTextBlock
        CountText:= responsive_text_block:
            GooeyText := VM.Count
            TextBlock := CountTextBlock

        Button.OnClick().Subscribe(OnPressed)

        spawn. BuyText.Initialize()
        spawn. CostText.Initialize()
        spawn. CountText.Initialize()

        return array:
            Button
            CostTextBlock
            CountTextBlock

    OnPressed(Msg:widget_message):void = VM.Buy()

producer_pos_ui<public> := class(game_hud):
    VMs<public>:[]producer_pos_vm

    CreateCanvas<override>():canvas=
        ProducerUIs:[]buy_producer_ui = for(VM:VMs). buy_producer_ui. VM := VM
        Widgets:[]widget = Concatenate(for(ProducerUI:ProducerUIs). ProducerUI.Initialize())
        AllWidgets := stack_box:
            Orientation := orientation.Vertical
            Slots := for(Widget:Widgets):
                stack_box_slot:
                    Widget := Widget
                    HorizontalAlignment := horizontal_alignment.Left
        MakeCanvas(AllWidgets)

    MakeCanvas(Widget:widget):canvas=
        canvas:
            Slots := array:
                canvas_slot:
                    Offsets := margin{Top := 128.0, Left := 128.0, Right := 0.0, Bottom := 0.0}
                                                        Widget := Widget
