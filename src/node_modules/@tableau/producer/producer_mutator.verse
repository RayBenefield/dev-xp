using { Tableau }
using { TableauParticipant }

producer_mutator<public> := class(mutator):
    GameState<public>:game_state
    Repo<public>:producer_repository
    ParticipantRepository<public>:participant_repository
    BuyEffector<public>:oldeffector

    ApplyEvents<override>(Events:[]domain_event):void=
        for(Ev:Events):
            case(Ev.Event.Name()):
                "Producer Added" => spawn. AddProducer(Ev.Subject)
                "Producer Purchased" => spawn. PurchaseProducer(Ev.Subject, Ev.Target)
                _ => {}

    AddProducer(ID:string)<suspends>:void=
        if (Initial := Repo.GetByID[ID]):
            Producer := GameState.AddProducer(Initial, BuyEffector)
            Participants := ParticipantRepository.GetAll()
            for (Participant:Participants):
                Producer.AddParticipant(Participant.ID, Initial)

    PurchaseProducer(ID:string, ParticipantID:string)<suspends>:void=
        Producer := GameState.AwaitProducer(ID)
        if:
            Prod := Repo.GetByID[ID]
            Participant := Producer.Participants[ParticipantID]
        then:
            Amount := Prod.GetCost[ParticipantID].Amount or num{}
            Participant.Cost.Set(Str2Msg("Cost: {Amount}"))
            Participant.Count.Set(Str2Msg("Count: {Prod.GetCount(ParticipantID)}"))
