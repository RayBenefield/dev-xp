producer_repository<public> := class<concrete>():
    Initial<public>:[]producer = array{}
    var Keyed:[int]producer = map{}

    block. Load(Initial)
    Load<public>(New:[]producer)<transacts>:void=
        set Keyed = map{}
        for (G:New). if (set Keyed[G.ID] = G) {}

    GetAll<public>():[]producer = for(G:Keyed). G
    GetByID<public>(ID:int)<decides><transacts>:producer = Keyed[ID]

    Update<public>(Prod:producer)<decides><transacts>:producer=
        GetByID[Prod.ID]
        set Keyed[Prod.ID] = Prod

    GetOwnedProducers<public>(OwnerID:int)<transacts>:[]producer=
        for (Producer:Keyed, Producer.GetCount(OwnerID) > 0). Producer

    OwnsProducer<public>(OwnerID:int, ProdID:int)<decides><transacts>:int=
        Prod := GetByID[ProdID]
        Count := Prod.GetCount(OwnerID)
        Count > 0