
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }

using { TableauTesting }
using { TableauProducer }

producer_repository_test := class(creative_device, test_suite):
    GetName<override>():string = "Producer Repository"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be fetchable by ID with initial data"
            Test := FetchWithInitial
        test_case:
            Name := "Should be fetchable by ID with Load"
            Test := FetchWithLoad
        test_case:
            Name := "Should clear existing when loading"
            Test := LoadShouldClearInitial
        test_case:
            Name := "Should be updated"
            Test := Update
        test_case:
            Name := "Only Owned Producers should be fetchable by OwnerID"
            Test := FetchOwnedProducers
        test_case:
            Name := "Should fail if producer isn't owned by participant"
            Test := NotOwned
        test_case:
            Name := "Should pass if producer is owned by participant"
            Test := Owned

    FetchWithInitial():?failure =
        # Arrange
        ID := "13"
        Producer := producer. ID := ID
        Repo := producer_repository. Initial := array. Producer

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get producer")

        # Pass
        return false

    FetchWithLoad():?failure =
        # Arrange
        ID := "13"
        Producer := producer. ID := ID
        Repo := producer_repository{}
        Repo.Load(array. Producer)

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get producer")

        # Pass
        return false

    LoadShouldClearInitial():?failure =
        # Arrange
        ID := "13"
        Producer := producer. ID := "12"
        NewProducer := producer{ ID := "13" }
        Repo := producer_repository. Initial := array. Producer
        Repo.Load(array. NewProducer)

        # Act
        Producers := Repo.GetAll()

        # Assert
        if (not Producers.Length = 1). return fail("More than one producer was returned")
        if (not Producers[0].ID = ID). return fail("First producer isn't the right one")

        # Pass
        return false

    Update():?failure =
        # Arrange
        ID := "13"
        Producer := producer{ ID := ID }
        Repo := producer_repository. Initial := array. Producer
        NewProducer := producer{ ID := ID, MaxCount := 2 }

        # Act
        if (Prod := Repo.Update[NewProducer]):
            # Assert
            if (Prod.MaxCount = 1). return fail("Max Count was not updated")
        else:
            return fail("Producer could not be updated")

        # Pass
        return false

    FetchOwnedProducers():?failure =
        # Arrange
        OwnerID := "39"
        NotCountedProducer := producer{ ID := "13", Counts := map{ "39" => 0 } }
        CountedProducer := producer{ ID := "26", Counts := map{ "39" => 1 } }
        NotOwnedProducer := producer{ ID := "12" }
        Repo := producer_repository. Initial := array{NotCountedProducer, CountedProducer, NotOwnedProducer}

        # Act
        OwnedProducers := Repo.GetOwnedProducers(OwnerID)

        # Assert
        if (not OwnedProducers.Length = 1). return fail("More than one producer was returned")
        if (not OwnedProducers[0].ID = "26"). return fail("First producer isn't the right one")

        # Pass
        return false

    NotOwned():?failure =
        # Arrange
        OwnerID := "39"
        NotOwnedProducer := producer{ ID := "12" }
        Repo := producer_repository. Initial := array. NotOwnedProducer

        # Act, Assert
        if (Repo.OwnsProducer[OwnerID, "12"]). return fail("Should not be owned")

        # Pass
        return false

    Owned():?failure =
        # Arrange
        OwnerID := "39"
        OwnedProducer := producer{ ID := "12", Counts := map{ "39" => 1 } }
        Repo := producer_repository. Initial := array. OwnedProducer

        # Act, Assert
        if (not Repo.OwnsProducer[OwnerID, "12"]). return fail("Should be owned")

        # Pass
        return false
