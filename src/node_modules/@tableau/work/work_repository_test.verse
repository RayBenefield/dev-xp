using { /Fortnite.com/Devices }

using { TableauTesting }

work_repository_test := class(creative_device, test_suite):
    GetName<override>():string = "Work Repository"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be fetchable by ID with initial data"
            Test := FetchWithInitial
        test_case:
            Name := "Should be fetchable by ID with Load"
            Test := FetchWithLoad
        test_case:
            Name := "Should clear existing when loading"
            Test := LoadShouldClearInitial
        test_case:
            Name := "Should be updated"
            Test := Update

    FetchWithInitial():?failure =
        # Arrange
        ID := "13"
        Work := work. ID := ID
        Repo := work_repository. Initial := array. Work

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get work")

        # Pass
        return false

    FetchWithLoad():?failure =
        # Arrange
        ID := "13"
        Work := work. ID := ID
        Repo := work_repository{}
        Repo.Load(array. Work)

        # Act, Assert
        if (not Repo.GetByID[ID]). return fail("Can't get work")

        # Pass
        return false

    LoadShouldClearInitial():?failure =
        # Arrange
        ID := "13"
        Work := work. ID := "12"
        NewWork := work{ ID := "13" }
        Repo := work_repository. Initial := array. Work
        Repo.Load(array. NewWork)

        # Act
        Works := Repo.GetAll()

        # Assert
        if (not Works.Length = 1). return fail("More than one work was returned")
        if (not Works[0].ID = ID). return fail("First work isn't the right one")

        # Pass
        return false

    Update():?failure =
        # Arrange
        ID := "13"
        Work := work{ ID := ID }
        Repo := work_repository. Initial := array. Work
        NewWork:= work{ ID := ID, Phase := phase.WarmUp }

        # Act
        if (UpdatedWork := Repo.Update[NewWork]):
            # Assert
            if (UpdatedWork.Phase = phase.Available). return fail("Phase was not updated")
        else:
            return fail("Work could not be updated")

        # Pass
        return false
