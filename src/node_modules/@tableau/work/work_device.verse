using { /Fortnite.com/Devices }
using { /Fortnite.com/Devices/CreativeAnimation }
using { /Verse.org/Simulation }
using { /Verse.org/Simulation/Tags }
using { /UnrealEngine.com/Temporary/SpatialMath }

using { Tableau }
using { TableauWork }

work_tag := class(tag){}
work_device<public> := class(creative_device, updatable):

    # Entity State Management
    @editable InitialState<public>:work = work{}
    var WorkRepository:?work_repository = false
    var CurrentState:?work = false

    # Device Properties
    @editable StartWorkButton:button_device = button_device{}
    @editable ProgressBar:creative_prop = creative_prop{}

    # Commands for Controller
    StartWorkCommand<public>:event(command) = event(command){}
    CompleteWorkCommand<public>:event(command) = event(command){}

    Subscriptions<override>()<transacts>:[]event_subscription = array{}
    ClearState<override>():void = set CurrentState = false
    Update<override>()<suspends>:void=
        if (not CurrentState?):
            if (InitialState.IsAvailable[]). StartWorkButton.Enable() else. StartWorkButton.Disable()
            set CurrentState = option. InitialState
            return

        if:
            WorkRepo := WorkRepository?
            OldWork := CurrentState?
            NewWork := WorkRepo.GetByID[OldWork.ID]
        then:
            if:
                OldWork.IsAvailable[]
                not NewWork.IsAvailable[]
                Anim := ProgressBar.GetAnimationController[]
            then:
                StartWorkButton.Disable()
                Anim.Play()
                Anim.MovementCompleteEvent.Await()
                CompleteWorkCommand.Signal(command. Subject := OldWork.ID)

            if:
                not OldWork.IsAvailable[]
                NewWork.IsAvailable[]
            then:
                StartWorkButton.Enable()

            set CurrentState = option. NewWork

    Initialize<public>(
        WorkRepo:work_repository
    )<suspends>:void=
        set WorkRepository = option. WorkRepo
        spawn. FreshUpdate()

        if (Anim := ProgressBar.GetAnimationController[]):
            KeyFrames:[]keyframe_delta = array:
                keyframe_delta:
                    DeltaLocation := vector3{}
                    DeltaRotation := IdentityRotation()
                    DeltaScale := vector3{X:=-1.0, Y:=1.0, Z:=1.0}
                    Time := 0.0
                keyframe_delta:
                    DeltaLocation := vector3{}
                    DeltaRotation := IdentityRotation()
                    DeltaScale := vector3{X:=2.0, Y:=1.0, Z:=1.0}
                    Time := InitialState.WarmUpDuration
                keyframe_delta:
                    DeltaLocation := vector3{}
                    DeltaRotation := IdentityRotation()
                    DeltaScale := vector3{X:=-0.5, Y:=1.0, Z:=1.0}
                    Time := 0.0

            Anim.SetAnimation(KeyFrames, ?Mode:=animation_mode.OneShot)

        # Events to Commands
        loop:
            # sync:
                Command_StartWork()

    Command_StartWork()<suspends>:void=
        block:
            StartWorkButton.InteractedWithEvent.Await()
            if (ID := CurrentState?.ID):
                StartWorkCommand.Signal(command. Subject := ID)

LoadWorkDevices<public>():[]work_device=
    TaggedDevices := GetCreativeObjectsWithTag(work_tag{})
    for(Index -> Tagged : TaggedDevices, Device := work_device[Tagged]). Device
