using { /Fortnite.com/Devices }

using { TableauTesting }

work_test := class(creative_device, test_suite):
    GetName<override>():string = "Work"
    GetTests<override>():[]test_case = array:
        test_case:
            Name := "Should be available by default"
            Test := DefaultAvailable
        test_case:
            Name := "Should start work if available"
            Test := StartWorkWhileAvailable
        test_case:
            Name := "Should not start work if not available"
            Test := StartWorkWhileAvailable
        test_case:
            Name := "Should complete work if in warmup"
            Test := CompleteWorkWhenInWarmUp
        test_case:
            Name := "Should not complete work if available"
            Test := DontCompleteWorkIfAvailable

    DefaultAvailable():?failure =
        # Arrange
        Work := work{ ID := "13" }

        # Act, Assert
        if (not Work.IsAvailable[]). return fail("Work is not available")

        # Pass
        return false

    StartWorkWhileAvailable():?failure =
        # Arrange
        Work := work{ ID := "13", Phase := phase.Available }

        # Act, Assert
        if (NewWork := Work.StartWork[]):
            if (NewWork.IsAvailable[]). return fail("Work is incorrectly available, after starting work")
        else:
            return fail("Unable to start work")

        # Pass
        return false

    DontStartWorkWhileNotAvailable():?failure =
        # Arrange
        Work := work{ ID := "13", Phase := phase.WarmUp}

        # Act, Assert
        if (Work.StartWork[]):
            return fail("Work incorrectly started when not available")

        # Pass
        return false

    CompleteWorkWhenInWarmUp():?failure =
        # Arrange
        Work := work{ ID := "13", Phase := phase.WarmUp}

        # Act, Assert
        if (NewWork := Work.CompleteWork[]):
            if (not NewWork.IsAvailable[]). return fail("Work is not available after completing work")
        else:
            return fail("Unable to complete work")

        # Pass
        return false

    DontCompleteWorkIfAvailable():?failure =
        # Arrange
        Work := work{ ID := "13", Phase := phase.Available}

        # Act, Assert
        if (Work.CompleteWork[]):
            return fail("Work incorrectly completed when it was available")

        # Pass
        return false

