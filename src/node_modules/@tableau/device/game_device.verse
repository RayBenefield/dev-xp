
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /Verse.org/Simulation/Tags
using. /UnrealEngine.com/Temporary/Diagnostics

using. Tableau
using. TableauResource

game_device := class(creative_device):

    OnBegin<override>()<suspends>:void=
        GameState := game_state{}

        SideEffectDevices := LoadSideEffectDevices()
        for(Device:SideEffectDevices). spawn. SetupSideEffects(GameState, Device)
        Print("Play Devices: {SideEffectDevices.Length}")

        ConfigDevices := LoadConfigDevices()
        for (Device:ConfigDevices):
            NewResources := Device.GetResources()
            for (Resource:NewResources). GameState.AddResource(Resource)
        Print("Logic Devices: {ConfigDevices.Length}")

        PlayerResource := resource:
            ID := "Player1"
            Type := "Player"
            Props := map:
                "Possessed By" => prop_agent. Default := option. GetPlayspace().GetPlayers()[0]
        GameState.AddResource(PlayerResource)

    SetupSideEffects(GameState:game_state, Device:side_effect_device)<suspends>:void=
        if (SubType := Device.GetPerSubType()?, Type := Device.GetPerType()?):
            TypeSideEffectPocessor(GameState, Device, Type, SubType)
        if (SubType := Device.GetPerSubType()?, ResourceID := Device.GetResourceID()?):
            ResourceSideEffectPocessor(GameState, Device, ResourceID, SubType)
        else if (Type := Device.GetPerType()?):
            TypeSideEffectPocessor(GameState, Device, Type)
        else if (ResourceID := Device.GetResourceID()?):
            ResourceSideEffectPocessor(GameState, Device, ResourceID)

    ResourceSideEffectPocessor(GameState:game_state, Device:side_effect_device, ResourceID:string)<suspends>:void=
        GameState.AwaitResource(ResourceID)
        ProcessSideEffects(GameState, Device, ResourceID, "")
    ResourceSideEffectPocessor(GameState:game_state, Device:side_effect_device, ResourceID:string, SubType:string)<suspends>:void=
        var AllSubTypes:[]string = array{}
        var ProcessedPairs:[string]logic = map{}
        loop:
            block:
                NewSubType := GameState.ResourceAddedEvent(SubType).Await()
                set AllSubTypes += array. NewSubType
            for (NewSubType:AllSubTypes):
                if (not ProcessedPairs[ResourceID+" "+NewSubType]):
                    if. set ProcessedPairs[ResourceID+" "+NewSubType] = true
                    spawn. ProcessSideEffects(GameState, Device, ResourceID, NewSubType)

    TypeSideEffectPocessor(GameState:game_state, Device:side_effect_device, Type:string, SubType:string)<suspends>:void=
        var AllTypes:[]string = array{}
        var AllSubTypes:[]string = array{}
        var ProcessedPairs:[string]logic = map{}
        loop:
            race:
                block:
                    NewType := GameState.ResourceAddedEvent(Type).Await()
                    set AllTypes += array. NewType
                block:
                    NewSubType := GameState.ResourceAddedEvent(SubType).Await()
                    set AllSubTypes += array. NewSubType
            for (NewType:AllTypes, NewSubType:AllSubTypes):
                if (not ProcessedPairs[NewType+" "+NewSubType]):
                    if. set ProcessedPairs[NewType+" "+NewSubType] = true
                    spawn. ProcessSideEffects(GameState, Device, NewType, NewSubType)

    TypeSideEffectPocessor(GameState:game_state, Device:side_effect_device, Type:string)<suspends>:void=
        loop:
            ResourceID := GameState.ResourceAddedEvent(Type).Await()
            spawn. ProcessSideEffects(GameState, Device, ResourceID, "")

    # TODO: Refactor out helpers using `TapWith` when parametrics are working properly
    ProcessSideEffects(GameState:game_state, Device:side_effect_device, ResourceID:string, SubTypeID:string)<suspends>:void=
        Scoped := scoped_state{ GameState := GameState, Source := ResourceID, PlayerID := SubTypeID }
        SideEffects := Device.GetSideEffects(Scoped)

        for (Effect:SideEffects). if (E := first_side_effect[Effect]). E.FN()
        Sleep(0.0)

        for (Effect:SideEffects):
            if (E := tap_side_effect[Effect]):
                spawn. GameState.OnUpdated(ResourceID, E.GetPropertyID(), SubTypeID, E.FN)
            if (E := bool_side_effect[Effect]):
                spawn. GameState.SyncBool(ResourceID, E.GetPropertyID(), SubTypeID, E.FN)
            if (E := float_side_effect[Effect]):
                spawn. GameState.SyncFloat(ResourceID, E.GetPropertyID(), SubTypeID, E.FN)
            if (E := int_side_effect[Effect]):
                spawn. GameState.SyncInt(ResourceID, E.GetPropertyID(), SubTypeID, E.FN)
            if (E := num_side_effect[Effect]):
                spawn. GameState.SyncNum(ResourceID, E.GetPropertyID(), SubTypeID, E.FN)
            if (E := str_side_effect[Effect]):
                spawn. GameState.SyncStr(ResourceID, E.GetPropertyID(), SubTypeID, E.FN)
            if (E := vec3_side_effect[Effect]):
                spawn. GameState.SyncVec3(ResourceID, E.GetPropertyID(), SubTypeID, E.FN)
