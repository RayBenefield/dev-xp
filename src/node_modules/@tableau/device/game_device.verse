
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /Verse.org/Simulation/Tags
using. /UnrealEngine.com/Temporary/Diagnostics

game_device := class(creative_device):

    OnBegin<override>()<suspends>:void=
        GameState := game_state. Resources := map{ "GLOBAL" => CreateGlobalsResource() }

        TableauDevices := LoadTableauDevices()
        for(Device:TableauDevices). spawn. SetupSideEffects(GameState, Device)
        for (Device:TableauDevices):
            NewResources := Device.GetResources()
            for (Resource:NewResources). GameState.AddResource(Resource)
        Print("Found Devices: {TableauDevices.Length}")

        PlayerResource := resource:
            ID := "Player1"
            Type := "Player"
            Props := map:
                "Possessed By" => UEAgent of option. GetPlayspace().GetPlayers()[0]
        GameState.AddResource(PlayerResource)

    SetupSideEffects(GameState:game_state, Device:tableau_device)<suspends>:void=
        if (SubType := Device.GetPerSubType()?, Type := Device.GetPerType()?):
            TypeSideEffectPocessor(GameState, Device, Type, SubType)
        if (SubType := Device.GetPerSubType()?, ResourceID := Device.GetResourceID()?):
            ResourceSideEffectPocessor(GameState, Device, ResourceID, SubType)
        else if (Type := Device.GetPerType()?):
            TypeSideEffectPocessor(GameState, Device, Type)
        else if (ResourceID := Device.GetResourceID()?):
            ResourceSideEffectPocessor(GameState, Device, ResourceID)

    ResourceSideEffectPocessor(GameState:game_state, Device:tableau_device, ResourceID:string)<suspends>:void=
        GameState.AwaitResource(ResourceID)
        ProcessSideEffects(GameState, Device, ResourceID, "")
    ResourceSideEffectPocessor(GameState:game_state, Device:tableau_device, ResourceID:string, SubType:string)<suspends>:void=
        var AllSubTypes:[]string = array{}
        var ProcessedPairs:[string]logic = map{}
        loop:
            block:
                NewSubType := GameState.ResourceAddedEvent(SubType).Await()
                set AllSubTypes += array. NewSubType
            for (NewSubType:AllSubTypes):
                if (not ProcessedPairs[ResourceID+" "+NewSubType]):
                    if. set ProcessedPairs[ResourceID+" "+NewSubType] = true
                    spawn. ProcessSideEffects(GameState, Device, ResourceID, NewSubType)

    TypeSideEffectPocessor(GameState:game_state, Device:tableau_device, Type:string, SubType:string)<suspends>:void=
        var AllTypes:[]string = array{}
        var AllSubTypes:[]string = array{}
        var ProcessedPairs:[string]logic = map{}
        loop:
            race:
                block:
                    NewType := GameState.ResourceAddedEvent(Type).Await()
                    set AllTypes += array. NewType
                block:
                    NewSubType := GameState.ResourceAddedEvent(SubType).Await()
                    set AllSubTypes += array. NewSubType
            for (NewType:AllTypes, NewSubType:AllSubTypes):
                if (not ProcessedPairs[NewType+" "+NewSubType]):
                    if. set ProcessedPairs[NewType+" "+NewSubType] = true
                    spawn. ProcessSideEffects(GameState, Device, NewType, NewSubType)

    TypeSideEffectPocessor(GameState:game_state, Device:tableau_device, Type:string)<suspends>:void=
        loop:
            ResourceID := GameState.ResourceAddedEvent(Type).Await()
            spawn. ProcessSideEffects(GameState, Device, ResourceID, "")

    # TODO: Refactor out helpers using `TapWith` when parametrics are working properly
    ProcessSideEffects(GameState:game_state, Device:tableau_device, ResourceID:string, SubTypeID:string)<suspends>:void=
        Scoped := scoped_state{ GameState := GameState, Source := ResourceID, PlayerID := SubTypeID }
        SideEffects := Device.GetSideEffects(Scoped)

        for (Effect:SideEffects). if (E := first_side_effect[Effect]). E.FN()
        Sleep(0.0)

        for (Effect:SideEffects):
            if (E := tap_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.OnUpdated(PropSource, SubTypeID, E.FN)
            if (E := bool_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncBool(PropSource, SubTypeID, E.FN)
            if (E := float_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncFloat(PropSource, SubTypeID, E.FN)
            if (E := str_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncStr(PropSource, SubTypeID, E.FN)
            if (E := debug_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncStr(PropSource, SubTypeID, E.FN)
            if (E := msg_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncStr(PropSource, SubTypeID, E.FN)
            if (E := vec3_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncVec3(PropSource, SubTypeID, E.FN)
            if (E := action_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.AttachAction(PropSource, SubTypeID, E.Event)
