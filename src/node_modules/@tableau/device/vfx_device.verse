
using. /Verse.org/Assets
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /UnrealEngine.com/Assets
using. /UnrealEngine.com/Temporary/SpatialMath

using. Vertex

vfx_controller<public> := class():
    ParticleMap<public>:[string]particle_system = map{}
    var ParticleSystem<public>:?particle_system = false
    var Location<public>:vector3 = vector3{}

    SpawnVFX<public>()<suspends>:void= if (PS := ParticleSystem?). SpawnParticleSystem(PS, Location)
    SetLocation<public>(Value:vector3)<suspends>:void= set Location = Value
    SetParticle<public>(Value:string)<suspends>:void= if (PS := ParticleMap[Value]). set ParticleSystem = option. PS

vfx_device<public> := class(tableau_device):
    @editable Trigger:?prop_path = false
    @editable Location:?prop_path = false
    @editable ParticleID:?prop_path = false

    ParticleSystem<public>:?particle_system = false
    ParticleMap<public>:[string]particle_system = map{}

    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        VFX := vfx_controller{ ParticleSystem := ParticleSystem, ParticleMap := ParticleMap, Location := GetTransform().Translation }
        FilterOptions of array:
            option. Push(Trigger?, VFX.SpawnVFX)
            option. PushVec3(Location?, VFX.SetLocation)
            option. PushStr(ParticleID?, VFX.SetParticle)
