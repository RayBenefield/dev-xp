
using. /Fortnite.com/Devices
using. /Verse.org/Simulation

using. Vertex

CreateSelectorResource<public>(ResourceID:string, Items:[]string, Wrap:logic):resource=
    CreatedProps := CombineAll of array:
        CreateMap of for(Index->Item:Items). ("{Item} Index", Integer of Index+1)
        CreateMap of for(Item:Items). ("{Item} Label", Str of Item)
        CreateMap of for(Item:Items). ("Is {Item}", Bool of (Path("Current Index"), "Int =", Path("{Item} Index")))

    CreatedActions := CombineAll of array:
        CreateMap of for(Item:Items). ("Set {Item}", Action of Set("Current Index").To("{Item} Index"))

    resource:
        ID := ResourceID
        Props := CreatedProps.CombineWithAll of map:
            "All Types" => Strs of Items
            "Selection" => Str of (Path("All Types"), "Get", Path("Current Index"))
            "Current Index" => Integer of 1
            "New Index" => Integer of (Path("Current Index"), "+", ONE())
            "Previous Index" => Integer of (Path("Current Index"), "-", ONE())
            "Type Count" => Integer of (Path("All Types"), "Length")
            "Is Last Type" => Bool of (Path("Current Index"), "Int >=", Path("Type Count"))
            "Is First Type" => Bool of (Path("Current Index"), "Int <=", ONE())
            "Wrap" => Bool of Wrap
        Actions := CreatedActions.CombineWithAll of map:
            "Next" => Action of array:
                IsTrue("Is Last Type").Else("Go to Next")
                IsTrue("Wrap")
                Set("Current Index").To(ONE())
            "Previous" => Action of array:
                IsTrue("Is First Type").Else("Go to Previous")
                IsTrue("Wrap")
                Set("Current Index").To("Type Count")
            "Go to Next" => Action of Set("Current Index").To("New Index")
            "Go to Previous" => Action of Set("Current Index").To("Previous Index")

selector_device<public> := class(tableau_device):
    @editable ResourceID<override>:string = "Selector"
    @editable Items<public>:[]string = array{}
    @editable Wrap<public>:logic = true

    GetResources<override>():[]resource= array. CreateSelectorResource(ResourceID, Items, Wrap)