
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Vertex

filter_agent_v0_1 := class():
    Input:input_trigger_device
    var Agent<public>:?agent = false
    PressedEvent<public>:event() = event(){}
    ReleasedEvent<public>:event() = event(){}
    UnregisteredEvent<public>:event() = event(){}

    Init(Context:context)<suspends>:void=
        # Print("Initializing CONTROLLER")
        if(NewAgent := Agent?):
            # Print("Initializing CONTROLLER - With Agent")
            Input.Register(NewAgent)
            spawn. HandlePressed(NewAgent)
            spawn. HandleReleased(NewAgent)
    HandlePressed(NewAgent:agent)<suspends>:void=
        race:
            loop:
                TriggeredAgent := Input.PressedEvent.Await()
                if(TriggeredAgent = NewAgent). PressedEvent.Signal()
                if(1 = 0). break
            UnregisteredEvent.Await()
    HandleReleased(NewAgent:agent)<suspends>:void=
        race:
            loop:
                TriggeredAgent := Input.ReleasedEvent.Await()
                if(TriggeredAgent(0) = NewAgent). ReleasedEvent.Signal()
                if(1 = 0). break
            UnregisteredEvent.Await()
    SetAgent<public>(Value:?agent):void=
        if(CurrentAgent := Agent?):
            UnregisteredEvent.Signal()
            Input.Unregister(CurrentAgent)
        set Agent = Value
        if(NewAgent := Agent?):
            Input.Register(NewAgent)
            spawn. HandlePressed(NewAgent)
            spawn. HandleReleased(NewAgent)

control_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "CONTROL"

    @editable PressedAction:?prop_path = false
    @editable ReleasedAction:?prop_path = false
    @editable Input:input_trigger_device = input_trigger_device{}

    GetResources<override>():[]resource= array. resource:
        Props := map:
            "Controller" => UEAgent of SubPath("Possessed By")
        Actions := map:
            "Released Action" => (Action of ReleasedAction?) or EmptyAction()
            "Pressed Action" => (Action of PressedAction?) or EmptyAction()

    GetSideEffects<override>()<suspends>:[]side_effect=
        Filterer := filter_agent_v0_1. Input := Input
        FilterOptions of array:
            option. StartWith(Filterer.Init)
            option. PushAgent("Controller", Filterer.SetAgent)
            option. ReleasedAction? and Attach("Released Action", Filterer.ReleasedEvent)
            option. PressedAction? and Attach("Pressed Action", Filterer.PressedEvent)
