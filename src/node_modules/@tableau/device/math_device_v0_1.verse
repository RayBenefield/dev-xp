
using. /Verse.org/Simulation

using. Vertex

int_operation_v0_1 := enum{ Add, Subtract, Multiply, Divide, Modulus, Negate }
ToString(Value:int_operation_v0_1):string= case(Value):
    int_operation_v0_1.Add => "+"
    int_operation_v0_1.Subtract => "-"
    int_operation_v0_1.Multiply => "*"
    int_operation_v0_1.Divide => "Quotient"
    int_operation_v0_1.Modulus => "Mod"
    int_operation_v0_1.Negate => "Negate"

float_operation_v0_1 := enum{ Add, Multiply, Divide, Negate }
ToString(Value:float_operation_v0_1):string= case(Value):
    float_operation_v0_1.Add => "+"
    float_operation_v0_1.Multiply => "*"
    float_operation_v0_1.Divide => "Divide"
    float_operation_v0_1.Negate => "Negate"

math_property_v0_1 := class<concrete>():
    @editable Name:string = "Property"
    @editable Settings:operation_settings_v0_1 = operation_settings_v0_1{}
float_math_property_v0_1 := class<concrete>():
    @editable Name:string = "Property"
    @editable Settings:float_operation_settings_v0_1 = float_operation_settings_v0_1{}
operation_settings_v0_1 := class<concrete>():
    @editable Left:int_plug = int_plug. Default := 1
    @editable Operation:int_operation_v0_1 = int_operation_v0_1.Add
    @editable Right:int_plug = int_plug. Default := 1
float_operation_settings_v0_1 := class<concrete>():
    @editable Left:float_plug = float_plug. Default := 1.0
    @editable Operation:float_operation_v0_1 = float_operation_v0_1.Add
    @editable Right:float_plug = float_plug. Default := 1.0

math_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "MATH"

    @editable Values:[]math_property_v0_1 = array{}
    @editable Decimals:[]float_math_property_v0_1 = array{}

    GetResources<override>():[]resource= array. resource:
        Props := CombineAll of array:
            CreateMap of for(P:Values, S := P.Settings). ("{P.Name} Left", Integer of S.Left)
            CreateMap of for(P:Values, S := P.Settings). ("{P.Name} Right", Integer of S.Right)
            CreateMap of for(P:Values, S := P.Settings). (P.Name, Integer of (Path("{P.Name} Left"), "{S.Operation}", Path("{P.Name} Right")))
            CreateMap of for(P:Decimals, S := P.Settings). ("{P.Name} Left", Float of S.Left)
            CreateMap of for(P:Decimals, S := P.Settings). ("{P.Name} Right", Float of S.Right)
            CreateMap of for(P:Decimals, S := P.Settings). (P.Name, Float of (Path("{P.Name} Left"), "{S.Operation}", Path("{P.Name} Right")))
