
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Characters

using. Tableau

player_settings<public> := class<concrete>():
    @editable Visible:logic = false
    @editable AllowTurning:logic = false
    @editable AllowFalling:logic = false
    @editable AllowEmotes:logic = false

CreatePlayerResource<public><constructor>(ID:int, Agent:agent, Settings:player_settings)<transacts> := resource:
    ID := "Player{ID}"
    Type := "Player"
    Props := map:
        "Possessed By" => UEAgent of option. Agent
        "Visible" => Bool of Settings.Visible
        "Allow Turning" => Bool of Settings.AllowTurning
        "Allow Falling" => Bool of Settings.AllowFalling
        "Allow Emotes" => Bool of Settings.AllowEmotes

player_controller<public> := class():
    var Agent<public>:?agent = false
    var Visible<public>:logic = false
    var AllowTurning<public>:logic = false
    var AllowFalling<public>:logic = false
    var AllowEmotes<public>:logic = false

    SetVisibility<public>(Value:logic):void=
        set Visible = Value; ApplySettings();
    SetTurning<public>(Value:logic):void=
        set AllowTurning = Value; ApplySettings();
    SetFalling<public>(Value:logic):void=
        set AllowFalling = Value; ApplySettings();
    SetEmotes<public>(Value:logic):void=
        set AllowEmotes = Value; ApplySettings();
    SetAgent<public>(Value:?agent):void=
        set Agent = Value; ApplySettings();

    ApplySettings<public>():void= if (A := Agent?):
        ApplyStasis(A)
        ApplyVisibility(A)
    ApplyStasis<public>(A:agent):void= if (Char := A.GetFortCharacter[]):
        StasisArgs := stasis_args:
            AllowTurning := AllowTurning
            AllowFalling := AllowFalling
            AllowEmotes := AllowEmotes
        Char.PutInStasis(StasisArgs)
    ApplyVisibility<public>(A:agent):void= if (Char := A.GetFortCharacter[]):
        if(Visible?). Char.Show() else. Char.Hide()

player_device := class(tableau_device):
    @editable PlayerSettings:player_settings = player_settings{}

    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Controller := player_controller{}
        array:
            PushAgent("Possessed By", Controller.SetAgent)
            PushBool("Visible", Controller.SetVisibility)
            PushBool("Allow Turning", Controller.SetTurning)
            PushBool("Allow Falling", Controller.SetFalling)
            PushBool("Allow Emotes", Controller.SetEmotes)
