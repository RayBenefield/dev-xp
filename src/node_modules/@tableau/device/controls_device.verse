
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

controls_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ControlContextSettings:switcher_settings = switcher_settings:
        ID := "Root Controls Context"
        StartingContext := "Root Control Context"
        Actions := array{ "Prim Action", "Alt Action", "Util Action", "Next Action", "Prev Action", "Move Up", "Move Down", "Move Left", "Move Right" }

    @editable PrimAction:input_trigger_device = input_trigger_device{}
    @editable AltAction:input_trigger_device = input_trigger_device{}
    @editable UtilAction:input_trigger_device = input_trigger_device{}
    @editable NextAction:input_trigger_device = input_trigger_device{}
    @editable PrevAction:input_trigger_device = input_trigger_device{}

    @editable Up:input_trigger_device = input_trigger_device{}
    @editable Left:input_trigger_device = input_trigger_device{}
    @editable Right:input_trigger_device = input_trigger_device{}
    @editable Down:input_trigger_device = input_trigger_device{}

    GetResources<override>():[]resource= array. CreateContextSwitcherResource(ControlContextSettings)

    GetResourceID<override>()<computes>:?string= option. ControlContextSettings.ID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= option. "Player"
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        State.AttachAction(ControlContextSettings.ID, "Prim Action", PrimAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Alt Action", AltAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Util Action", UtilAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Next Action", NextAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Prev Action", PrevAction.ReleasedEvent)

        State.AttachAction(ControlContextSettings.ID, "Move Up", Up.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Left", Left.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Right", Right.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Down", Down.PressedEvent)

        array{}
            # Debug("Context", "{State.Source} Context")
