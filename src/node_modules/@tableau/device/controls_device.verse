
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

controls_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ControlContextSettings:switcher_settings = switcher_settings:
        ID := "Root Controls Context"
        StartingContext := "Root Control Context"
        Actions := array{ "Action", "Alt Action", "Move Up", "Move Down", "Move Left", "Move Right" }

    @editable Action:input_trigger_device = input_trigger_device{}
    @editable AltAction:input_trigger_device = input_trigger_device{}

    @editable Up:input_trigger_device = input_trigger_device{}
    @editable Left:input_trigger_device = input_trigger_device{}
    @editable Right:input_trigger_device = input_trigger_device{}
    @editable Down:input_trigger_device = input_trigger_device{}

    GetResources<override>():[]resource= array. CreateContextSwitcherResource(ControlContextSettings)

    GetResourceID<override>()<computes>:?string= option. ControlContextSettings.ID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        State.AttachAction(ControlContextSettings.ID, "Action", Action.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Alt Action", AltAction.ReleasedEvent)

        State.AttachAction(ControlContextSettings.ID, "Move Up", Up.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Left", Left.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Right", Right.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Down", Down.PressedEvent)

        array{}
            # Debug("Context", "{State.Source} Context")
