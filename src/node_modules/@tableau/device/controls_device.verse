
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

controls_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ControlContextSettings:switcher_settings = switcher_settings:
        ID := "Root Controls Context"
        StartingContext := "Root Control Context"
        Actions := array{ "Prim Action", "Alt Action", "Next Action", "Prev Action", "Util Action", "Use Action", "Switch Action", "Force Action", "Raise", "Lower", "Move Up", "Move Down", "Move Left", "Move Right" }

    # Triggers
    @editable PrimAction:input_trigger_device = input_trigger_device{}      # Fire
    @editable AltAction:input_trigger_device = input_trigger_device{}       # Target

    # Bumpers
    @editable NextAction:input_trigger_device = input_trigger_device{}      # Next Item
    @editable PrevAction:input_trigger_device = input_trigger_device{}      # Previous Item

    # Buttons
    @editable UtilAction:input_trigger_device = input_trigger_device{}      # Harvesting Tool
    @editable UseAction:input_trigger_device = input_trigger_device{}       # Interact
    @editable SwitchAction:input_trigger_device = input_trigger_device{}    # Swap Quickbar
    @editable ForceAction:input_trigger_device = input_trigger_device{}     # Sprint

    # Vertical
    @editable Raise:input_trigger_device = input_trigger_device{}           # Jump
    @editable Lower:input_trigger_device = input_trigger_device{}           # Crouch

    # Lateral
    @editable Up:input_trigger_device = input_trigger_device{}
    @editable Left:input_trigger_device = input_trigger_device{}
    @editable Right:input_trigger_device = input_trigger_device{}
    @editable Down:input_trigger_device = input_trigger_device{}

    GetResources<override>():[]resource= array. CreateContextSwitcherResource(ControlContextSettings)

    GetResourceID<override>()<computes>:?string= option. ControlContextSettings.ID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= option. "Player"
    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        State.AttachAction(ControlContextSettings.ID, "Prim Action", PrimAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Alt Action", AltAction.ReleasedEvent)

        State.AttachAction(ControlContextSettings.ID, "Next Action", NextAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Prev Action", PrevAction.ReleasedEvent)

        State.AttachAction(ControlContextSettings.ID, "Util Action", UtilAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Use Action", UseAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Switch Action", SwitchAction.ReleasedEvent)
        State.AttachAction(ControlContextSettings.ID, "Force Action", ForceAction.ReleasedEvent)

        State.AttachAction(ControlContextSettings.ID, "Raise", Raise.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Lower", Lower.PressedEvent)

        State.AttachAction(ControlContextSettings.ID, "Move Up", Up.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Left", Left.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Right", Right.PressedEvent)
        State.AttachAction(ControlContextSettings.ID, "Move Down", Down.PressedEvent)

        array{}
            # Debug("Context", "{State.Source} Context")
