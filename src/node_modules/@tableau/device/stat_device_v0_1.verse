
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

StatController_v0_1<public><constructor>(StatCreator:stat_creator_device, KeepValueOnLevelUp:logic, ZeroBasedLeveling:logic)<transacts> := set_stat_v0_1{ StatCreator := StatCreator, KeepValueOnLevelUp := KeepValueOnLevelUp, ZeroBasedLeveling := ZeroBasedLeveling }
set_stat_v0_1<public> := class():
    StatCreator<public>:stat_creator_device
    KeepValueOnLevelUp<public>:logic
    ZeroBasedLeveling<public>:logic
    var Agent<public>:?agent = false
    var LastValue<public>:?int = false
    SetAgent<public>(Value:?agent):void=
        set Agent = Value
        if (PendingValue := LastValue?). SetValue(PendingValue)
    SetValue<public>(Value:int):void=
        set LastValue = option. Value
        if. StatCreator.SetValue[Agent?, Value]
    SetLevel<public>(Value:int):void=
        Level := if(ZeroBasedLeveling?). Value+1 else. Value
        if. StatCreator.SetLevel[Agent?, Level]
        if. KeepValueOnLevelUp? and StatCreator.SetValue[Agent?, LastValue? or 0]

stat_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "STAT"

    @editable StatCreator:stat_creator_device = stat_creator_device{}
    @editable Value<public>:int_plug = int_plug{}
    @editable Level<public>:int_plug = int_plug{}
    @editable KeepValueOnLevelUp<public>:logic = false
    @editable ZeroBasedLeveling<public>:logic = false

    GetResources<override>():[]resource= array. resource:
        Props := map:
            "Value" => Integer of Value
            "Level" => Integer of Level
            "Stat Owner" => UEAgent of SubPath("Possessed By")

    GetSideEffects<override>()<suspends>:[]side_effect=
        Controller := StatController_v0_1(StatCreator, KeepValueOnLevelUp, ZeroBasedLeveling)
        array:
            PushAgent("Stat Owner", Controller.SetAgent)
            PushInt("Value", Controller.SetValue)
            PushInt("Level", Controller.SetLevel)
