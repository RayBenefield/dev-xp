
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Vertex

filter_agent := class():
    Input:input_trigger_device
    var Agent<public>:?agent = false
    PressedEvent<public>:event() = event(){}
    ReleasedEvent<public>:event() = event(){}
    UnregisteredEvent<public>:event() = event(){}
    HandlePressed(NewAgent:agent)<suspends>:void=
        race:
            loop:
                TriggeredAgent := Input.PressedEvent.Await()
                if(TriggeredAgent = NewAgent). PressedEvent.Signal()
                if(1 = 0). break
            UnregisteredEvent.Await()
    HandleReleased(NewAgent:agent)<suspends>:void=
        race:
            loop:
                TriggeredAgent := Input.ReleasedEvent.Await()
                if(TriggeredAgent(0) = NewAgent). ReleasedEvent.Signal()
                if(1 = 0). break
            UnregisteredEvent.Await()
    SetAgent<public>(Value:?agent):void=
        if(CurrentAgent := Agent?):
            UnregisteredEvent.Signal()
            Input.Unregister(CurrentAgent)
        set Agent = Value
        if(NewAgent := Agent?):
            Input.Register(NewAgent)
            spawn. HandlePressed(NewAgent)
            spawn. HandleReleased(NewAgent)

control_device<public> := class(tableau_device):
    @editable ReleasedActionID:?string = false
    @editable PressedActionID:?string = false
    @editable Input:input_trigger_device = input_trigger_device{}

    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Filterer := filter_agent. Input := Input
        FilterOptions of array:
            option. PushAgent(SubPath("Possessed By"), Filterer.SetAgent)
            option. Attach(ReleasedActionID?, Filterer.ReleasedEvent)
            option. Attach(PressedActionID?, Filterer.PressedEvent)
