
using. /Fortnite.com/Devices
using. /Verse.org/Simulation

using. Vertex

CameraController<public><constructor>(Camera:gameplay_camera_device)<transacts> := camera_controller. Camera := option. Camera
camera_controller<public> := class():
    Camera<public>:?gameplay_camera_device = false
    var Agent<public>:?agent = false
    var LastValue<public>:?logic = false
    ToggleCamera<public>(Value:logic):void=
        set LastValue = option. Value
        ApplyCamera(Value)
    SetAgent<public>(Value:?agent):void=
        if (LastValue?, not Value?). ApplyCamera(false)
        set Agent = Value
        if (LastValue?). ApplyCamera(true)
    ApplyCamera(Value:logic):void= if (C := Camera?, A := Agent?):
        if (Value?). C.AddTo(A) else. C.RemoveFrom(A)

camera_device<public> := class(tableau_device):
    @editable PropertyID:string = ""

    @editable Angle:?gameplay_camera_fixed_angle_device = false
    @editable Point:?gameplay_camera_fixed_point_device = false
    @editable Orbit:?gameplay_camera_orbit_device = false

    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Controller := CameraController(Angle?) or
            CameraController(Point?) or
            CameraController(Orbit?) or
            camera_controller{}

        array:
            PushAgent(SubPath("Possessed By"), Controller.SetAgent)
            PushBool(PropertyID, Controller.ToggleCamera)
