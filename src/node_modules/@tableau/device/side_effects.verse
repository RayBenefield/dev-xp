
using. /Verse.org/Assets
using. /Fortnite.com/Devices
using. /UnrealEngine.com/Assets
using. /Verse.org/Simulation/Tags
using. /Fortnite.com/Devices/CreativeAnimation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Numb
using. Vertex
using. Tableau

tap := type{_():void}
str_tap := type{_(:string):void}
int_tap := type{_(:int):void}
bool_tap := type{_(:logic):void}
float_tap := type{_(:float):void}
msg_tap := type{_(:message):void}
num_tap := type{_(:num):void}
vec2_tap := type{_(:vector2):void}
vec3_tap := type{_(:vector3):void}
str_map := type{_(:string):string}
str_to_msg := type{_(:string):message}

side_effect_device_tag := class(tag){}
side_effect_device<public> := interface:
    GetResourceID<public>()<computes>:?string
    GetPerType<public>()<computes>:?string
    GetPerSubType<public>()<computes>:?string
    GetSideEffects<public>(GameState:game_state, ResourceID:string, SubTypeID:string)<suspends>:[]side_effect

LoadSideEffectDevices<public>():[]side_effect_device=
    TaggedDevices := GetCreativeObjectsWithTag(side_effect_device_tag{})
    for(Index -> Tagged : TaggedDevices, Device := side_effect_device[Tagged]). Device

side_effect<public> := interface(). GetFocus<public>():half_path
tap_side_effect<public> := interface(side_effect). FN<public>()<suspends>:void
bool_side_effect<public> := interface(side_effect). FN<public>(Value:logic)<suspends>:void
int_side_effect<public> := interface(side_effect). FN<public>(Value:int)<suspends>:void
num_side_effect<public> := interface(side_effect). FN<public>(Value:num)<suspends>:void
str_side_effect<public> := interface(side_effect). FN<public>(Value:string)<suspends>:void
vec3_side_effect<public> := interface(side_effect). FN<public>(Value:vector3)<suspends>:void

IdentityStr(Str:string):string = Str

PushToMsg<public><constructor>(Focus:half_path, To:msg_tap) := str_to_msg_pipe:
    Focus := Focus
    To := To
    From := IdentityStr
PushToMsg<public><constructor>(Focus:half_path, From:str_map, To:msg_tap) := str_to_msg_pipe:
    Focus := Focus
    To := To
    From := From
# REQUEST - Supported by parametrics... message->t
str_to_msg_pipe<public> := class(str_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    To<public>:msg_tap
    From<public>:str_map

    FN<override>(Value:string)<suspends>:void= To(Str2Msg(From(Value)))

Push<public><constructor>(Focus:half_path, To:tap) := tap_pipe{ Focus := Focus, To := To }
tap_pipe<public> := class(tap_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    To<public>:tap

    FN<override>()<suspends>:void= To()

PushStr<public><constructor>(Focus:half_path, To:str_tap) := str_pipe{ Focus := Focus, To := To }
str_pipe<public> := class(str_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    To<public>:str_tap

    FN<override>(Value:string)<suspends>:void= To(Value)

PushBool<public><constructor>(Focus:half_path, To:bool_tap) := bool_pipe{ Focus := Focus, To := To }
bool_pipe<public> := class(bool_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    To<public>:bool_tap

    FN<override>(Value:logic)<suspends>:void= To(Value)

Debug<public><constructor>(Focus:half_path) := debug_pipe. Focus := Focus
Debug<public><constructor>(Focus:half_path, Label:string) := debug_pipe{ Focus := Focus, Label := Label }
debug_pipe<public> := class(str_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    Label<public>:string = "<DEBUG>"

    FN<override>(Value:string)<suspends>:void= Print("[{Label}] {Value}")

toggle_prop<public> := class(bool_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    Prop<public>:?creative_prop = false

    FN<override>(Value:logic)<suspends>:void= if (P := Prop?):
        if (Value?). P.Show() else. P.Hide()

toggle_material<public> := class(bool_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    Prop<public>:?creative_prop = false
    True<public>:material
    False<public>:material

    FN<override>(Value:logic)<suspends>:void= if (P := Prop?):
        if (Value?). P.SetMaterial(True) else. P.SetMaterial(False)

toggle_animation<public> := class(bool_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    Prop<public>:?creative_prop = false
    True<public>:[]keyframe_delta
    False<public>:[]keyframe_delta
    Mode<public>:animation_mode = animation_mode.OneShot

    FN<override>(Value:logic)<suspends>:void= if (P := Prop?, A := P.GetAnimationController[]):
        if (Value?). A.SetAnimation(True, ?Mode := Mode) else. A.SetAnimation(False, ?Mode := Mode)

set_mesh<public> := class(int_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    Prop<public>:?creative_prop = false
    Meshes<public>:[]mesh = array{}

    FN<override>(Value:int)<suspends>:void= if (P := Prop?):
        if (Mesh := Meshes[Value]). P.SetMesh(Mesh)

play_animation<public> := class(tap_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    Prop<public>:?creative_prop = false

    FN<override>()<suspends>:void= if (P := Prop?, A := P.GetAnimationController[]):
        A.Play()

move_to<public> := class(vec3_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    Prop<public>:?creative_prop = false
    Time<public>:float = 0.0

    FN<override>(Value:vector3)<suspends>:void= if (P := Prop?):
        P.MoveTo(Value, IdentityRotation(), Time)

spawn_vfx<public> := class(tap_side_effect):
    Focus<public>:half_path
    GetFocus<override>():half_path= Focus

    VFX<public>:?particle_system = false
    Location<public>:vector3 = vector3{}

    FN<override>()<suspends>:void= if (V := VFX?):
        SpawnParticleSystem(V, Location)
