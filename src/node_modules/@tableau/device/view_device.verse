
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Fortnite.com/Characters

using. Anima
using. Tableau

rotation_yaw_getter<public> := class():
    Agent<public>:?agent

    FN<public>():float= if (A := Agent?, F := A.GetFortCharacter[]):
        Rotation := F.GetViewRotation().ToVector3()
        Rotation.X + 180.0
    else. 0.0

angle_snapper<public> := class():
    Increment<public>:float
    ValueSource<public>:type{_():float}
    PollingTime<public>:float = 0.0

    var ActiveIncrement<public>:float = 0.0
    var Notis<public>:[float]event() = map{}

    Init()<suspends>:void=
        loop:
            NewValue := ValueSource()
            MidPoint := Increment/2.0
            SnapPoint := (Ceil[(NewValue - MidPoint) / Increment] * Increment) or 0.0
            SnapTest := if (SnapPoint = 360.0). 0.0 else. SnapPoint
            if (ActiveIncrement <> SnapTest):
                set ActiveIncrement = SnapTest
                if (N := Notis[ActiveIncrement]). N.Signal()

            Sleep(PollingTime)

    WhenIncrementEquals<public>(Value:float):event()=
        NewEvent := event(){}
        option. set Notis[Value] = NewEvent
        NewEvent

view_device<public> := class(tableau_device):
    @editable IncrementActions:[]string = array{}

    GetSideEffects<override>(State:scoped_state)<suspends>:[]side_effect=
        Increment := 360.0 / (IncrementActions.Length*1.0)
        Agent := State.GetSubAgent("Possessed By").Get()
        YawGetter := rotation_yaw_getter. Agent := Agent
        Snapper := angle_snapper{ Increment := Increment, ValueSource := YawGetter.FN }

        for (Index->ActionID:IncrementActions, TargetIncrement := Index * Increment):
            State.AttachAction(ActionID, Snapper.WhenIncrementEquals(TargetIncrement))

        array. StartWith(Snapper.Init)