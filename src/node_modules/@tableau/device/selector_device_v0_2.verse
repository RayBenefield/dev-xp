
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Vertex

selector_device_v0_2<public> := class(tableau_device):
    DeviceType<override>:string = "SELECTOR"

    @editable Items<public>:strs_var = strs_var{}
    @editable MaxCount<public>:?int_var = false
    @editable Wrap<public>:bool_plug = bool_plug. Default := true
    @editable Index<public>:int_plug = int_plug. Default := 1

    GetResources<override>():[]resource=
        CreatedProps := CombineAll of array:
            CreateMap of for(I->Item:Items.Default). ("{Item} Index", Integer of I+1)
            CreateMap of for(Item:Items.Default). ("{Item} Label", Str of Item)
            CreateMap of for(Item:Items.Default). ("Is {Item}", Bool of (Path("Value Index"), "Int =", Path("{Item} Index")))

        CreatedActions := CombineAll of array:
            CreateMap of for(Item:Items.Default). ("Set {Item}", Action of Set("Value Index").To("{Item} Index"))

        array. resource:
            Props := CreatedProps.CombineWithAll of map:
                "Items" => Strs of Items
                "Value" => Str of (Path("Items"), "Get", Path("Value Index"))
                "Value Index" => Integer of Index
                "Next Index" => Integer of (Path("Value Index"), "+", ONE())
                "Previous Index" => Integer of (Path("Value Index"), "-", ONE())
                "Count" => Integer of (Path("Items"), "Length")
                "Max Count" => (Integer of MaxCount?) or (Integer of 0)
                "Has Max Count" => PlugCheck of MaxCount
                "Is Max" => Bool of (Path("Count"), "Int >=", Path("Max Count"))
                "Block Max" => Bool of (Path("Has Max Count"), "AND", Path("Is Max"))
                "Is Last" => Bool of (Path("Value Index"), "Int >=", Path("Count"))
                "Is First" => Bool of (Path("Value Index"), "Int <=", ONE())
                "Wrap" => Bool of Wrap
            Actions := CreatedActions.CombineWithAll of map:
                "Next" => Action of array:
                    IsTrue("Is Last").Else("Go to Next")
                    IsTrue("Wrap")
                    Set("Value Index").To(ONE())
                "Previous" => Action of array:
                    IsTrue("Is First").Else("Go to Previous")
                    IsTrue("Wrap")
                    Set("Value Index").To("Count")
                "Go to Next" => Action of Set("Value Index").To("Next Index")
                "Go to Previous" => Action of Set("Value Index").To("Previous Index")
                "Insert End" => Action of array:
                    IsFalse("Block Max")
                    Insert(TWEAK()).Into("Items")
                "Remove First Found" => Action of RemoveItem(TWEAK()).From("Items")
                "Remove Index" => Action of Remove(TWEAK()).From("Items")
