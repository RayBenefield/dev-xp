
using. /Verse.org/Assets
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /UnrealEngine.com/Assets
using. /UnrealEngine.com/Temporary/SpatialMath

using. Vertex

vfx_controller_v0_1<public> := class():
    ParticleMap<public>:[string]particle_system = map{}
    var Location<public>:vector3 = vector3{}
    var ParticleID<public>:string = ""

    SpawnVFX<public>()<suspends>:void= if (PS := ParticleMap[ParticleID]). SpawnParticleSystem(PS, Location)
    SetLocation<public>(Value:vector3)<suspends>:void= set Location = Value
    SetParticle<public>(Value:string)<suspends>:void= set ParticleID = Value

vfx_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "VFX"

    @editable Trigger:?prop_path = false
    @editable Particle:str_plug = str_plug{}
    @editable Location:?vec3_plug = false

    ParticleMap<public>:[string]particle_system = map{}

    GetResources<override>():[]resource= array. resource:
        Props := map:
            "Location" => Vec3 of (Location, GetTransform().Translation)
            "Particle" => Str of Particle
            "Particle Trigger" => (Str of Trigger?) or (Str of "<NO TRIGGER>")

    GetSideEffects<override>()<suspends>:[]side_effect=
        VFX := vfx_controller_v0_1. ParticleMap := ParticleMap
        FilterOptions of array:
            option. Push("Particle Trigger", VFX.SpawnVFX)
            option. PushVec3("Location", VFX.SetLocation)
            option. PushStr("Particle", VFX.SetParticle)
