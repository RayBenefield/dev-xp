
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Banding
using. Vertex

game_device_v0_1 := class(creative_device):

    @editable DebugResources:[]string = array{"","",""}

    IsDebug(R:resource)<decides><transacts>:void= DebugResources.Find[R.ID]

    OnBegin<override>()<suspends>:void=
        TableauDevices := LoadTableauDevices(Self)
        Print("Found Devices: {TableauDevices.Length}")

        Definitions := CombineAllArrays of for(Device:TableauDevices):
            Device.GetResources().Map(ToDefinition(Device).FN)

        NewTemplateMap := Definitions.GetTemplateMap()
        UntypedResources := Definitions.GetUntypedResourceMap()
        TypedResources := Definitions.GetTypedResourceMap()
        MergedResources := ConcatenateResourceMaps(TypedResources, UntypedResources)
        FinalResources := AddTemplatesToResources(NewTemplateMap, MergedResources)
        NewStaticResources := Definitions.GetStaticResourceMap()
        NewStaticTypes := Definitions.GetStaticTypeMap()
        NewResourceTypePools := Definitions.GetTypePoolMap()
        NewRelationshipMap := Definitions.GetRelationshipMap()
        Print("STATIC RESOURCES")
        Print("{IndentedKeys of NewStaticResources}")
        Print(">STATIC RESOURCES")

        PrintingResources := FinalResources.OnlyValues().Filter(IsDebug)
        for(P:PrintingResources). Print("{P}")

        AllResources := CombineAllArrays of array:
            FinalResources.OnlyValues()
            array. CreateGlobalsResource()
        Resources := CreateResourceMap of for(Resource:AllResources, ID := Resource.ID):
            (ID, AddProps(Resource, map{ "ID" => Str of ID }))

        LinkMap := CombineResourcePropMaps of for(P:Resources). P.GetRelevantProps()
        PlantUMLParents := for(P:NewTemplateMap, Links := LinkMap[P.Type]). P.ToPlantUMLParents(Links)
        PlantUMLMaps := for(P:Resources, Links := LinkMap[P.ID]). P.ToPlantUMLMaps(Links)
        PlantUMLLinks := for(P:Resources). P.ToPlantUMLLinks()
        Header := "\n@startuml\n" + "left to right direction\n"
        Footer := "\n@enduml\n"
        Print(Header + PlantUMLParents.Join("\n") + PlantUMLMaps.Join("\n") + PlantUMLLinks.Join("\n") + Footer)

        GameState := game_state:
            Resources := Resources
            ResourceTemplates := NewTemplateMap
            ResourceTypePools := NewResourceTypePools
            StaticResources := NewStaticResources
            StaticTypes := NewStaticTypes
            RelationshipMap := NewRelationshipMap

        TypeAffectors := GetTypeAffectorMap of Definitions
        Print("{IndentedKeys of TypeAffectors}")
        for(ID->Effects:TypeAffectors). spawn. HandleTypedAffectors(GameState, ID, Effects)

        ResourceAffectors := GetAffectorMap of Definitions
        Print("{IndentedKeys of ResourceAffectors}")
        for(ID->Effects:ResourceAffectors). spawn. Affector(GameState, ID, Effects).Init()

    HandleTypedAffectors(GameState:game_state, TypeID:string, SideEffects:[]side_effect_group)<suspends>:void=
        loop:
            NewResource := GameState.ResourceAddedEvent(TypeID).Await()
            spawn. Affector(GameState, NewResource, SideEffects).Init()
