
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /Verse.org/Simulation/Tags
using. /UnrealEngine.com/Temporary/Diagnostics

using. Vertex

game_device_v0_1 := class(creative_device):

    OnBegin<override>()<suspends>:void=
        Globals := map{ "GLOBAL" => CreateGlobalsResource() }

        TableauDevices := LoadTableauDevices()
        Print("Found Devices: {TableauDevices.Length}")
        DeviceResources := CombineAllArrays of for(Device:TableauDevices). Device.GetResources()
        Print("Device Resources: {DeviceResources.Length}")

        PlayerResource := resource:
            ID := "Player1"
            Type := "Player"
            Props := map:
                "Possessed By" => UEAgent of option. GetPlayspace().GetPlayers()[0]
        AllResources := CombineAllArrays of array:
            DeviceResources
            array. PlayerResource
            array. CreateGlobalsResource()
        Resources := CreateMap of for(Resource:AllResources, ID := Resource.ID):
            (ID, AddProps(Resource, map{ "ID" => Str of ID }))

        ResourceTemplates := CreateMap of for(Resource:AllResources, Resource.ID = "", Type := Resource.Type <> ""):
            Print("Adding Resource Template for {Type}")
            (Type, Resource)

        ResourceIDtoType := CreateMap of for(Resource:AllResources, ID := Resource.ID <> "", Type := Resource.Type <> ""):
            Print("Resource [{ID}] has Type [{Type}]")
            (ID, Type)
        ResourceTypePools := ResourceIDtoType.GroupByValue()
        for(Type->Pool:ResourceTypePools):
            Print("Type [{Type}] has [{Pool.Length}] IDs:")
            for(ID:Pool). Print("    - {ID}")

        GameState := game_state:
            Resources := Resources
            ResourceTemplates := ResourceTemplates
            ResourceTypePools := ResourceTypePools

        for(Device:TableauDevices, ResourceID := Device.GetResourceID()?):
            spawn. ProcessSideEffects(GameState, Device, ResourceID, "Player1")

    ProcessSideEffects(GameState:game_state, Device:tableau_device, ResourceID:string, SubTypeID:string)<suspends>:void=
        Scoped := scoped_state{ GameState := GameState, Source := ResourceID, PlayerID := SubTypeID }
        SideEffects := Device.GetSideEffects(Scoped)

        for (Effect:SideEffects). if (E := first_side_effect[Effect]). E.FN()
        Sleep(0.0)

        for (Effect:SideEffects):
            if (E := tap_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.OnUpdated(PropSource, SubTypeID, E.FN)
            if (E := bool_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncBool(PropSource, SubTypeID, E.FN)
            if (E := float_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncFloat(PropSource, SubTypeID, E.FN)
            if (E := str_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncStr(PropSource, SubTypeID, E.FN)
            if (E := debug_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncStr(PropSource, SubTypeID, E.FN)
            if (E := msg_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncStr(PropSource, SubTypeID, E.FN)
            if (E := vec3_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.SyncVec3(PropSource, SubTypeID, E.FN)
            if (E := action_pipe[Effect], PropSource := E.PropertySource.TryComplete(ResourceID)?):
                spawn. GameState.AttachAction(PropSource, SubTypeID, E.Event)
