
using. /Verse.org/Assets
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Anima
using. Vertex

time_property_v0_1<public> := class<concrete>():
    @editable Source<public>:prop_path = prop_path{}
    @editable Time<public>:float = 0.0

movement_settings_v0_1 := class<concrete>():
    @editable XYZ:?time_property_v0_1 = false
    @editable X:?time_property_v0_1 = false
    @editable Y:?time_property_v0_1 = false
    @editable Z:?time_property_v0_1 = false

rotation_settings_v0_1 := class<concrete>():
    @editable YPR:?time_property_v0_1 = false
    @editable Yaw:?time_property_v0_1 = false
    @editable Pitch:?time_property_v0_1 = false
    @editable Roll:?time_property_v0_1 = false

animation_settings_v0_1 := class<concrete>():
    @editable TriggerAnimation:?prop_path = false
    @editable ToggleAnimation:?prop_path = false
    @editable AnimationVariable:?prop_path = false

material_settings_v0_1 := class<concrete>():
    @editable Material1ID:?prop_path = false
    @editable Material2ID:?prop_path = false
    @editable Material3ID:?prop_path = false
    @editable Parameters:[]parameter_entry = array{}

prop_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "PROP"

    @editable Prop:?creative_prop = false
    @editable Asset:?creative_prop_asset = false

    @editable MeshID:?prop_path = false
    @editable MaterialID:?prop_path = false
    @editable ToggleProp:?prop_path = false

    @editable MovementSettings:movement_settings_v0_1 = movement_settings_v0_1{}
    @editable RotationSettings:rotation_settings_v0_1 = rotation_settings_v0_1{}
    @editable AnimationSettings:animation_settings_v0_1 = animation_settings_v0_1{}
    @editable MaterialSettings:material_settings_v0_1 = material_settings_v0_1{}

    MaterialCreator<public>:?type{_()<transacts>:material_instance} = false

    MeshMap<public>:[string]mesh = map{}
    MaterialMap<public>:[string]material = map{}
    Material1Map<public>:[string]material = map{}
    Material2Map<public>:[string]material = map{}
    Material3Map<public>:[string]material = map{}
    OneShotAnimation<public>:?type{_():[]frame} = false
    PingPongAnimation<public>:?type{_():[]frame} = false
    AnimationUpdater<public>:?type{_(:float):[]frame} = false

    OnBegin<override>()<suspends>:void=
        (super:)OnBegin()
        if (ToggleProp?, P := Prop?). P.Hide()

    GetResources<override>():[]resource= array:
        resource:
            ID := ResourceID
            Props := map:
                "Location" => Vec3 of Prop?.GetTransform().Translation or GetTransform().Translation
                "Toggle Prop" => (Bool of ToggleProp?) or (Bool of true)
                "Toggle Animation" => (Bool of AnimationSettings.ToggleAnimation?) or (Bool of false)
                "Animation Trigger" => (Str of AnimationSettings.TriggerAnimation?) or (Str of "<NO TRIGGER>")

    GetSideEffects<override>()<suspends>:[]side_effect=
        P := if (Prop?). Prop else. Spawn(Asset)

        if (SetupAnim := OneShotAnimation?). SetupOneShot(P, SetupAnim())
        if (SetupAnim := PingPongAnimation?). SetupPingPong(P, SetupAnim())

        BaseEffects := FilterOptions of array:
            option. PushStr(MeshID?, SetMesh(P, MeshMap).FN)
            option. PushStr(MaterialID?, SetMaterial(P, MaterialMap).FN)
            option. PushStr(MaterialSettings.Material1ID?, SetMaterial(P, Material1Map, 0).FN)
            option. PushStr(MaterialSettings.Material2ID?, SetMaterial(P, Material2Map, 1).FN)
            option. PushStr(MaterialSettings.Material3ID?, SetMaterial(P, Material3Map, 2).FN)
            option. PushBool("Toggle Prop", Toggle(P).FN)
            option. PushVec3(MovementSettings.XYZ?.Source, Move(P, MovementSettings.XYZ?.Time).FN)
            option. PushFloat(MovementSettings.X?.Source, MoveX(P, MovementSettings.X?.Time).FN)
            option. PushFloat(MovementSettings.Y?.Source, MoveY(P, MovementSettings.Y?.Time).FN)
            option. PushFloat(MovementSettings.Z?.Source, MoveZ(P, MovementSettings.Z?.Time).FN)
            option. PushVec3(RotationSettings.YPR?.Source, Rotate(P, RotationSettings.YPR?.Time).FN)
            option. PushFloat(RotationSettings.Yaw?.Source, RotateYaw(P, RotationSettings.Yaw?.Time).FN)
            option. PushFloat(RotationSettings.Pitch?.Source, RotatePitch(P, RotationSettings.Pitch?.Time).FN)
            option. PushFloat(RotationSettings.Roll?.Source, RotateRoll(P, RotationSettings.Roll?.Time).FN)
            option. Push("Animation Trigger", PlayAnim(P).FN)
            option. PushBool("Toggle Animation", ToggleAnim(P).FN)
            option. PushFloat(AnimationSettings.AnimationVariable?, Wait(0.0).FN, UpdateAnimWithFloat(P, AnimationUpdater?).FN)

        ParameterEffects := if (CurrentProp := P?, CreateInstance := MaterialCreator?):
            Instance := CreateInstance()
            CurrentProp.SetMaterial(Instance.Material)
            MC := material_controller. CurrentMaterial := Instance
            FilterOptions of for(Entry:MaterialSettings.Parameters, PropID := Entry.PropertyID, ParamID := Entry.ParameterID, ParamType := MC.GetParamType(ParamID)?):
                case(ParamType):
                    param_type.Scalar => option. PushFloat(PropID, SetScalar(MC.GetScalarSetter(ParamID)?.FN).FN)
                    param_type.Texture => option. PushStr(PropID, SetTexture(MC.GetTextureSetter(ParamID)?.FN, MC.GetTextures(ParamID)?).FN)
        else. array{}

        Concatenate(BaseEffects, ParameterEffects)
