
using. /Verse.org/Assets
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Anima
using. Vertex

time_property_v0_1<public> := class<concrete>():
    @editable Source<public>:prop_path = prop_path{}
    @editable Time<public>:float = 0.0

movement_settings_v0_1 := class<concrete>():
    @editable XYZ:?time_property_v0_1 = false
    @editable X:?time_property_v0_1 = false
    @editable Y:?time_property_v0_1 = false
    @editable Z:?time_property_v0_1 = false

rotation_settings_v0_1 := class<concrete>():
    @editable YPR:?time_property_v0_1 = false
    @editable Yaw:?time_property_v0_1 = false
    @editable Pitch:?time_property_v0_1 = false
    @editable Roll:?time_property_v0_1 = false

animation_settings_v0_1 := class<concrete>():
    @editable TriggerAnimation:?prop_path = false
    @editable ToggleAnimation:?prop_path = false
    @editable AnimationVariable:?prop_path = false

material_settings_v0_1 := class<concrete>():
    @editable Material1ID:?prop_path = false
    @editable Material2ID:?prop_path = false
    @editable Material3ID:?prop_path = false
    @editable Parameters:[]parameter_entry = array{}

prop_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "PROP"

    @editable Prop:?creative_prop = false
    @editable Asset:?creative_prop_asset = false

    @editable MeshID:?prop_path = false
    @editable MaterialID:?prop_path = false
    @editable ToggleProp:?prop_path = false

    @editable MovementSettings:movement_settings_v0_1 = movement_settings_v0_1{}
    @editable RotationSettings:rotation_settings_v0_1 = rotation_settings_v0_1{}
    @editable AnimationSettings:animation_settings_v0_1 = animation_settings_v0_1{}
    @editable MaterialSettings:material_settings_v0_1 = material_settings_v0_1{}

    MaterialCreator<public>:?type{_()<transacts>:material_instance} = false

    MeshMap<public>:[string]mesh = map{}
    MaterialMap<public>:[string]material = map{}
    Material1Map<public>:[string]material = map{}
    Material2Map<public>:[string]material = map{}
    Material3Map<public>:[string]material = map{}
    OneShotAnimation<public>:?type{_():[]frame} = false
    PingPongAnimation<public>:?type{_():[]frame} = false
    AnimationUpdater<public>:?type{_(:float):[]frame} = false

    OnBegin<override>()<suspends>:void=
        (super:)OnBegin()
        if (ToggleProp?, P := Prop?). P.Hide()

    GetResources<override>():[]resource= array:
        resource:
            ID := ResourceID
            Props := CombineAll of array:
                map:
                    "Location" => Vec3 of Prop?.GetTransform().Translation or GetTransform().Translation
                    "Mesh ID" => (Str of MeshID?) or (Str of "")
                    "OG Material ID" => (Str of MaterialID?) or (Str of "")
                    "Material 1 ID" => (Str of MaterialSettings.Material1ID?) or (Str of "")
                    "Material 2 ID" => (Str of MaterialSettings.Material2ID?) or (Str of "")
                    "Material 3 ID" => (Str of MaterialSettings.Material3ID?) or (Str of "")
                    "Target XYZ" => (Vec3 of MovementSettings.XYZ?.Source) or (Vec3 of V3())
                    "Target X" => (Float of MovementSettings.X?.Source) or (Float of 0.0)
                    "Target Y" => (Float of MovementSettings.Y?.Source) or (Float of 0.0)
                    "Target Z" => (Float of MovementSettings.Z?.Source) or (Float of 0.0)
                    "Target YPR" => (Vec3 of RotationSettings.YPR?.Source) or (Vec3 of V3())
                    "Target Yaw" => (Float of RotationSettings.Yaw?.Source) or (Float of 0.0)
                    "Target Pitch" => (Float of RotationSettings.Pitch?.Source) or (Float of 0.0)
                    "Target Roll" => (Float of RotationSettings.Roll?.Source) or (Float of 0.0)
                    "Toggle Prop" => (Bool of ToggleProp?) or (Bool of true)
                    "Toggle Animation" => (Bool of AnimationSettings.ToggleAnimation?) or (Bool of false)
                    "Animation Trigger" => (Str of AnimationSettings.TriggerAnimation?) or (Str of "<NO TRIGGER>")
                    "Animation Variable" => (Float of AnimationSettings.AnimationVariable?) or (Float of 0.0)
                CreateMap of for(Entry:MaterialSettings.Parameters, PropID := Entry.PropertyID, ParamType := Entry.ParamType). case(ParamType):
                    param_type.Scalar => ("{PropID}", Float of PropID)
                    param_type.Texture => ("{PropID}", Str of PropID)

    GetSideEffects<override>()<suspends>:[]side_effect=
        P := if (Prop?). Prop else. Spawn(Asset)

        if (SetupAnim := OneShotAnimation?). SetupOneShot(P, SetupAnim())
        if (SetupAnim := PingPongAnimation?). SetupPingPong(P, SetupAnim())

        BaseEffects := FilterOptions of array:
            option. MeshID? and PushStr("Mesh ID", SetMesh(P, MeshMap).FN)
            option. MaterialID? and PushStr("OG Material ID", SetMaterial(P, MaterialMap).FN)
            option. MaterialSettings.Material1ID? and PushStr("Material 1 ID", SetMaterial(P, Material1Map, 0).FN)
            option. MaterialSettings.Material2ID? and PushStr("Material 2 ID", SetMaterial(P, Material2Map, 1).FN)
            option. MaterialSettings.Material3ID? and PushStr("Material 3 ID", SetMaterial(P, Material3Map, 2).FN)
            option. ToggleProp? and PushBool("Toggle Prop", Toggle(P).FN)
            option. MovementSettings.XYZ? and PushVec3("Target XYZ", Move(P, MovementSettings.XYZ?.Time).FN)
            option. MovementSettings.X? and PushFloat("Target X", MoveX(P, MovementSettings.X?.Time).FN)
            option. MovementSettings.Y? and PushFloat("Target Y", MoveX(P, MovementSettings.Y?.Time).FN)
            option. MovementSettings.Z? and PushFloat("Target Z", MoveX(P, MovementSettings.Z?.Time).FN)
            option. RotationSettings.YPR? and PushVec3("Target YPR", Rotate(P, RotationSettings.YPR?.Time).FN)
            option. RotationSettings.Yaw? and PushFloat("Target Yaw", RotateYaw(P, RotationSettings.Yaw?.Time).FN)
            option. RotationSettings.Pitch? and PushFloat("Target Pitch", RotatePitch(P, RotationSettings.Pitch?.Time).FN)
            option. RotationSettings.Roll? and PushFloat("Target Roll", RotateRoll(P, RotationSettings.Roll?.Time).FN)
            option. AnimationSettings.TriggerAnimation? and Push("Animation Trigger", PlayAnim(P).FN)
            option. AnimationSettings.ToggleAnimation? and PushBool("Toggle Animation", ToggleAnim(P).FN)
            option. AnimationSettings.AnimationVariable? and PushFloat("Animation Variable", UpdateAnimWithFloat(P, AnimationUpdater?).FN)

        ParameterEffects := if (CurrentProp := P?, CreateInstance := MaterialCreator?):
            Instance := CreateInstance()
            CurrentProp.SetMaterial(Instance.Material)
            MC := material_controller. CurrentMaterial := Instance
            FilterOptions of for(Entry:MaterialSettings.Parameters, PropID := Entry.PropertyID, ParamID := Entry.ParameterID, ParamType := Entry.ParamType):
                case(ParamType):
                    param_type.Scalar => option. PushFloat("{PropID}", SetScalar(MC.GetScalarSetter(ParamID)?.FN).FN)
                    param_type.Texture => option. PushStr("{PropID}", SetTexture(MC.GetTextureSetter(ParamID)?.FN, MC.GetTextures(ParamID)?).FN)
        else. array{}

        Concatenate(BaseEffects, ParameterEffects)
