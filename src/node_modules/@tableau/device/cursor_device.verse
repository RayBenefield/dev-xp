
using. /Fortnite.com/Devices
using. /Verse.org/Simulation

using. Tableau
using. TableauDevice
using. TableauEffect
using. TableauResource

cursor_device<public> := class(creative_device, config_device, side_effect_device):
    @editable ResourceID:string = "Cursor"

    @editable Cursor:creative_prop = creative_prop{}
    @editable Forward:input_trigger_device = input_trigger_device{}
    @editable Left:input_trigger_device = input_trigger_device{}
    @editable Right:input_trigger_device = input_trigger_device{}
    @editable Back:input_trigger_device = input_trigger_device{}

    GetResources<override>():[]resource= array:
        resource:
            ID := ResourceID
            Props := map:
                "ONE" => prop_float. Default := 1.0
                "-ONE" => prop_float. Default := -1.0
                "ZERO" => prop_float. Default := 0.0
                "COMMA" => prop_str. Default := ","
                "X" => prop_int{}
                "Y" => prop_int{}
                "Grid Size" => prop_float. Default := 128.0
                "Right" => prop_int{ Focus := Path("X"), FN := "+", Tweak := Path("ONE")}
                "Left" => prop_int{ Focus := Path("X"), FN := "+", Tweak := Path("-ONE")}
                "Forward" => prop_int{ Focus := Path("Y"), FN := "+", Tweak := Path("-ONE")}
                "Back" => prop_int{ Focus := Path("Y"), FN := "+", Tweak := Path("ONE")}
                "X Coord" => prop_float{ Focus := Path("X"), FN := "*", Tweak := Path("Grid Size") }
                "Y Coord" => prop_float{ Focus := Path("Y"), FN := "*", Tweak := Path("Grid Size") }
                "XY Location" => prop_vec2{ Focus := Path("X Coord"), FN := "Append", Tweak := Path("Y Coord") }
                "Location" => prop_vec3{ Focus := Path("XY Location"), FN := "Append", Tweak := Path("ZERO") }
                "Partial ID" => prop_str{ Focus := Path("X"), FN := "Append", Tweak := Path("COMMA") }
                "Location ID" => prop_str{ Focus := Path("Partial ID"), FN := "Append", Tweak := Path("Y") }
            Abilities := map:
                "Move Left" => array:
                    Set("X").To("Left")
                "Move Right" => array:
                    Set("X").To("Right")
                "Move Forward" => array:
                    Set("Y").To("Forward")
                "Move Back" => array:
                    Set("Y").To("Back")

    GetResourceID<override>()<computes>:?string= option. ResourceID
    GetPerType<override>()<computes>:?string= false
    GetPerSubType<override>()<computes>:?string= false
    GetSideEffects<override>(GameState:game_state, TypeID:string, SubTypeID:string)<suspends>:[]side_effect=
        if (Ability := GameState.Resources[ResourceID].Abilities["Move Forward"]):
            Forward.ReleasedEvent.Subscribe(Ability.ActionFor(SubTypeID).ExecuteAgentFloat)
        if (Ability := GameState.Resources[ResourceID].Abilities["Move Left"]):
            Left.ReleasedEvent.Subscribe(Ability.ActionFor(SubTypeID).ExecuteAgentFloat)
        if (Ability := GameState.Resources[ResourceID].Abilities["Move Right"]):
            Right.ReleasedEvent.Subscribe(Ability.ActionFor(SubTypeID).ExecuteAgentFloat)
        if (Ability := GameState.Resources[ResourceID].Abilities["Move Back"]):
            Back.ReleasedEvent.Subscribe(Ability.ActionFor(SubTypeID).ExecuteAgentFloat)

        array:
            move{ PropertyID := "Location", Prop := option. Cursor, Time := 0.2 }
            # Debug("X", "{ResourceID} X")
            # Debug("Y", "{ResourceID} Y")
            # Debug("Location", "{ResourceID} Location")
            # Debug("Location ID", "{ResourceID} Location ID")
