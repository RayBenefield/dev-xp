
using. /Verse.org/Simulation

using. Vertex

computed_property_v0_1<public> := class<concrete>():
    @editable Name:string = "Property Name"
    @editable Type:prop_type = prop_type.StrType
    @editable Settings:computed_settings_v0_1 = computed_settings_v0_1{}

computed_settings_v0_1 := class<concrete>():
    @editable Focus:prop_path = prop_path{}
    @editable FN:string = ""
    @editable Tweak:prop_path = prop_path{}

action_property_v0_1<public> := class<concrete>():
    @editable Name:string = "Action Name"
    @editable Effects:[]effect_settings_v0_1 = array{}

effect_settings_v0_1 := class<concrete>():
    @editable Focus:prop_path = prop_path{}
    @editable FN:string = ""
    @editable Tweak:prop_path = prop_path{}

resource_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "RESOURCE"

    @editable Computed<public>:[]computed_property_v0_1 = array{}
    @editable Actions<public>:[]action_property_v0_1 = array{}

    GetResources<override>():[]resource= array. resource:
        Props := # CombineAll of array:
            CreateComputedPropMap of Computed
        Actions := CreateActionMap of Actions

CreateComputedPropMap(Props:[]computed_property_v0_1):[string]prop=
    CreateMap of for(P:Props, S := P.Settings, Formula := (S.Focus, S.FN, S.Tweak)). case(P.Type):
        prop_type.BoolType => (P.Name, Bool of Formula)
        prop_type.IntegerType => (P.Name, Integer of Formula)
        prop_type.FloatType => (P.Name, Float of Formula)
        prop_type.NumType => (P.Name, Num of Formula)
        prop_type.StrType => (P.Name, Str of Formula)
        prop_type.StrsType => (P.Name, Strs of Formula)
        prop_type.AgentType => (P.Name, UEAgent of Formula)
        prop_type.Vec2Type => (P.Name, Vec2 of Formula)
        prop_type.Vec3Type => (P.Name, Vec3 of Formula)
        _ => (P.Name, Str of S.Focus)

ToEffect(E:effect_settings_v0_1)<transacts>:effect= MakeEffect(E.Focus, E.FN, E.Tweak)
CreateActionMap(Actions:[]action_property_v0_1):[string]action=
    CreateMap of for(A:Actions, E := A.Effects). (A.Name, Action of E.Map(ToEffect))
