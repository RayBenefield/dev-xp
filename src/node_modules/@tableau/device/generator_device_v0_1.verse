
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

using. Vertex

watched_property_v0_1 := class<concrete>():
    @editable PropertyID:string = "Property"
    @editable PropertyType:prop_type = prop_type.UnknownType
    @editable PropertySource:prop_path = prop_path{}

generator_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "GENERATOR"

    @editable ResourceToGenerate:string = "Type"
    @editable IDSource:prop_path = prop_path{}
    @editable OnCreateActions:[]prop_path = array{}
    @editable WatchedProperties:[]watched_property_v0_1 = array{}
    @editable AutoGenerate:bool_plug = bool_plug{}

    GetResources<override>():[]resource= array. resource:
        Props := CombineAll of array:
            map:
                "AutoGenerate" => Bool of AutoGenerate
                "ID Source" => Str of IDSource
            CreateMap of for(Property:WatchedProperties, ID := Property.PropertyID, Source := Property.PropertySource). case(Property.PropertyType):
                prop_type.IntegerType => ("{Source}", Integer of Source)
                prop_type.StrType => ("{Source}", Str of Source)
                prop_type.Vec3Type => ("{Source}", Vec3 of Source)
                _ => ("{Source}", Str of "{Source}")
        Actions := CombineAll of array:
            map:
                "Create {ResourceToGenerate}" => Action()
            CreateMap of for(Create:OnCreateActions). ("{Create}", Action of Create)

    GetSideEffects<override>()<suspends>:[]side_effect=
        Hydrator := hydrator{ IDSource := IDSource, Resource := hydrated_resource. Type := ResourceToGenerate }
        BaseSideEffects := array:
            Generate(Hydrator.GenerateResourceEvent)
            Push("Create {ResourceToGenerate}", Hydrator.TriggerGenerate)
            PushBool("AutoGenerate", Hydrator.SyncAutoGenerate)
            PushStr("ID Source", Hydrator.SyncID)
        AttachedActions := for(Create:OnCreateActions). AttachWithArg("{Create}", Hydrator.GeneratedResourceEvent)
        Watched := FilterOptions of for(Property:WatchedProperties, ID := Property.PropertyID, Source := Property.PropertySource). case(Property.PropertyType):
            prop_type.IntegerType => option. PushInt("{Source}", Hydrator.SyncInt(ID).SetFN)
            prop_type.StrType => option. PushStr("{Source}", Hydrator.SyncString(ID).SetFN)
            prop_type.Vec3Type => option. PushVec3("{Source}", Hydrator.SyncVec3(ID).SetFN)
            _ => false

        # TODO: Changing the order of these is a problem for some reason
        CombineAllArrays(AttachedActions, BaseSideEffects, Watched)
