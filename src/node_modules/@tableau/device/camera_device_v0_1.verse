
using. /Verse.org/Simulation
using. /Fortnite.com/Devices

CameraController_v0_1<public><constructor>(Camera:gameplay_camera_device)<transacts> := camera_controller_v0_1. Camera := option. Camera
camera_controller_v0_1<public> := class():
    Camera<public>:?gameplay_camera_device = false
    var Agent<public>:?agent = false
    var LastValue<public>:?logic = false
    ToggleCamera<public>(Value:logic):void=
        set LastValue = option. Value
        ApplyCamera(Value)
    SetAgent<public>(Value:?agent):void=
        if (LastValue?, not Value?). ApplyCamera(false)
        set Agent = Value
        if (LastValue?). ApplyCamera(true)
    ApplyCamera(Value:logic):void= if (C := Camera?, A := Agent?):
        if (Value?). C.AddTo(A) else. C.RemoveFrom(A)

camera_device_v0_1<public> := class(tableau_device):
    DeviceType<override>:string = "CAMERA"

    @editable Enabled:bool_plug = bool_plug{}

    @editable Angle:?gameplay_camera_fixed_angle_device = false
    @editable Point:?gameplay_camera_fixed_point_device = false
    @editable Orbit:?gameplay_camera_orbit_device = false

    GetResources<override>():[]resource= array. resource:
        Props := map:
            "Enabled" => Bool of Enabled
            "Possessed By" => UEAgent of SubPath("Possessed By")

    GetSideEffects<override>()<suspends>:[]side_effect=
        Controller := CameraController_v0_1(Angle?) or
            CameraController_v0_1(Point?) or
            CameraController_v0_1(Orbit?) or
            camera_controller_v0_1{}

        array:
            PushAgent("Possessed By", Controller.SetAgent)
            PushBool("Enabled", Controller.ToggleCamera)
