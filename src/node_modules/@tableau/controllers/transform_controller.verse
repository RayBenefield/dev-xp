
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /UnrealEngine.com/Temporary/SpatialMath

using. Anima
using. Vertex

transform_controller_v0_1 := class():
    Prop:?creative_prop

    var Location:vector3 = vector3{}
    var Rotation:vector3 = vector3{}
    var Scale:vector3 = vector3{ X := 1.0, Y := 1.0, Z := 1.0 }

    var Time:float = 0.0

    AnimateEvent<public>:event() = event(){}

    Init(Context:context)<suspends>:void=
        loop:
            AnimateEvent.Await()
            Animate()

    SetTime(Value:float):void= set Time = Value

    SetLocation(Value:vector3):void= { set Location = Value; AnimateEvent.Signal() }
    SetX(Value:float):void= { set Location = V3(Value, Location.Y, Location.Z); AnimateEvent.Signal() }
    SetY(Value:float):void= { set Location = V3(Location.X, Value, Location.Z); AnimateEvent.Signal() }
    SetZ(Value:float):void= { set Location = V3(Location.X, Location.Y, Value); AnimateEvent.Signal() }

    SetRotation(Value:vector3):void= { set Rotation = Value; AnimateEvent.Signal() }
    SetYaw(Value:float):void= { set Rotation = V3(Value, Rotation.Y, Rotation.Z); AnimateEvent.Signal() }
    SetPitch(Value:float):void= { set Rotation = V3(Rotation.X, Value, Rotation.Z); AnimateEvent.Signal() }
    SetRoll(Value:float):void= { set Rotation = V3(Rotation.X, Rotation.Y, Value); AnimateEvent.Signal() }

    SetScale(Value:vector3):void= { set Scale = Value; AnimateEvent.Signal() }
    SetScaleX(Value:float):void= { set Scale = V3(Value, Scale.Y, Scale.Z); AnimateEvent.Signal() }
    SetScaleY(Value:float):void= { set Scale = V3(Scale.X, Value, Scale.Z); AnimateEvent.Signal() }
    SetScaleZ(Value:float):void= { set Scale = V3(Scale.X, Scale.Y, Value); AnimateEvent.Signal() }

    Animate()<suspends>:void=
        AnimateEvent.Debounce(0.0)
        Anim := Frame(MoveTo(Location), RotateTo(Rotation), ScaleTo(Scale)).SetTime(Time)
        OneShot(Prop, Anim)
