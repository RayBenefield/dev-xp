import { resolve, basename } from 'path'

import * as R from 'ramda'
import log from '@dev-xp/log'
import { Package } from 'node-wick'
import { WickDownloader } from 'wick-downloader'
import camelCaseKeys from '@dev-xp/camel-case-keys'

const downloader = R.memoizeWith(
    R.identity,
    R.pipe(R.constructN(0, WickDownloader), dl =>
        R.pipe(R.invoker(0, 'startService'), R.andThen(() => dl))(dl)
    )
)
const getPakNames = R.andThen(R.invoker(0, 'getPakNames'))
const downloadFile = R.invoker(2, 'downloadFile')
const download = (file, path = 'paks') => {
    const dest = resolve(path, basename(file))
    return R.andThen(downloadFile(file, dest))
}
const shutdown = R.andThen(R.invoker(0, 'shutdown'))

const pkg = R.constructN(1, Package)
const getData = R.invoker(0, 'get_data')
const onlyOne = R.pipe(R.length, R.equals(1))
const unwrapSingle = R.when(onlyOne, R.nth(0))

const wick = {
    getPakNames: R.pipe(downloader, getPakNames),
    download: path => file => R.pipe(downloader, download(file, path))(),
    shutdown: R.pipe(downloader, shutdown),
    parse: R.pipe(pkg, getData, camelCaseKeys, unwrapSingle),
}

export default wick
