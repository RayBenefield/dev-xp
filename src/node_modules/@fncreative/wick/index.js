import { resolve, basename } from 'path'

import * as R from 'ramda'
import fs from '@dev-xp/fs'
import log from '@dev-xp/log'
import { Package } from 'node-wick'
import { sync as root } from '@dev-xp/root'
import { WickDownloader } from 'wick-downloader'
import camelCaseKeys from '@dev-xp/camel-case-keys'

const owd = process.cwd()
const chdir = path => process.chdir(path)
chdir(root())
const paksPath = resolve('paks')

const startupFn = R.invoker(0, 'startService')
const startup = dlr =>
    R.pipe(
        startupFn,
        R.andThen(() => dlr)
    )(dlr)
const initDownloader = R.pipe(R.constructN(0, WickDownloader), startup)

const setupWick = R.andThen(downloader => {
    const setProp = prop => R.set(R.lensProp(prop))
    const getProp = prop => R.view(R.lensProp(prop))

    const prefix = 'FortniteGame/Content/Paks/'
    const addPrefixes = R.map(R.replace(/^/g, prefix))
    const addLocal = setProp('local')(addPrefixes(fs.readDir(paksPath)))
    const getAllAndLocal = R.juxt([getProp('all'), getProp('local')])
    const findNew = R.pipe(getAllAndLocal, R.apply(R.difference))
    const addNew = paks => setProp('new')(findNew(paks), paks)
    const getNew = R.pipe(R.objOf('all'), addLocal, addNew)

    const pkg = R.constructN(1, Package)
    const getData = R.invoker(0, 'get_data')
    const onlyOne = R.pipe(R.length, R.equals(1))
    const unwrapSingle = R.when(onlyOne, R.nth(0))

    const getPaks = () => getNew(downloader.getPakNames())
    const download = (file, path = 'paks') => {
        const dest = resolve(path, basename(file))
        return downloader.downloadFile(file, dest).then(() => dest)
    }
    const shutdown = R.pipe(
        () => downloader.shutdown(),
        () => chdir(owd)
    )
    const parse = R.pipe(pkg, getData, camelCaseKeys, unwrapSingle)

    return { getPaks, download, shutdown, parse }
})

const wick = R.pipe(initDownloader, setupWick)

export default wick
