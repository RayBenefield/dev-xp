
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Verse.org/Concurrency
using. /UnrealEngine.com/Temporary/UI
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Numb
using. Vertex

(GameState:game_state).OnUpdated<public>(PropSource:prop_path, PlayerID:string, Tap:type{_()<suspends>:void})<suspends>:void=
    ResourceID := PropSource.ResourceID
    PropertyID := PropSource.PropertyID
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    return case(PropType):
        prop_type.NumType =>
            Prop := GameState.GetNumProp(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.StrType =>
            Prop := GameState.GetStrProp(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.StrsType =>
            Prop := GameState.GetStrsProp(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.BoolType =>
            Prop := GameState.GetBoolProp(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.FloatType =>
            Prop := GameState.GetFloatProp(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.AgentType =>
            Prop := GameState.GetAgentProp(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.Vec2Type =>
            Prop := GameState.GetVec2Prop(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.Vec3Type =>
            Prop := GameState.GetVec3Prop(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.IntegerType =>
            Prop := GameState.GetIntProp(ResourceID, PropertyID, PlayerID)
            loop:
                Value := Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.ActionType =>
            Prop := GameState.GetAction(ResourceID, PropertyID, PlayerID)
            loop:
                Prop.UpdatedEvent().Await()
                spawn. Tap()
        prop_type.UnknownType => {}

(GameState:game_state).SyncBool<public>(PropSource:prop_path, PlayerID:string, Tap:type{_(:logic)<suspends>:void})<suspends>:void=
    Prop := GameState.GetBoolProp(PropSource.ResourceID, PropSource.PropertyID, PlayerID)
    var Values:[]logic = array. Prop.Get()
    sync:
        loop:
            Value := Prop.UpdatedEvent().Await()
            if ((Values.Length = 0) or (Value <> Values[Values.Length-1])). set Values = Values + array. Value
        loop:
            loop:
                if (Value := Values[0]):
                    spawn. Tap(Value)
                    Sleep(0.1)
                    if (NewValues := Values.Slice[1]). set Values = NewValues
                else. break
            NewValue := Prop.UpdatedEvent().Await()

(GameState:game_state).SyncFloat<public>(PropSource:prop_path, PlayerID:string, Tap:type{_(:float)<suspends>:void})<suspends>:void=
    Prop := GameState.GetFloatProp(PropSource.ResourceID, PropSource.PropertyID, PlayerID)
    var Values:[]float = array. Prop.Get()
    sync:
        loop:
            Value := Prop.UpdatedEvent().Await()
            if ((Values.Length = 0) or (Value <> Values[Values.Length-1])). set Values = Values + array. Value
        loop:
            loop:
                if (Value := Values[0]):
                    spawn. Tap(Value)
                    Sleep(0.1)
                    if (NewValues := Values.Slice[1]). set Values = NewValues
                else. break
            NewValue := Prop.UpdatedEvent().Await()

(GameState:game_state).SyncStr<public>(PropSource:prop_path, PlayerID:string, Tap:type{_(:string)<suspends>:void})<suspends>:void=
    Prop := GameState.GetStrProp(PropSource.ResourceID, PropSource.PropertyID, PlayerID)
    var Values:[]string = array. Prop.Get()
    sync:
        loop:
            Value := Prop.UpdatedEvent().Await()
            if ((Values.Length = 0) or (Value <> Values[Values.Length-1])). set Values = Values + array. Value
        loop:
            loop:
                if (Value := Values[0]):
                    spawn. Tap(Value)
                    Sleep(0.1)
                    if (NewValues := Values.Slice[1]). set Values = NewValues
                else. break
            NewValue := Prop.UpdatedEvent().Await()

(GameState:game_state).SyncInt<public>(PropSource:prop_path, PlayerID:string, Tap:type{_(:int)<suspends>:void})<suspends>:void=
    Prop := GameState.GetIntProp(PropSource.ResourceID, PropSource.PropertyID, PlayerID)
    var Values:[]int = array. Prop.Get()
    sync:
        loop:
            Value := Prop.UpdatedEvent().Await()
            if ((Values.Length = 0) or (Value <> Values[Values.Length-1])). set Values = Values + array. Value
        loop:
            loop:
                if (Value := Values[0]):
                    spawn. Tap(Value)
                    Sleep(0.1)
                    if (NewValues := Values.Slice[1]). set Values = NewValues
                else. break
            NewValue := Prop.UpdatedEvent().Await()

(GameState:game_state).SyncAgent<public>(PropSource:prop_path, PlayerID:string, Tap:type{_(:?agent)<suspends>:void})<suspends>:void=
    Prop := GameState.GetAgentProp(PropSource.ResourceID, PropSource.PropertyID, PlayerID)
    var Values:[]?agent = array. Prop.Get()
    sync:
        loop:
            Value := Prop.UpdatedEvent().Await()
            if ((Values.Length = 0) or (Value <> Values[Values.Length-1])). set Values = Values + array. Value
        loop:
            loop:
                if (Value := Values[0]):
                    spawn. Tap(Value)
                    Sleep(0.1)
                    if (NewValues := Values.Slice[1]). set Values = NewValues
                else. break
            NewValue := Prop.UpdatedEvent().Await()

(GameState:game_state).SyncVec3<public>(PropSource:prop_path, PlayerID:string, Tap:type{_(:vector3)<suspends>:void})<suspends>:void=
    Prop := GameState.GetVec3Prop(PropSource.ResourceID, PropSource.PropertyID, PlayerID)
    var Values:[]vector3 = array. Prop.Get()
    sync:
        loop:
            Value := Prop.UpdatedEvent().Await()
            if ((Values.Length = 0) or (Value <> Values[Values.Length-1])). set Values = Values + array. Value
        loop:
            loop:
                if (Value := Values[0]):
                    spawn. Tap(Value)
                    Sleep(0.1)
                    if (NewValues := Values.Slice[1]). set Values = NewValues
                else. break
            NewValue := Prop.UpdatedEvent().Await()

(GameState:game_state).AttachAction<public>(PropSource:prop_path, PlayerID:string, Event:awaitable(t) where t:type)<suspends>:void=
    ActionGoo := GameState.GetAction(PropSource.ResourceID, PropSource.PropertyID, PlayerID)
    spawn. WatchAction(Event, ActionGoo)

WatchAction(Event:awaitable(t), ActionGoo:event_goo where t:type)<suspends>:void=
    loop:
        Event.Await()
        ActionGoo.Set()

(GameState:game_state).AttachGenerator<public>(Event:awaitable(resource))<suspends>:void=
    spawn. GenerateResource(GameState, Event)
GenerateResource(GameState:game_state, Event:awaitable(resource))<suspends>:void=
    loop. GameState.AddResource(Event.Await())

(GameState:game_state).AddUI<public>(Widget:widget, PlayerID:string, Settings:canvas_settings)<suspends>:?widget=
    CanvasSlot := MakeWidget(Widget, Settings)
    Canvas := if (Settings.Interactive?). GameState.GetInteractiveCanvas(PlayerID) else. GameState.GetCanvas(PlayerID)
    if (C := Canvas?):
        C.AddWidget(CanvasSlot)
        return option. Widget

    return false

(GameState:game_state).UpdateFloat<public>(PropSource:prop_path, PlayerID:string, From:event(float))<suspends>:void=
    Prop := GameState.GetFloatProp(PropSource, PlayerID)
    loop:
        Value := From.Await()
        Prop.Set(Value)
