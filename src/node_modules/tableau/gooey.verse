
using { /Verse.org/Simulation }

gooey<public>(t:type) := class:
    Init<public>(Default:t)<suspends>:void =
        var Value:t = Default
        sync:
            loop:
                GetEvent.Await()
                Updated.Signal(Value)
            loop:
                set Value = Updated.Await()


    Updated:event(t) = event(t){}
    UpdatedEvent<public>():event(t) = Updated
    Set<public>(NewValue:t):void = Updated.Signal(NewValue)

    GetEvent:event() = event(){}
    Get<public>()<suspends>:t =
        race:
            ReturnValue := Updated.Await()
            block:
                GetEvent.Signal()
                Sleep(Inf)
        return ReturnValue

prop_agent<public> := class<concrete>():
    @editable ID<public>:string = ""
    Default<public>:?agent = false

prop_str<public> := class<concrete>():
    @editable ID<public>:string = ""
    @editable Default<public>:string = ""

prop_num<public> := class<concrete>():
    @editable ID<public>:string = ""
    @editable Default<public>:num = num{}

prop_float<public> := class<concrete>():
    @editable ID<public>:string = ""
    @editable Default<public>:float = 0.0

prop_bool<public> := class<concrete>():
    @editable ID<public>:string = ""
    @editable Default<public>:logic = false

Computed<public>(VM1:gooey(t), VM2:gooey(u), Transform:type{_(:t, :u):v} where t:type, u:type, v:type):gooey(v)=
    ResultVM:gooey(v) = gooey(v){}
    spawn. Combine(VM1, VM2, Transform, ResultVM)
    return ResultVM

Combine<public>(VM1:gooey(t), VM2:gooey(u), Transform:type{_(:t, :u):v}, ResultVM:gooey(v) where t:type, u:type, v:type)<suspends>:void=
    var First:t = VM1.Get()
    var Second:u = VM2.Get()

    spawn. ResultVM.Init(Transform(First, Second))
    loop:
        NewPair := race:
            block:
                set First = VM1.UpdatedEvent().Await()
                (First, Second)
            block:
                set Second = VM2.UpdatedEvent().Await()
                (First, Second)
        Transformed := Transform(NewPair)
        ResultVM.Set(Transformed)

Map<public>(VM:gooey(t), Transform:type{_(:t):u} where t:type, u:type):gooey(u)=
    ResultVM:gooey(u) = gooey(u){}
    spawn. MapTransformer(VM, Transform, ResultVM)
    return ResultVM

MapTransformer<public>(VM:gooey(t), Transform:type{_(:t):u}, ResultVM:gooey(u) where t:type, u:type)<suspends>:void=
    var Value:t = VM.Get()

    spawn. ResultVM.Init(Transform(Value))
    loop:
        set Value = VM.UpdatedEvent().Await()
        Transformed := Transform(Value)
        ResultVM.Set(Transformed)

(GooeyString:gooey_string).ToMsg<public>():gooey_message=
    gooey_message. VM := Map(GooeyString, Str2Msg)

gooey_message<public> := class(gooey(message)):
    VM<public>:gooey(message) = gooey(message){}
    Init<override>(Default:message)<suspends>:void = VM.Init(Default)
    Set<override>(NewValue:message):void = VM.Set(NewValue)
    Get<override>()<suspends>:message = VM.Get()
    UpdatedEvent<override>():event(message) = VM.Updated

gooey_string<public> := class(gooey(string)):
    VM<public>:gooey(string) = gooey(string){}
    var Latest<public>:string = ""
    Init<override>(Default:string)<suspends>:void=
        set Latest = Default
        VM.Init(Default)
    Set<override>(NewValue:string):void=
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:string = VM.Get()
    UpdatedEvent<override>():event(string) = VM.Updated

gooey_int<public> := class(gooey(int)):
    VM<public>:gooey(int) = gooey(int){}
    var Latest<public>:int = 0
    Init<override>(Default:int)<suspends>:void=
        set Latest = Default
        VM.Init(Default)
    Set<override>(NewValue:int):void=
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:int = VM.Get()
    UpdatedEvent<override>():event(int) = VM.Updated

gooey_float<public> := class(gooey(float)):
    VM<public>:gooey(float) = gooey(float){}
    var Latest<public>:float = 0.0
    Init<override>(Default:float)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:float):void=
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:float = VM.Get()
    UpdatedEvent<override>():event(float) = VM.Updated

gooey_agent<public> := class(gooey(?agent)):
    VM<public>:gooey(?agent) = gooey(?agent){}
    Init<override>(Default:?agent)<suspends>:void = VM.Init(Default)
    Set<override>(NewValue:?agent):void = VM.Set(NewValue)
    Get<override>()<suspends>:?agent = VM.Get()
    UpdatedEvent<override>():event(?agent) = VM.Updated

gooey_num<public> := class(gooey(num)):
    VM<public>:gooey(num) = gooey(num){}
    var Latest<public>:num = num{}
    Init<override>(Default:num)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:num):void =
        if (not NewValue.Equals[Latest]):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:num = VM.Get()
    UpdatedEvent<override>():event(num) = VM.Updated

gooey_bool<public> := class(gooey(logic)):
    VM<public>:gooey(logic) = gooey(logic){}
    var Latest<public>:logic = false
    Init<override>(Default:logic)<suspends>:void=
        set Latest = Default
        spawn. VM.Init(Default)
    Set<override>(NewValue:logic):void =
        if (NewValue <> Latest):
            set Latest = NewValue
            VM.Set(NewValue)
    Get<override>()<suspends>:logic = VM.Get()
    UpdatedEvent<override>():event(logic) = VM.Updated
