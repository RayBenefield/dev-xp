using { /Verse.org/Simulation }

gooey<public>(t:type) := class:
    Init<public>(Default:t)<suspends>:void =
        var Value:t = Default
        loop:
            block:
                GetEvent.Await()
                Updated.Signal(Value)

    Updated<public>:event(t) = event(t){}
    Set<public>(NewValue:t):void = Updated.Signal(NewValue)

    GetEvent:event() = event(){}
    Get<public>()<suspends>:t =
        race:
            ReturnValue := Updated.Await()
            block:
                GetEvent.Signal()
                Sleep(Inf)
        return ReturnValue

gooey_message<public> := class:
    Gooey:gooey(message) = gooey(message){}
    Init<public>(Default:message)<suspends>:void = Gooey.Init(Default)
    Set<public>(NewValue:message):void = Gooey.Set(NewValue)
    Get<public>()<suspends>:message = Gooey.Get()
    Updated<public>():event(message) = Gooey.Updated

gooey_int<public> := class:
    Gooey:gooey(int) = gooey(int){}
    Init<public>(Default:int)<suspends>:void = Gooey.Init(Default)
    Set<public>(NewValue:int):void = Gooey.Set(NewValue)
    Get<public>()<suspends>:int = Gooey.Get()
    Updated<public>():event(int) = Gooey.Updated
