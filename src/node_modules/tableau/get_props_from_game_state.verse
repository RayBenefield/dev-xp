
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/Diagnostics
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Numb
using. Vertex
using. TableauResource

(GameState:game_state).GetPropType<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:prop_type =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetPropType(PropPath)
(GameState:game_state).GetPropType<public>(PropPath:prop_path):prop_type =
    GameState.GetPropType(PropPath.ResourceID, PropPath.PropertyID)
(GameState:game_state).GetPropType<public>(ResourceID:string, PropertyID:string):prop_type =
    GameState.Resources[ResourceID].GetPropType(PropertyID) or prop_type.Unknown

(GameState:game_state).GetAbilityExec<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:type{_():void}=
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetAbilityExec(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAbilityExec<public>(ResourceID:string, AbilityID:string, PlayerID:string)<suspends>:type{_():void}=
    GSResource := GameState.AwaitResource(ResourceID)
    if (Ability := GSResource.Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecuteEmpty
    ProjectLog("No Ability for {ResourceID}.{AbilityID}@{PlayerID}", log_level.Warning)
    return NOOP

