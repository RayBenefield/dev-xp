
using. /Verse.org/Simulation

using. Goo
using. Numb
using. Vertex
using. TableauResource

(GameState:game_state).GetPropType<public>(Source:string, HalfPath:half_path, PlayerID:string):prop_type =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetPropType(PropPath)
(GameState:game_state).GetPropType<public>(PropPath:prop_path):prop_type =
    GameState.GetPropType(PropPath.ResourceID, PropPath.PropertyID)
(GameState:game_state).GetPropType<public>(ResourceID:string, PropertyID:string):prop_type =
    GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown

(GameState:game_state).GetAbilityExec<public>(ResourceID:string, AbilityID:string, PlayerID:string):type{_():void}=
    if (Ability := GameState.Resources[ResourceID].Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).Execute
    return NOOP
(GameState:game_state).GetAbilityExecPay<public>(Focus:prop_path, PlayerID:string):type{_(:load):void}=
    GameState.GetAbilityExecPay(Focus.ResourceID, Focus.PropertyID, PlayerID)
(GameState:game_state).GetAbilityExecPay<public>(ResourceID:string, AbilityID:string, PlayerID:string):type{_(:load):void}=
    if (Ability := GameState.Resources[ResourceID].Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecutePay
    return NOOP_Pay
(GameState:game_state).GetAbilityAgentFloatExec<public>(ResourceID:string, AbilityID:string, PlayerID:string):type{_(:agent, :float):void}=
    if (Ability := GameState.Resources[ResourceID].Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecuteAgentFloat
    return NOOP_AgentFloat

NOOP_Pay(Pay:load):void= {}
NOOP_AgentFloat(Agent:agent, Float:float):void= {}

# TODO: `Map` does not update `Latest` of the new Goo and there is no cache.
(GameState:game_state).GetNumProp<public>(Source:string, HalfPath:half_path, PlayerID:string):num_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetNumProp(PropPath, PlayerID)
(GameState:game_state).GetNumProp<public>(PropPath:prop_path, PlayerID:string):num_goo =
    GameState.GetNumProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetNumProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):num_goo =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.Num =>
                if (Num := GSResource.Props.Nums[PropertyID]):
                    Num.ValueFor(PlayerID)
                else. num_goo{}
            prop_type.Float =>
                if (Float := GSResource.Props.Floats[PropertyID]):
                    num_goo. VM := Map(Float.ValueFor(PlayerID), ToNum)
                else. num_goo{}
            prop_type.StatNum =>
                if (Num := GSResource.StatProps.Nums[PropertyID]):
                    Num
                else. num_goo{}
            prop_type.StatFloat =>
                if (Float := GSResource.StatProps.Floats[PropertyID]):
                    num_goo. VM := Map(Float, ToNum)
                else. num_goo{}
            prop_type.CompNum =>
                if (Num := GSResource.CompProps.Nums[PropertyID]):
                    Num.ValueFor(PlayerID)
                else. num_goo{}
            _ => num_goo{}

    return num_goo{}

(GameState:game_state).GetFloatProp<public>(Source:string, HalfPath:half_path, PlayerID:string):float_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetFloatProp(PropPath, PlayerID)
(GameState:game_state).GetFloatProp<public>(PropPath:prop_path, PlayerID:string):float_goo =
    GameState.GetFloatProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetFloatProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):float_goo =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.Float =>
                if (Float := GSResource.Props.Floats[PropertyID]):
                    Float.ValueFor(PlayerID)
                else. float_goo{}
            prop_type.StatFloat =>
                if (Float := GSResource.StatProps.Floats[PropertyID]):
                    Float
                else. float_goo{}
            prop_type.Num =>
                if (Num := GSResource.Props.Nums[PropertyID]):
                    float_goo. VM := Map(Num.ValueFor(PlayerID), ToFloat)
                else. float_goo{}
            prop_type.StatNum =>
                if (Num := GSResource.StatProps.Nums[PropertyID]):
                    float_goo. VM := Map(Num, ToFloat)
                else. float_goo{}
            _ => float_goo{}

    return float_goo{}

ToNum<public>(Value:float):num = num. Value := Value
ToFloat<public>(Num:num):float = Num.Value * Pow(10.0, Num.Exponent * 1.0)

(GameState:game_state).GetBoolProp<public>(Source:string, HalfPath:half_path, PlayerID:string):bool_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetBoolProp(PropPath, PlayerID)
(GameState:game_state).GetBoolProp<public>(PropPath:prop_path, PlayerID:string):bool_goo =
    GameState.GetBoolProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetBoolProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):bool_goo =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.StatBool =>
                if (Bool := GSResource.StatProps.Bools[PropertyID]):
                    Bool
                else. bool_goo{}
            prop_type.Bool =>
                if (Bool := GSResource.Props.Bools[PropertyID]):
                    Bool.ValueFor(PlayerID)
                else. bool_goo{}
            prop_type.CompBool =>
                if (Bool := GSResource.CompProps.Bools[PropertyID]):
                    Bool.ValueFor(PlayerID)
                else. bool_goo{}
            _ => bool_goo{}

    return bool_goo{}

(GameState:game_state).GetStrProp<public>(Source:string, HalfPath:half_path, PlayerID:string):string_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetStrProp(PropPath, PlayerID)
(GameState:game_state).GetStrProp<public>(PropPath:prop_path, PlayerID:string):string_goo =
    GameState.GetStrProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetStrProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):string_goo =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.Num =>
                if (Num := GSResource.Props.Nums[PropertyID]). StrGoo(Map(Num.ValueFor(PlayerID), NumToStr))
                else. StrGoo("")
            prop_type.Float =>
                if (Float := GSResource.Props.Floats[PropertyID]). StrGoo(Map(Float.ValueFor(PlayerID), FloatToStr))
                else. StrGoo("")
            prop_type.Str =>
                if (Str := GSResource.Props.Strs[PropertyID]). Str.ValueFor(PlayerID)
                else. StrGoo("")
            prop_type.StatNum =>
                if (Num := GSResource.StatProps.Nums[PropertyID]). StrGoo(Map(Num, NumToStr))
                else. StrGoo("")
            prop_type.StatFloat =>
                if (Float := GSResource.StatProps.Floats[PropertyID]). StrGoo(Map(Float, FloatToStr))
                else. StrGoo("")
            prop_type.StatStr =>
                if (Str := GSResource.StatProps.Strs[PropertyID]). Str
                else. StrGoo("")
            prop_type.CompNum =>
                if (Num := GSResource.CompProps.Nums[PropertyID]). StrGoo(Map(Num.ValueFor(PlayerID), NumToStr))
                else. StrGoo("")
            prop_type.CompStr =>
                if (Str := GSResource.CompProps.Strs[PropertyID]). Str.ValueFor(PlayerID)
                else. StrGoo("")
            _ => StrGoo("")

    return StrGoo("")

NumToStr(Value:num):string = "{Value}"
FloatToStr(Value:float):string = "{Value}"

(GameState:game_state).GetAgentProp<public>(Source:string, HalfPath:half_path, PlayerID:string):agent_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetAgentProp(PropPath, PlayerID)
(GameState:game_state).GetAgentProp<public>(PropPath:prop_path, PlayerID:string):agent_goo =
    GameState.GetAgentProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAgentProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):agent_goo=
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.Agent =>
                if (Agent := GSResource.Props.Agents[PropertyID]):
                    Agent.ValueFor(PlayerID)
                else. agent_goo{}
            prop_type.StatAgent =>
                if (Agent := GSResource.StatProps.Agents[PropertyID]):
                    Agent
                else. agent_goo{}
            _ => agent_goo{}
    return agent_goo{}

(GameState:game_state).GetVec2Prop<public>(Source:string, HalfPath:half_path, PlayerID:string):vec2_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetVec2Prop(PropPath, PlayerID)
(GameState:game_state).GetVec2Prop<public>(PropPath:prop_path, PlayerID:string):vec2_goo =
    GameState.GetVec2Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetVec2Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string):vec2_goo=
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.CompVec2 =>
                if (Vec2 := GSResource.CompProps.Vec2s[PropertyID]):
                    Vec2.ValueFor(PlayerID)
                else. vec2_goo{}
            _ =>
                vec2_goo{}
    return vec2_goo{}
