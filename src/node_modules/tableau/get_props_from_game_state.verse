using { TableauResource }

(GameState:game_state).GetAbility<public>(ResourceID:string, AbilityID:string, ParticipantID:string):type{_():void}=
    if (Ability := GameState.Resources[ResourceID].Abilities[AbilityID]):
        return Ability.ActionFor(ParticipantID).Execute
    return NOOP

(GameState:game_state).GetNumProp<public>(ResourceID:string, PropertyID:string, ParticipantID:string):gooey_num =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GSResource.PropTypes[PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.Num =>
                if (Num := GSResource.Props.Nums[PropertyID]):
                    Num.ValueFor(ParticipantID)
                else. gooey_num{}
            prop_type.Float =>
                if (Float := GSResource.Props.Floats[PropertyID]):
                    gooey_num. VM := Map(Float.ValueFor(ParticipantID), ToNum)
                else. gooey_num{}
            prop_type.StatNum =>
                if (Num := GSResource.StatProps.Nums[PropertyID]):
                    Num
                else. gooey_num{}
            prop_type.StatFloat =>
                if (Float := GSResource.StatProps.Floats[PropertyID]):
                    gooey_num. VM := Map(Float, ToNum)
                else. gooey_num{}
            prop_type.CompNum =>
                if (Num := GSResource.CompProps.Nums[PropertyID]):
                    Num.ValueFor(ParticipantID)
                else. gooey_num{}
            _ => gooey_num{}

    return gooey_num{}

(GameState:game_state).GetNumProp<public>(Source:string, PropPath:prop_path, ParticipantID:string):gooey_num =
    ResourceID := if (ID := PropPath.ResourceID?, ID <> ""). ID else. Source
    GameState.GetNumProp(ResourceID, PropPath.PropertyID, ParticipantID)

(GameState:game_state).GetFloatProp<public>(ResourceID:string, PropertyID:string, ParticipantID:string):gooey_float =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GSResource.PropTypes[PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.Float =>
                if (Float := GSResource.Props.Floats[PropertyID]):
                    Float.ValueFor(ParticipantID)
                else. gooey_float{}
            prop_type.StatFloat =>
                if (Float := GSResource.StatProps.Floats[PropertyID]):
                    Float
                else. gooey_float{}
            prop_type.Num =>
                if (Num := GSResource.Props.Nums[PropertyID]):
                    gooey_float. VM := Map(Num.ValueFor(ParticipantID), ToFloat)
                else. gooey_float{}
            _ => gooey_float{}

    return gooey_float{}

ToNum<public>(Value:float):num = num. Value := Value
ToFloat<public>(Num:num):float = Num.Value * Pow(10.0, Num.Exponent * 1.0)

(GameState:game_state).GetFloatProp<public>(Source:string, PropPath:prop_path, ParticipantID:string):gooey_float =
    ResourceID := if (ID := PropPath.ResourceID?, ID <> ""). ID else. Source
    GameState.GetFloatProp(ResourceID, PropPath.PropertyID, ParticipantID)

(GameState:game_state).GetBoolProp<public>(ResourceID:string, PropertyID:string, ParticipantID:string):gooey_bool =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GSResource.PropTypes[PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.StatBool =>
                if (Bool := GSResource.StatProps.Bools[PropertyID]):
                    Bool
                else. gooey_bool{}
            prop_type.Bool =>
                if (Bool := GSResource.Props.Bools[PropertyID]):
                    Bool.ValueFor(ParticipantID)
                else. gooey_bool{}
            prop_type.CompBool =>
                if (Bool := GSResource.CompProps.Bools[PropertyID]):
                    Bool.ValueFor(ParticipantID)
                else. gooey_bool{}
            _ => gooey_bool{}

    return gooey_bool{}

(GameState:game_state).GetBoolProp<public>(Source:string, PropPath:prop_path, ParticipantID:string):gooey_bool =
    ResourceID := if (ID := PropPath.ResourceID?). ID else. Source
    GameState.GetBoolProp(ResourceID, PropPath.PropertyID, ParticipantID)

(GameState:game_state).GetStrProp<public>(ResourceID:string, PropertyID:string, ParticipantID:string):gooey_string =
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GSResource.PropTypes[PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.Num =>
                if (Num := GSResource.Props.Nums[PropertyID]):
                    gooey_string. VM := Map(Num.ValueFor(ParticipantID), NumToStr)
                else. gooey_string{}
            prop_type.Float =>
                if (Float := GSResource.Props.Floats[PropertyID]):
                    gooey_string. VM := Map(Float.ValueFor(ParticipantID), FloatToStr)
                else. gooey_string{}
            prop_type.Str =>
                if (Str := GSResource.Props.Strs[PropertyID]):
                    Str.ValueFor(ParticipantID)
                else. gooey_string{}
            prop_type.StatNum =>
                if (Num := GSResource.StatProps.Nums[PropertyID]):
                    gooey_string. VM := Map(Num, NumToStr)
                else. gooey_string{}
            prop_type.StatFloat =>
                if (Float := GSResource.StatProps.Floats[PropertyID]):
                    gooey_string. VM := Map(Float, FloatToStr)
                else. gooey_string{}
            prop_type.StatStr =>
                if (Str := GSResource.StatProps.Strs[PropertyID]):
                    Str
                else. gooey_string{}
            prop_type.CompNum =>
                if (Num := GSResource.CompProps.Nums[PropertyID]):
                    gooey_string. VM := Map(Num.ValueFor(ParticipantID), NumToStr)
                else. gooey_string{}
            _ => gooey_string{}

    return gooey_string{}

NumToStr(Value:num):string = "{Value}"
FloatToStr(Value:float):string = "{Value}"

(GameState:game_state).GetAgentProp<public>(ResourceID:string, PropertyID:string, ParticipantID:string):gooey_agent=
    if (GSResource := GameState.Resources[ResourceID]):
        PropType := GSResource.PropTypes[PropertyID] or prop_type.Unknown
        return case(PropType):
            prop_type.StatAgent =>
                if (Agent := GSResource.StatProps.Agents[PropertyID]):
                    Agent
                else. gooey_agent{}
            _ => gooey_agent{}
    return gooey_agent{}
