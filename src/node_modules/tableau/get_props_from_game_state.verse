
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/Diagnostics
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Numb
using. Vertex
using. TableauResource

(GameState:game_state).GetPropType<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:prop_type =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetPropType(PropPath)
(GameState:game_state).GetPropType<public>(PropPath:prop_path):prop_type =
    GameState.GetPropType(PropPath.ResourceID, PropPath.PropertyID)
(GameState:game_state).GetPropType<public>(ResourceID:string, PropertyID:string):prop_type =
    GameState.Resources[ResourceID].GetPropType(PropertyID) or prop_type.Unknown

(GameState:game_state).GetAbilityExec<public>(PropPath:prop_path, PlayerID:string)<suspends>:type{_():void}=
    GameState.GetAbilityExec(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAbilityExec<public>(ResourceID:string, AbilityID:string, PlayerID:string)<suspends>:type{_():void}=
    GSResource := GameState.AwaitResource(ResourceID)
    if (Ability := GSResource.Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecuteEmpty
    ProjectLog("No Ability for {ResourceID}.{AbilityID}@{PlayerID}", log_level.Warning)
    return NOOP
(GameState:game_state).GetAbilityAgentFloatExec<public>(ResourceID:string, AbilityID:string, PlayerID:string)<suspends>:type{_(:agent, :float):void}=
    GSResource := GameState.AwaitResource(ResourceID)
    if (Ability := GSResource.Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecuteAgentFloat
    ProjectLog("No Ability for {ResourceID}.{AbilityID}@{PlayerID}", log_level.Warning)
    return NOOP_AgentFloat

NOOP_AgentFloat(Agent:agent, Float:float):void= {}

(GameState:game_state).GetIntProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:int_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetIntProp(PropPath, PlayerID)
(GameState:game_state).GetIntProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:int_goo =
    GameState.GetIntProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetIntProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:int_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetIntProp(PropertyID, PlayerID)

(GameState:game_state).GetNumProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:num_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetNumProp(PropPath, PlayerID)
(GameState:game_state).GetNumProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:num_goo =
    GameState.GetNumProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetNumProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:num_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetNumProp(PropertyID, PlayerID)

(GameState:game_state).GetFloatProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:float_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetFloatProp(PropPath, PlayerID)
(GameState:game_state).GetFloatProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:float_goo =
    GameState.GetFloatProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetFloatProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:float_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetFloatProp(PropertyID, PlayerID)

(GameState:game_state).GetBoolProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:bool_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetBoolProp(PropPath, PlayerID)
(GameState:game_state).GetBoolProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:bool_goo =
    GameState.GetBoolProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetBoolProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:bool_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetBoolProp(PropertyID, PlayerID)

(GameState:game_state).GetStrProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:string_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetStrProp(PropPath, PlayerID)
(GameState:game_state).GetStrProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:string_goo =
    GameState.GetStrProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetStrProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:string_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetStrProp(PropertyID, PlayerID)

(GameState:game_state).GetAgentProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:agent_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetAgentProp(PropPath, PlayerID)
(GameState:game_state).GetAgentProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:agent_goo =
    GameState.GetAgentProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAgentProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:agent_goo=
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetAgentProp(PropertyID, PlayerID)

(GameState:game_state).GetVec2Prop<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:vec2_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetVec2Prop(PropPath, PlayerID)
(GameState:game_state).GetVec2Prop<public>(PropPath:prop_path, PlayerID:string)<suspends>:vec2_goo =
    GameState.GetVec2Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetVec2Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:vec2_goo=
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetVec2Prop(PropertyID, PlayerID)

(GameState:game_state).GetVec3Prop<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:vec3_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetVec3Prop(PropPath, PlayerID)
(GameState:game_state).GetVec3Prop<public>(PropPath:prop_path, PlayerID:string)<suspends>:vec3_goo =
    GameState.GetVec3Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetVec3Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:vec3_goo=
    GSResource := GameState.AwaitResource(ResourceID)
    GSResource.GetVec3Prop(PropertyID, PlayerID)
