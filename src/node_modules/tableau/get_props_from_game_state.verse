
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/Diagnostics

using. Goo
using. Numb
using. Vertex
using. TableauResource

(GameState:game_state).GetPropType<public>(Source:string, HalfPath:half_path, PlayerID:string):prop_type =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetPropType(PropPath)
(GameState:game_state).GetPropType<public>(PropPath:prop_path):prop_type =
    GameState.GetPropType(PropPath.ResourceID, PropPath.PropertyID)
(GameState:game_state).GetPropType<public>(ResourceID:string, PropertyID:string):prop_type =
    GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown

(GameState:game_state).GetAbilityExec<public>(PropPath:prop_path, PlayerID:string):type{_():void}=
    GameState.GetAbilityExec(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAbilityExec<public>(ResourceID:string, AbilityID:string, PlayerID:string):type{_():void}=
    if (Ability := GameState.Resources[ResourceID].Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).Execute
    return NOOP
(GameState:game_state).GetAbilityAgentFloatExec<public>(ResourceID:string, AbilityID:string, PlayerID:string):type{_(:agent, :float):void}=
    if (Ability := GameState.Resources[ResourceID].Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecuteAgentFloat
    return NOOP_AgentFloat

NOOP_AgentFloat(Agent:agent, Float:float):void= {}

(GameState:game_state).GetNumProp<public>(Source:string, HalfPath:half_path, PlayerID:string):num_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetNumProp(PropPath, PlayerID)
(GameState:game_state).GetNumProp<public>(PropPath:prop_path, PlayerID:string):num_goo =
    GameState.GetNumProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetNumProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):num_goo =
    PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
    MaybeNum:?num_goo = if (GSResource := GameState.Resources[ResourceID]). case(PropType):
        prop_type.Num =>
            if (Num := GSResource.Props.Nums[PropertyID]):
                Result := Num.ValueFor(PlayerID)
                option. Result
            else. false
        prop_type.Float =>
            if (Float := GSResource.Props.Floats[PropertyID]):
                # ProjectLog("{PropType} -> Num for {ResourceID}.{PropertyID}@{PlayerID}", log_level.Warning)
                Result := Float.AsNum(PlayerID)
                option. Result
            else. false
        _ => false
    else. false

    if (Num := MaybeNum?):
        return Num
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Num", log_level.Warning)
        return NumGoo()

(GameState:game_state).GetFloatProp<public>(Source:string, HalfPath:half_path, PlayerID:string):float_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetFloatProp(PropPath, PlayerID)
(GameState:game_state).GetFloatProp<public>(PropPath:prop_path, PlayerID:string):float_goo =
    GameState.GetFloatProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetFloatProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):float_goo =
    PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
    MaybeFloat:?float_goo = if (GSResource := GameState.Resources[ResourceID]). case(PropType):
        prop_type.Float =>
            if (Float := GSResource.Props.Floats[PropertyID]):
                Result := Float.ValueFor(PlayerID)
                option. Result
            else. false
        prop_type.Num =>
            if (Num := GSResource.Props.Nums[PropertyID]):
                # ProjectLog("{PropType} -> Float for {ResourceID}.{PropertyID}@{PlayerID}", log_level.Warning)
                Result := Num.AsFloat(PlayerID)
                option. Result
            else. false
        _ => false
    else. false

    if (Float := MaybeFloat?):
        return Float
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Float", log_level.Warning)
        return FloatGoo()

ToNum<public>(Value:float):num = num. Value := Value
ToFloat<public>(Num:num):float = Num.Value * Pow(10.0, Num.Exponent * 1.0)

(GameState:game_state).GetBoolProp<public>(Source:string, HalfPath:half_path, PlayerID:string):bool_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetBoolProp(PropPath, PlayerID)
(GameState:game_state).GetBoolProp<public>(PropPath:prop_path, PlayerID:string):bool_goo =
    GameState.GetBoolProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetBoolProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):bool_goo =
    PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
    MaybeBool:?bool_goo = if (GSResource := GameState.Resources[ResourceID]). case(PropType):
        prop_type.Bool =>
            if (Bool := GSResource.Props.Bools[PropertyID]):
                Result := Bool.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false
    else. false

    if (Bool := MaybeBool?):
        return Bool
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Bool", log_level.Warning)
        return BoolGoo(false)

(GameState:game_state).GetStrProp<public>(Source:string, HalfPath:half_path, PlayerID:string):string_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetStrProp(PropPath, PlayerID)
(GameState:game_state).GetStrProp<public>(PropPath:prop_path, PlayerID:string):string_goo =
    GameState.GetStrProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetStrProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):string_goo =
    PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
    MaybeStr:?string_goo = if (GSResource := GameState.Resources[ResourceID]). case(PropType):
        prop_type.Str =>
            if (Str := GSResource.Props.Strs[PropertyID]):
                Result := Str.ValueFor(PlayerID)
                option. Result
            else. false
        prop_type.Num =>
            if (Num := GSResource.Props.Nums[PropertyID]):
                ProjectLog("{PropType} -> Str for {ResourceID}.{PropertyID}@{PlayerID}", log_level.Warning)
                Result := StrGoo(Map(Num.ValueFor(PlayerID), NumToStr))
                option. Result
            else. false
        prop_type.Float =>
            if (Float := GSResource.Props.Floats[PropertyID]):
                ProjectLog("{PropType} -> Str for {ResourceID}.{PropertyID}@{PlayerID}", log_level.Warning)
                Result := StrGoo(Map(Float.ValueFor(PlayerID), FloatToStr))
                option. Result
            else. false
        prop_type.Bool =>
            if (Bool := GSResource.Props.Bools[PropertyID]):
                ProjectLog("{PropType} -> Str for {ResourceID}.{PropertyID}@{PlayerID}", log_level.Warning)
                Result := StrGoo(Map(Bool.ValueFor(PlayerID), BoolToStr))
                option. Result
            else. false
        _ => false
    else. false

    if (Str := MaybeStr?):
        return Str
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Str", log_level.Warning)
        return StrGoo("")

NumToStr(Value:num):string = "{Value}"
FloatToStr(Value:float):string = "{Value}"
BoolToStr(Value:logic):string = if (Value?). "true" else. "false"

(GameState:game_state).GetAgentProp<public>(Source:string, HalfPath:half_path, PlayerID:string):agent_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetAgentProp(PropPath, PlayerID)
(GameState:game_state).GetAgentProp<public>(PropPath:prop_path, PlayerID:string):agent_goo =
    GameState.GetAgentProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAgentProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):agent_goo=
    PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
    MaybeAgent:?agent_goo = if (GSResource := GameState.Resources[ResourceID]). case(PropType):
        prop_type.Agent =>
            if (Agent := GSResource.Props.Agents[PropertyID]):
                Result := Agent.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false
    else. false

    if (Agent := MaybeAgent?):
        return Agent
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Agent", log_level.Warning)
        return AgentGoo(false)

(GameState:game_state).GetVec2Prop<public>(Source:string, HalfPath:half_path, PlayerID:string):vec2_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetVec2Prop(PropPath, PlayerID)
(GameState:game_state).GetVec2Prop<public>(PropPath:prop_path, PlayerID:string):vec2_goo =
    GameState.GetVec2Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetVec2Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string):vec2_goo=
    PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
    MaybeVec2:?vec2_goo = if (GSResource := GameState.Resources[ResourceID]). case(PropType):
        prop_type.Vec2 =>
            if (Vec2 := GSResource.Props.Vec2s[PropertyID]):
                Result := Vec2.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false
    else. false

    if (Vec2 := MaybeVec2?):
        return Vec2
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Vec2", log_level.Warning)
        return Vec2Goo()

(GameState:game_state).GetVec3Prop<public>(Source:string, HalfPath:half_path, PlayerID:string):vec3_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetVec3Prop(PropPath, PlayerID)
(GameState:game_state).GetVec3Prop<public>(PropPath:prop_path, PlayerID:string):vec3_goo =
    GameState.GetVec3Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetVec3Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string):vec3_goo=
    PropType := GameState.ResourceRepository.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
    MaybeVec3:?vec3_goo = if (GSResource := GameState.Resources[ResourceID]). case(PropType):
        prop_type.Vec3 =>
            if (Vec3 := GSResource.Props.Vec3s[PropertyID]):
                Result := Vec3.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false
    else. false

    if (Vec3 := MaybeVec3?):
        return Vec3
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Vec3", log_level.Warning)
        return Vec3Goo()
