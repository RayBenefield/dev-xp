
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/Diagnostics
using. /UnrealEngine.com/Temporary/SpatialMath

using. Goo
using. Numb
using. Vertex
using. TableauResource

(GameState:game_state).GetPropType<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:prop_type =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetPropType(PropPath)
(GameState:game_state).GetPropType<public>(PropPath:prop_path):prop_type =
    GameState.GetPropType(PropPath.ResourceID, PropPath.PropertyID)
(GameState:game_state).GetPropType<public>(ResourceID:string, PropertyID:string):prop_type =
    GameState.PropTypes[ResourceID][PropertyID] or prop_type.Unknown

(GameState:game_state).GetAbilityExec<public>(PropPath:prop_path, PlayerID:string)<suspends>:type{_():void}=
    GameState.GetAbilityExec(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAbilityExec<public>(ResourceID:string, AbilityID:string, PlayerID:string)<suspends>:type{_():void}=
    GSResource := GameState.AwaitResource(ResourceID)
    if (Ability := GSResource.Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecuteEmpty
    ProjectLog("No Ability for {ResourceID}.{AbilityID}@{PlayerID}", log_level.Warning)
    return NOOP
(GameState:game_state).GetAbilityAgentFloatExec<public>(ResourceID:string, AbilityID:string, PlayerID:string)<suspends>:type{_(:agent, :float):void}=
    GSResource := GameState.AwaitResource(ResourceID)
    if (Ability := GSResource.Abilities[AbilityID]):
        return Ability.ActionFor(PlayerID).ExecuteAgentFloat
    ProjectLog("No Ability for {ResourceID}.{AbilityID}@{PlayerID}", log_level.Warning)
    return NOOP_AgentFloat

NOOP_AgentFloat(Agent:agent, Float:float):void= {}

(GameState:game_state).GetIntProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:int_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetIntProp(PropPath, PlayerID)
(GameState:game_state).GetIntProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:int_goo =
    GameState.GetIntProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetIntProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:int_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeInt:?int_goo = case(PropType):
        prop_type.Integer =>
            if (Integer := GSResource.Props.Ints[PropertyID]):
                Result := Integer.ValueFor(PlayerID)
                option. Result
            else. false
        prop_type.Float =>
            if (Float := GSResource.Props.Floats[PropertyID]):
                Result := Float.AsInt(PlayerID)
                option. Result
            else. false
        _ => false

    if (Integer := MaybeInt?):
        return Integer
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Int", log_level.Warning)
        return IntGoo()

(GameState:game_state).GetNumProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:num_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetNumProp(PropPath, PlayerID)
(GameState:game_state).GetNumProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:num_goo =
    GameState.GetNumProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetNumProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:num_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeNum:?num_goo = case(PropType):
        prop_type.Num =>
            if (Num := GSResource.Props.Nums[PropertyID]):
                Result := Num.ValueFor(PlayerID)
                option. Result
            else. false
        prop_type.Float =>
            if (Float := GSResource.Props.Floats[PropertyID]):
                Result := Float.AsNum(PlayerID)
                option. Result
            else. false
        prop_type.Integer =>
            if (Integer:= GSResource.Props.Ints[PropertyID]):
                Result := Integer.AsNum(PlayerID)
                option. Result
            else. false
        _ => false

    if (Num := MaybeNum?):
        return Num
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Num", log_level.Warning)
        return NumGoo()

(GameState:game_state).GetFloatProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:float_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetFloatProp(PropPath, PlayerID)
(GameState:game_state).GetFloatProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:float_goo =
    GameState.GetFloatProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetFloatProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:float_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeFloat:?float_goo = case(PropType):
        prop_type.Float =>
            if (Float := GSResource.Props.Floats[PropertyID]):
                Result := Float.ValueFor(PlayerID)
                option. Result
            else. false
        prop_type.Num =>
            if (Num := GSResource.Props.Nums[PropertyID]):
                Result := Num.AsFloat(PlayerID)
                option. Result
            else. false
        prop_type.Integer =>
            if (Integer := GSResource.Props.Ints[PropertyID]):
                Result := Integer.AsFloat(PlayerID)
                option. Result
            else. false
        _ => false

    if (Float := MaybeFloat?):
        return Float
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Float", log_level.Warning)
        return FloatGoo()

(GameState:game_state).GetBoolProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:bool_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetBoolProp(PropPath, PlayerID)
(GameState:game_state).GetBoolProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:bool_goo =
    GameState.GetBoolProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetBoolProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:bool_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeBool:?bool_goo = case(PropType):
        prop_type.Bool =>
            if (Bool := GSResource.Props.Bools[PropertyID]):
                Result := Bool.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false

    if (Bool := MaybeBool?):
        return Bool
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Bool", log_level.Warning)
        return BoolGoo(false)

(GameState:game_state).GetStrProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:string_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetStrProp(PropPath, PlayerID)
(GameState:game_state).GetStrProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:string_goo =
    GameState.GetStrProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetStrProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:string_goo =
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeStr:?string_goo = case(PropType):
        prop_type.Str =>
            if (Str := GSResource.Props.Strs[PropertyID]):
                Result := Str.ValueFor(PlayerID)
                option. Result
            else. false
        prop_type.Num =>
            if (Num := GSResource.Props.Nums[PropertyID]):
                Result := Num.AsStr(PlayerID)
                option. Result
            else. false
        prop_type.Float =>
            if (Float := GSResource.Props.Floats[PropertyID]):
                Result := Float.AsStr(PlayerID)
                option. Result
            else. false
        prop_type.Bool =>
            if (Bool := GSResource.Props.Bools[PropertyID]):
                Result := Bool.AsStr(PlayerID)
                option. Result
            else. false
        prop_type.Integer =>
            if (Integer := GSResource.Props.Ints[PropertyID]):
                Result := Integer.AsStr(PlayerID)
                option. Result
            else. false
        prop_type.Vec2 =>
            if (Vec2 := GSResource.Props.Vec2s[PropertyID]):
                Result := Vec2.AsStr(PlayerID)
                option. Result
            else. false
        prop_type.Vec3 =>
            if (Vec3 := GSResource.Props.Vec3s[PropertyID]):
                Result := Vec3.AsStr(PlayerID)
                option. Result
            else. false
        prop_type.Agent =>
            if (Agent:= GSResource.Props.Agents[PropertyID]):
                Result := Agent.AsStr(PlayerID)
                option. Result
            else. false
        _ => false

    if (Str := MaybeStr?):
        return Str
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Str", log_level.Warning)
        return StrGoo("")

(GameState:game_state).GetAgentProp<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:agent_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetAgentProp(PropPath, PlayerID)
(GameState:game_state).GetAgentProp<public>(PropPath:prop_path, PlayerID:string)<suspends>:agent_goo =
    GameState.GetAgentProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetAgentProp<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:agent_goo=
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeAgent:?agent_goo = case(PropType):
        prop_type.Agent =>
            if (Agent := GSResource.Props.Agents[PropertyID]):
                Result := Agent.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false

    if (Agent := MaybeAgent?):
        return Agent
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Agent", log_level.Warning)
        return AgentGoo(false)

(GameState:game_state).GetVec2Prop<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:vec2_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetVec2Prop(PropPath, PlayerID)
(GameState:game_state).GetVec2Prop<public>(PropPath:prop_path, PlayerID:string)<suspends>:vec2_goo =
    GameState.GetVec2Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetVec2Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:vec2_goo=
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeVec2:?vec2_goo = case(PropType):
        prop_type.Vec2 =>
            if (Vec2 := GSResource.Props.Vec2s[PropertyID]):
                Result := Vec2.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false

    if (Vec2 := MaybeVec2?):
        return Vec2
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Vec2", log_level.Warning)
        return Vec2Goo()

(GameState:game_state).GetVec3Prop<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:vec3_goo =
    PropPath := GameState.ResolvePath(Source, HalfPath, PlayerID)
    GameState.GetVec3Prop(PropPath, PlayerID)
(GameState:game_state).GetVec3Prop<public>(PropPath:prop_path, PlayerID:string)<suspends>:vec3_goo =
    GameState.GetVec3Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)
(GameState:game_state).GetVec3Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string)<suspends>:vec3_goo=
    GSResource := GameState.AwaitResource(ResourceID)
    PropType := GameState.GetPropType(ResourceID, PropertyID)
    MaybeVec3:?vec3_goo = case(PropType):
        prop_type.Vec3 =>
            if (Vec3 := GSResource.Props.Vec3s[PropertyID]):
                Result := Vec3.ValueFor(PlayerID)
                option. Result
            else. false
        _ => false

    if (Vec3 := MaybeVec3?):
        return Vec3
    else:
        ProjectLog("Not found for {ResourceID}.{PropertyID}@{PlayerID}: {PropType} -> Vec3", log_level.Warning)
        return Vec3Goo()
