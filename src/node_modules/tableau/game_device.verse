
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Verse.org/Simulation/Tags }
using { /UnrealEngine.com/Temporary/Diagnostics }

using { TableauWork }
using { TableauAgent }
using { TableauResource }
using { TableauProducer }
using { TableauParticipant }

commander<public> := class():
    FiredEvent<public>:event(command) = event(command){}
    Fire<public>(Command:command):void = FiredEvent.Signal(Command)

CreateBasicResource<public><constructor>(Name:string) := resource:
    ID := Name
    StatProps := props:
        Strs := array:
            prop_str{ ID := "Name", Default := Name }
    Props := props:
        Nums := array:
            prop_num{ ID := "Count", Default := num. Value := 5.0 }
    Abilities := array:
        ability:
            ID := "Increase Count"
            Effects := array:
                effect{ FN := "Increase", Focus := option. Path("Count") }
                # effect{ FN := "Set Property", Pay := load. Str := "Count" }

CreateProducerResource<public><constructor>(Name:string, Production:float, CostGrowth:float, BaseCost:float) := resource:
    ID := Name
    StatProps := props:
        Strs := array:
            prop_str{ ID := "Name", Default := Name }
        Floats := array:
            prop_float{ ID := "Cost Growth", Default := CostGrowth }
            prop_float{ ID := "Base Cost", Default := BaseCost }
        # property{ ID := "Cost Resource" }
        # property{ ID := "Production Resource" }
        # property{ ID := "First Is Free" }
        # property{ ID := "Required Producers" }
    Props := props:
        Nums := array:
            prop_num{ ID := "Count", Default := num{} }
        Floats := array:
            prop_float{ ID := "Production", Default := Production }
        # property{ ID := "Max Count" }
        # property{ ID := "Cost Growth" }
        # property{ ID := "Production Rate" }
        # property{ ID := "Production" }
    CompProps := comp_props:
        Nums := array:
            comp_num:
                ID := "Production Amount"
                BaseProp := "Count"
                Computer := computer{ FN := "Multiply", Pay := Load(Path(Name, "Production")) }
            comp_num:
                ID := "Cost Rate"
                BaseProp := "Cost Growth"
                Computer := computer{ FN := "Power", Pay := Load(Path(Name, "Count")) }
            comp_num:
                ID := "Cost"
                BaseProp := "Cost Rate"
                Computer := computer{ FN := "Multiply", Pay := Load(Path(Name, "Base Cost")) }
        Bools := array:
            comp_bool:
                ID := "Can Afford"
                BaseResource := "Gold"
                BaseProp := "Count"
                Computer := computer{ FN := ">=", Pay := Load(Path("Cost")) }
    Abilities := array:
        ability:
            ID := "Buy"
            Effects := array:
                effect{ FN := "Is True", Focus := option. Path("Can Afford") }
                effect{ FN := "Decrease", Focus := option. Path("Gold", "Count"), Pay := Load(Path(Name, "Cost")) }
                effect{ FN := "Increase", Focus := option. Path("Count"), Pay := load. Float := 1.0 }
                # effect{ FN := "Get Property", Pay := load. Str := "Count" }
                # effect{ FN := "Increase", Pay := load. Float := 1.0 }
                # effect{ FN := "Set Property", Pay := load. Str := "Count" }
                # effect{ FN := "Change Subject", Pay := load. Str := "Gold" }
                # effect{ FN := "Get Property", Pay := load. Str := "Count" }
                # effect{ FN := "Decrease", Pay := load. Str := "Cost" }
                # effect{ FN := "Increase", Pay := load. Float := 2.0 }
                # effect{ FN := "Set Property", Pay := load. Str := "Count" }
    #             effector{ FN := "Has Required" }
    #             effector{ FN := "Can Afford" }
    #             effector{ FN := "Not Maxed" }
    #             effector{ FN := "Pay Cost" }
        ability:
            ID := "Produce"
            Effects := array:
                effect{ FN := "Execute Ability", Focus := option. Path("Gold", "Increase Count"), Pay := Load(Path(Name, "Production Amount")) }
                # effect{ FN := "Get Property", Pay := load. Str := "Production Amount" }
                # effect{ FN := "Change Subject", Pay := load. Str := "Gold" }
                # effect{ FN := "Execute Ability", Pay := load. Str := "Increase Count" }
    # Triggers := array:
    #     trigger{ ID := "Produce Timer", FN := "Timer" }
    #     trigger{ ID := "Buy Zone", FN := "Proximity" }
    # Checks := array:
    #     check{ ID := "Owned By" }
    #     check{ ID := "Is Maxed" }
    #     check{ ID := "Has Required" }
    #     check{ ID := "Can Afford" }

game_device := class(creative_device):

    OnBegin<override>()<suspends>:void=
        AgentRepository:agent_repository = agent_repository:
            ParticipantToAgent := map:
                "1" => option. GetPlayspace().GetPlayers()[0]
        ParticipantRepository:participant_repository = participant_repository:
            Initial := array. participant. ID := "1"

        Cost := cost{ Amount := num. Value := 3.738, Type := "1" }
        ProducerRepository:producer_repository = producer_repository:
            Initial := array:
                producer{ ID := "1", Name := "Merchant", MaxCount := 100, Cost := option. Cost }
                producer{ ID := "2", Name := "WeaponSmith", MaxCount := 100, Cost := option. Cost }
                producer{ ID := "3", Name := "Armorsmith", MaxCount := 100, Cost := option. Cost }

        ResourceRepository:resource_repository = resource_repository:
            Initial := array:
                CreateBasicResource("Gold")
                CreateProducerResource("Merchant", 1.67, 1.07, 3.738)
                CreateProducerResource("Weaponsmith", 20.0, 1.15, 60.0)
                CreateProducerResource("Armorsmith", 90.0, 1.14, 720.0)

        Dispatcher:dispatcher = dispatcher{}


        EffectorProvider := effector_provider{}
        NumComputerProvider := num_computer_provider{}
        Commander := commander{}
        GameState := game_state:
            Commander := Commander
            EffectorProvider := EffectorProvider
            NumComputerProvider := NumComputerProvider

        Effects:[string]effector = map:
            "Is True" => is_true_effector. GameState := GameState
            # "Get Property" => get_property_effector. GameState := GameState
            "Increase" => adjust_effector. GameState := GameState
            "Decrease" => adjust_effector{ GameState := GameState, Sign := sign.Negative }
            # "Set Property" => set_property_effector. GameState := GameState
            # "Change Subject" => change_subject_effector. GameState := GameState
            "Execute Ability" => execute_ability_effector. GameState := GameState

        for (Name->Effect:Effects). EffectorProvider.Register(Name, Effect)

        NumComputers:[string]num_computer = map:
            "Multiply" => multiply_num_computer{}

        for (Name->NumComputer:NumComputers). NumComputerProvider.Register(Name, NumComputer)

        TableauDevices := LoadTableauDevices()
        for(Device:TableauDevices). spawn. Device.Init(GameState)
        Print("Devices: {TableauDevices.Length}")

        BuyEffector := buy_producer_effector{}

        ParticipantMutator:participant_mutator = participant_mutator:
            GameState := GameState
            Repo := ParticipantRepository
            AgentRepository := AgentRepository
            ResourceRepository := ResourceRepository
        ProducerMutator:producer_mutator = producer_mutator:
            GameState := GameState
            Repo := ProducerRepository
            ParticipantRepository := ParticipantRepository
            BuyEffector := BuyEffector
        ResourceMutator:resource_mutator = resource_mutator:
            GameState := GameState
            Repo := ResourceRepository
            ParticipantRepository := ParticipantRepository

        Mutators:[]mutator = array:
            ParticipantMutator
            ProducerMutator
            ResourceMutator

        spawn. MutateGameState(Dispatcher, Mutators)
        spawn. PseudoController(Dispatcher, ResourceRepository, Commander)

        # Test
        sync:
            Dispatcher.Dispatch(Ev_ParticipantAdded("1"))
            Dispatcher.Dispatch(Ev_ResourceAdded("Gold"))
            Dispatcher.Dispatch(Ev_ResourceAdded("Merchant"))
            Dispatcher.Dispatch(Ev_ResourceAdded("Weaponsmith"))
            Dispatcher.Dispatch(Ev_ResourceAdded("Armorsmith"))
            Dispatcher.Dispatch(Ev_ProducerAdded("1"))
            Dispatcher.Dispatch(Ev_ProducerAdded("2"))
            Dispatcher.Dispatch(Ev_ProducerAdded("3"))
            PossessParticipant(Dispatcher)
            ProduceResources(GameState)
            # IncreaseResource(Dispatcher, ParticipantRepository)
            # BuyProducers(Dispatcher, ProducerRepository, 1, 1.3)
            # BuyProducers(Dispatcher, ProducerRepository, 2, 2.1)
            # BuyProducers(Dispatcher, ProducerRepository, 3, 2.6)

    MutateGameState(Dispatcher:dispatcher, Mutators:[]mutator)<suspends>:void=
        loop:
            DomainEvents := Dispatcher.DomainEvents().Await()
            for (Mutator:Mutators). Mutator.ApplyEvents(DomainEvents)

    PseudoController(Dispatcher:dispatcher, Repo:resource_repository, Commander:commander)<suspends>:void=
        loop:
            Command := Commander.FiredEvent.Await()
            ResourceID := Command.Subject
            PropertyID := Command.Property
            ParticipantID := Command.Target
            Value := Command.Pay.Num
            if (Resource:= Repo.GetByID[ResourceID]):
                if (NewResource := Resource.SetProperty[PropertyID, ParticipantID, Value]):
                    if (Repo.Update[NewResource]). Dispatcher.Dispatch(Ev_PropertyUpdated(ResourceID, PropertyID, ParticipantID))

    PossessParticipant(Dispatcher:dispatcher)<suspends>:void=
        Sleep(1.0)
        Dispatcher.Dispatch(Ev_ParticipantPossessed("1"))

    ProduceResources(GameState:game_state)<suspends>:void=
        sync:
            loop:
                Sleep(0.6)
                if (Produce := GameState.Resources["Merchant"].Abilities["Produce"]):
                    Produce.ActionFor("1").Execute()
            loop:
                Sleep(3.0)
                if (Produce := GameState.Resources["Weaponsmith"].Abilities["Produce"]):
                    Produce.ActionFor("1").Execute()
            loop:
                Sleep(6.0)
                if (Produce := GameState.Resources["Armorsmith"].Abilities["Produce"]):
                    Produce.ActionFor("1").Execute()

    IncreaseResource(Dispatcher:dispatcher, Repo:participant_repository)<suspends>:void=
        var Iterations:int = 0
        loop:
            Sleep(1.0)
            if (Participant := Repo.GetByID["1"]):
                NewParticipant := Participant.AddResources("1", num{ Value := 1.0, Exponent := 3 })
                if (Repo.Update[NewParticipant]). Dispatcher.Dispatch(Ev_ResourcesGained("1", "1"))
            set Iterations += 1
            if (Iterations > 99). break

    BuyProducers(Dispatcher:dispatcher, Repo:producer_repository, ID:string, Frequency:float)<suspends>:void=
        loop:
            Sleep(Frequency)
            if (Producer := Repo.GetByID[ID]):
                if (NewProducer := Producer.IncreaseCount["1"]):
                    if (Repo.Update[NewProducer]). Dispatcher.Dispatch(Ev_ProducerPurchased(ID, "1"))
