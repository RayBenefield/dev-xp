
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Verse.org/Simulation/Tags }
using { /UnrealEngine.com/Temporary/Diagnostics }

using { TableauAgent }
using { TableauResource }
using { TableauParticipant }

commander<public> := class():
    FiredEvent<public>:event(command) = event(command){}
    CreatedEvent<public>:event(resource) = event(resource){}
    Fire<public>(Command:command):void = FiredEvent.Signal(Command)
    Create<public>(Resource:resource):void = CreatedEvent.Signal(Resource)

game_device := class(creative_device):

    OnBegin<override>()<suspends>:void=
        AgentRepository:agent_repository = agent_repository:
            ParticipantToAgent := map:
                "1" => option. GetPlayspace().GetPlayers()[0]
        ParticipantRepository:participant_repository = participant_repository:
            Initial := array. participant. ID := "1"

        ResourceRepository:resource_repository = resource_repository{}
        Dispatcher:dispatcher = dispatcher{}
        EffectorProvider := effector_provider{}
        NumComputerProvider := num_computer_provider{}
        Commander := commander{}

        GameState := game_state:
            Commander := Commander
            EffectorProvider := EffectorProvider
            NumComputerProvider := NumComputerProvider

        Effects:[string]effector = map:
            "Is True" => is_true_effector. GameState := GameState
            "Increase" => adjust_effector. GameState := GameState
            "Decrease" => adjust_effector{ GameState := GameState, Sign := sign.Negative }
            "Execute Ability" => execute_ability_effector. GameState := GameState

        for (Name->Effect:Effects). EffectorProvider.Register(Name, Effect)

        NumComputers:[string]num_computer = map:
            "Multiply" => multiply_num_computer{}

        for (Name->NumComputer:NumComputers). NumComputerProvider.Register(Name, NumComputer)

        TableauDevices := LoadTableauDevices()
        for(Device:TableauDevices). spawn. Device.Init(GameState)
        Print("Devices: {TableauDevices.Length}")

        ParticipantMutator:participant_mutator = participant_mutator:
            GameState := GameState
            Repo := ParticipantRepository
            AgentRepository := AgentRepository
            ResourceRepository := ResourceRepository
        ResourceMutator:resource_mutator = resource_mutator:
            GameState := GameState
            Repo := ResourceRepository
            ParticipantRepository := ParticipantRepository

        Mutators:[]mutator = array:
            ParticipantMutator
            ResourceMutator

        spawn. MutateGameState(Dispatcher, Mutators)
        spawn. PseudoController(Dispatcher, ResourceRepository, Commander)

        ConfigDevices := LoadConfigDevices()
        for (Device:ConfigDevices):
            NewResources := Device.GetResources()
            for (Resource:NewResources). Commander.Create(Resource)

        # Test
        sync:
            Dispatcher.Dispatch(Ev_ParticipantAdded("1"))
            PossessParticipant(Dispatcher)
            ProduceResources(GameState)

    MutateGameState(Dispatcher:dispatcher, Mutators:[]mutator)<suspends>:void=
        loop:
            DomainEvents := Dispatcher.DomainEvents().Await()
            for (Mutator:Mutators). Mutator.ApplyEvents(DomainEvents)

    PseudoController(Dispatcher:dispatcher, Repo:resource_repository, Commander:commander)<suspends>:void=
        loop:
            race:
                block:
                    Command := Commander.FiredEvent.Await()
                    ResourceID := Command.Subject
                    PropertyID := Command.Property
                    ParticipantID := Command.Target
                    Value := Command.Pay.Num
                    if (Resource:= Repo.GetByID[ResourceID]):
                        if (NewResource := Resource.SetProperty[PropertyID, ParticipantID, Value]):
                            if (Repo.Update[NewResource]). Dispatcher.Dispatch(Ev_PropertyUpdated(ResourceID, PropertyID, ParticipantID))
                block:
                    Resource := Commander.CreatedEvent.Await()
                    if (Repo.Add[Resource]):
                        Dispatcher.Dispatch(Ev_ResourceAdded(Resource.ID))

    PossessParticipant(Dispatcher:dispatcher)<suspends>:void=
        Sleep(1.0)
        Dispatcher.Dispatch(Ev_ParticipantPossessed("1"))

    ProduceResources(GameState:game_state)<suspends>:void=
        sync:
            loop:
                Sleep(0.6)
                if (Produce := GameState.Resources["Merchant"].Abilities["Produce"]):
                    Produce.ActionFor("1").Execute()
            loop:
                Sleep(3.0)
                if (Produce := GameState.Resources["Weaponsmith"].Abilities["Produce"]):
                    Produce.ActionFor("1").Execute()
            loop:
                Sleep(6.0)
                if (Produce := GameState.Resources["Armorsmith"].Abilities["Produce"]):
                    Produce.ActionFor("1").Execute()
