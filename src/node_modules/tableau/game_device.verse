
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Verse.org/Simulation/Tags }
using { /UnrealEngine.com/Temporary/Diagnostics }

using { TableauWork }
using { TableauAgent }
using { TableauResource }
using { TableauProducer }
using { TableauParticipant }

game_device := class(creative_device):

    OnBegin<override>()<suspends>:void=
        AgentRepository:agent_repository = agent_repository:
            ParticipantToAgent := map:
                1 => option. GetPlayspace().GetPlayers()[0]
        ParticipantRepository:participant_repository = participant_repository:
            Initial := array. participant. ID := 1

        Cost := cost{ Amount := num. Value := 3.738, Type := 1 }
        ProducerRepository:producer_repository = producer_repository:
            Initial := array:
                producer{ ID := 1, Name := "Merchant", MaxCount := 100, Cost := option. Cost }
                producer{ ID := 2, Name := "WeaponSmith", MaxCount := 100, Cost := option. Cost }
                producer{ ID := 3, Name := "Armorsmith", MaxCount := 100, Cost := option. Cost }

        ResourceRepository:resource_repository = resource_repository:
            Initial := array. resource{ ID := 1, Name := "Gold", Properties := array. property{ Name := "Testing" } }

        Dispatcher:dispatcher = dispatcher{}

        GameState := game_state{}
        TableauDevices := LoadTableauDevices()
        for(Device:TableauDevices). spawn. Device.Init(GameState)
        Print("Devices: {TableauDevices.Length}")

        BuyEffect := buy_producer_effect{}

        ParticipantMutator:participant_mutator = participant_mutator:
            GameState := GameState
            Repo := ParticipantRepository
            AgentRepository := AgentRepository
            ResourceRepository := ResourceRepository
        ProducerMutator:producer_mutator = producer_mutator:
            GameState := GameState
            Repo := ProducerRepository
            ParticipantRepository := ParticipantRepository
            BuyEffect := BuyEffect
        ResourceMutator:resource_mutator = resource_mutator:
            GameState := GameState
            Repo := ResourceRepository
            ParticipantRepository := ParticipantRepository

        Mutators:[]mutator = array:
            ParticipantMutator
            ProducerMutator
            ResourceMutator

        spawn. MutateGameState(Dispatcher, Mutators)
        spawn. PseudoController(Dispatcher, ProducerRepository, BuyEffect)

        # Test
        sync:
            Dispatcher.Dispatch(Ev_ParticipantAdded(1))
            Dispatcher.Dispatch(Ev_ResourceAdded(1))
            Dispatcher.Dispatch(Ev_ProducerAdded(1))
            Dispatcher.Dispatch(Ev_ProducerAdded(2))
            Dispatcher.Dispatch(Ev_ProducerAdded(3))
            PossessParticipant(Dispatcher)
            IncreaseResource(Dispatcher, ParticipantRepository)
            ChangeResourceName(Dispatcher, ResourceRepository)
            # BuyProducers(Dispatcher, ProducerRepository, 1, 1.3)
            # BuyProducers(Dispatcher, ProducerRepository, 2, 2.1)
            # BuyProducers(Dispatcher, ProducerRepository, 3, 2.6)

    MutateGameState(Dispatcher:dispatcher, Mutators:[]mutator)<suspends>:void=
        loop:
            DomainEvents := Dispatcher.DomainEvents().Await()
            for (Mutator:Mutators). Mutator.ApplyEvents(DomainEvents)

    PseudoController(Dispatcher:dispatcher, Repo:producer_repository, BuyEffect:buy_producer_effect)<suspends>:void=
        loop:
            Command := BuyEffect.BuyProducerCommand.Await()
            if:
                ID := Command.Subjects[0]
                BuyerID := Command.Targets[0]
            then:
                if (Producer := Repo.GetByID[ID]):
                    if (NewProducer := Producer.IncreaseCount[BuyerID]):
                        if (Repo.Update[NewProducer]). Dispatcher.Dispatch(Ev_ProducerPurchased(ID, BuyerID))

    PossessParticipant(Dispatcher:dispatcher)<suspends>:void=
        Sleep(1.0)
        Dispatcher.Dispatch(Ev_ParticipantPossessed(1))

    IncreaseResource(Dispatcher:dispatcher, Repo:participant_repository)<suspends>:void=
        var Iterations:int = 0
        loop:
            Sleep(1.0)
            if (Participant := Repo.GetByID[1]):
                NewParticipant := Participant.AddResources(1, num{ Value := 1.0, Exponent := 3 })
                if (Repo.Update[NewParticipant]). Dispatcher.Dispatch(Ev_ResourcesGained(1, 1))
            set Iterations += 1
            if (Iterations > 99). break

    ChangeResourceName(Dispatcher:dispatcher, Repo:resource_repository)<suspends>:void=
        Sleep(10.0)
        NewResource := resource{ ID := 1, Name := "Silver" }
        if (Repo.Update[NewResource]). Dispatcher.Dispatch(Ev_ResourceRenamed(1))

    BuyProducers(Dispatcher:dispatcher, Repo:producer_repository, ID:int, Frequency:float)<suspends>:void=
        loop:
            Sleep(Frequency)
            if (Producer := Repo.GetByID[ID]):
                if (NewProducer := Producer.IncreaseCount[1]):
                    if (Repo.Update[NewProducer]). Dispatcher.Dispatch(Ev_ProducerPurchased(ID, 1))
