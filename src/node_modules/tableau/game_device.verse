
using. /Fortnite.com/Devices
using. /Verse.org/Simulation
using. /Verse.org/Simulation/Tags
using. /UnrealEngine.com/Temporary/Diagnostics

using. TableauResource

commander<public> := class():
    FiredEvent<public>:event(command) = event(command){}
    CreatedEvent<public>:event(resource) = event(resource){}
    Fire<public>(Command:command):void = FiredEvent.Signal(Command)
    Create<public>(Resource:resource):void = CreatedEvent.Signal(Resource)

game_device := class(creative_device):

    OnBegin<override>()<suspends>:void=
        ResourceRepository:resource_repository = resource_repository{}
        Dispatcher:dispatcher = dispatcher{}
        EffectorProvider := effector_provider{}
        NumComputerProvider := num_computer_provider{}
        Commander := commander{}

        GameState := game_state:
            ResourceRepository := ResourceRepository
            Commander := Commander
            EffectorProvider := EffectorProvider
            NumComputerProvider := NumComputerProvider

        Effects:[string]effector = map:
            "Is True" => check_effector. GameState := GameState
            "Is False" => check_effector{ GameState := GameState, CheckFalse := true }
            "Make True" => bool_effector. GameState := GameState
            "Make False" => bool_effector{ GameState := GameState, Value := false }
            "Increase" => adjust_effector. GameState := GameState
            "Decrease" => adjust_effector{ GameState := GameState, Sign := sign.Negative }
            "Execute Ability" => execute_ability_effector. GameState := GameState
            "Delay" => delay_effector. GameState := GameState
            "Log" => log_effector. GameState := GameState

        for (Name->Effect:Effects). EffectorProvider.Register(Name, Effect)

        NumComputers:[string]num_computer = map:
            "Multiply" => multiply_num_computer{}

        for (Name->NumComputer:NumComputers). NumComputerProvider.Register(Name, NumComputer)

        TableauDevices := LoadTableauDevices()
        for(Device:TableauDevices). spawn. Device.Init(GameState)
        Print("Devices: {TableauDevices.Length}")

        ResourceMutator:resource_mutator = resource_mutator:
            GameState := GameState
            Repo := ResourceRepository

        Mutators:[]mutator = array:
            ResourceMutator

        spawn. MutateGameState(Dispatcher, Mutators)
        spawn. PseudoController(Dispatcher, ResourceRepository, Commander)

        ConfigDevices := LoadConfigDevices()
        for (Device:ConfigDevices):
            NewResources := Device.GetResources()
            for (Resource:NewResources). Commander.Create(Resource)

        PlayerResource := resource:
            ID := "1"
            Type := "Player"
            StatProps := props:
                Agents := array:
                    prop_agent{ ID := "Possessed By", Default := option. GetPlayspace().GetPlayers()[0] }
        Commander.Create(PlayerResource)

    MutateGameState(Dispatcher:dispatcher, Mutators:[]mutator)<suspends>:void=
        loop:
            DomainEvents := Dispatcher.DomainEvents().Await()
            for (Mutator:Mutators). Mutator.ApplyEvents(DomainEvents)

    PseudoController(Dispatcher:dispatcher, Repo:resource_repository, Commander:commander)<suspends>:void=
        loop:
            race:
                UpdateProperty(Dispatcher, Repo, Commander)
                block:
                    Resource := Commander.CreatedEvent.Await()
                    if (Repo.Add[Resource]):
                        Dispatcher.Dispatch(Ev_ResourceAdded(Resource.ID))

    UpdateProperty(Dispatcher:dispatcher, Repo:resource_repository, Commander:commander)<suspends>:void=
        Command := Commander.FiredEvent.Await()
        ResourceID := Command.Subject
        PropertyID := Command.Property
        PlayerID := Command.Target
        if (Resource:= Repo.GetByID[ResourceID]):
            PropType := Repo.GetPropTypes[ResourceID][PropertyID] or prop_type.Unknown
            case(PropType):
                prop_type.Bool =>
                    Value := Command.Pay.Bool
                    if (NewResource := Resource.SetBoolProperty[PropertyID, PlayerID, Value]):
                        if (Repo.Update[NewResource]). Dispatcher.Dispatch(Ev_PropertyUpdated(ResourceID, PropertyID, PlayerID))
                prop_type.Num =>
                    Value := Command.Pay.Num
                    if (NewResource := Resource.SetNumProperty[PropertyID, PlayerID, Value]):
                        if (Repo.Update[NewResource]). Dispatcher.Dispatch(Ev_PropertyUpdated(ResourceID, PropertyID, PlayerID))
                _ => {}
