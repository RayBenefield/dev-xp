
using { /Fortnite.com/Devices }
using { /Verse.org/Simulation }
using { /Verse.org/Simulation/Tags }
using { /UnrealEngine.com/Temporary/Diagnostics }

using { TableauWork }
using { TableauAgent }
using { TableauResource }
using { TableauProducer }
using { TableauParticipant }

game_device := class(creative_device):

    OnBegin<override>()<suspends>:void=
        AgentRepository:agent_repository = agent_repository:
            ParticipantToAgent := map:
                1 => option. GetPlayspace().GetPlayers()[0]
        ParticipantRepository:participant_repository = participant_repository:
            Initial := array. participant. ID := 1
        ResourceRepository:resource_repository = resource_repository:
            Initial := array. resource{ ID := 1, Name := "Gold" }

        Dispatcher:dispatcher = dispatcher{}

        GameState := game_state{}
        TableauDevices := LoadTableauDevices()
        for(Device:TableauDevices). spawn. Device.Init(GameState)
        Print("Devices: {TableauDevices.Length}")

        ParticipantMutator:participant_mutator = participant_mutator:
            GameState := GameState
            Repo := ParticipantRepository
            AgentRepository := AgentRepository
            ResourceRepository := ResourceRepository
        ResourceMutator:resource_mutator = resource_mutator:
            GameState := GameState
            Repo := ResourceRepository
            ParticipantRepository := ParticipantRepository

        Mutators:[]mutator = array:
            ParticipantMutator
            ResourceMutator

        spawn. MutateGameState(Dispatcher, Mutators)

        # Test
        sync:
            Dispatcher.Dispatch(Ev_ParticipantAdded(1))
            Dispatcher.Dispatch(Ev_ResourceAdded(1))
            PossessParticipant(Dispatcher)
            IncreaseResource(Dispatcher, ParticipantRepository)
            ChangeResourceName(Dispatcher, ResourceRepository)

    MutateGameState(Dispatcher:dispatcher, Mutators:[]mutator)<suspends>:void=
        loop:
            DomainEvents := Dispatcher.DomainEvents().Await()
            for (Mutator:Mutators). Mutator.ApplyEvents(DomainEvents)

    PossessParticipant(Dispatcher:dispatcher)<suspends>:void=
        Sleep(1.0)
        ProjectLog("Possessing participant")
        Dispatcher.Dispatch(Ev_ParticipantPossessed(1))

    IncreaseResource(Dispatcher:dispatcher, Repo:participant_repository)<suspends>:void=
        var Iterations:int = 0
        loop:
            Sleep(1.0)
            ProjectLog("Adding resources")
            if (Participant := Repo.GetByID[1]):
                NewParticipant := Participant.AddResources(1, num{ Value := 1.0, Exponent := 3 })
                if (Repo.Update[NewParticipant]). Dispatcher.Dispatch(Ev_ResourcesGained(1, 1))
                ProjectLog("Actually added now at {Participant.GetResource(1)}")
            set Iterations += 1
            if (Iterations > 99). break

    ChangeResourceName(Dispatcher:dispatcher, Repo:resource_repository)<suspends>:void=
        Sleep(10.0)
        ProjectLog("Changing Name")
        NewResource := resource{ ID := 1, Name := "Silver" }
        if (Repo.Update[NewResource]). Dispatcher.Dispatch(Ev_ResourceRenamed(1))
