
using. /Verse.org/Simulation
using. /Fortnite.com/Devices
using. /Verse.org/Simulation/Tags

tableau_device_tag := class(tag){}

LoadTableauDevices<public>(BaseDevice:creative_device):[]tableau_device=
    TaggedDevices := BaseDevice.FindCreativeObjectsWithTag(tableau_device_tag{})
    for(Index->Tagged:TaggedDevices, Device := tableau_device[Tagged]). Device

TypeSideEffects<public><constructor>()<transacts> := side_effect_settings. PerResource := true
StaticResourceSideEffects<public><constructor>()<transacts> := side_effect_settings{ SubResourceID := "", PerSubResource := false }
StaticTypeSideEffects<public><constructor>()<transacts> := side_effect_settings{ PerResource := true, SubResourceID := "", PerSubResource := false }
per_resource<public> := class<concrete>(side_effect_settings):
    @editable PerResource<override>:logic = true
side_effect_settings<public> := class<concrete>():
    @editable PerResource<public>:logic = false
    @editable SubResourceID<public>:string = "Player"
    @editable PerSubResource<public>:logic = true

device_settings<public> := class<concrete>():

tableau_device<public> := class(creative_device):
    DeviceType<public>:string = "UNKNOWN"
    @editable ResourceID<public>:string = "Resource ID"
    @editable SideEffectSettings<public>:side_effect_settings = side_effect_settings{}
    @editable DebugProperties<public>:[]string = array{"","",""}
    # REQUEST: Doesn't work in the details panel, should be overridable in the future
    # @editable Settings<public>:device_settings = device_settings{}

    OnBegin<override>()<suspends>:void=
        DeviceTags := GetTags()
        if (not DeviceTags.Has[tableau_device_tag{}]). Warning("‚ùå [{ResourceID}] Device is missing the `tableau_device_tag`")

    GetResources<public>():[]resource= array. resource{ ID := ResourceID }

    GetSideEffectSettings<public>()<transacts>:side_effect_settings= SideEffectSettings

    GetResID<public>()<computes>:string= ResourceID
    GetSubResID<public>()<transacts>:string= GetSideEffectSettings().SubResourceID
    GetPerType<public>()<transacts>:?string= if (GetSideEffectSettings().PerResource?). option{ ResourceID } else. false
    GetPerSubType<public>()<transacts>:?string= if (GetSideEffectSettings().PerSubResource?). option{ GetSideEffectSettings().SubResourceID } else. false
    GetSideEffects<public>(State:scoped_state)<suspends>:[]side_effect= array{}

    GetDebugs<public>()<transacts>:[]string= DebugProperties
