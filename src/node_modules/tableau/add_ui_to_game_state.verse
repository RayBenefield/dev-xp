
using { /Verse.org/Simulation }
using { /UnrealEngine.com/Temporary/UI }

game_hud<public> := interface():
    Initialize<public>():widget

margin_settings<public> := class<concrete>():
    @editable Top:float = 0.0
    @editable Left:float = 0.0
    @editable Right:float = 0.0
    @editable Bottom:float = 0.0

canvas_settings<public> := class<concrete>():
    @editable Offsets<public>:margin_settings = margin_settings{}

    GetOffsets<public>():margin=
        margin:
            Top := Offsets.Top
            Left := Offsets.Left
            Right := Offsets.Right
            Bottom := Offsets.Bottom

create_hud := type{_(:game_state, :string):game_hud}

(GameState:game_state).AddHUD<public>(
    Name:string,
    CreateHUD:create_hud,
    HUDSettings:canvas_settings,
    ?Clickable:logic = false
):void=
    HUD := hud:
        Name := Name
        Clickable := Clickable
        CreateHUD := CreateHUD
        HUDSettings := HUDSettings
    Watcher := participant_watcher:
        GameState := GameState
        OnPossessed := HUD.AttachHUD
    spawn. Watcher.Start()

hud := class():
    Name<public>:string
    Clickable<public>:logic
    HUDSettings<public>:canvas_settings
    CreateHUD<public>:create_hud

    AttachHUD<public>(
        GameState:game_state,
        ParticipantID:string,
        Agent:agent
    ):void=
        if (UI := GetPlayerUI[player[Agent]]):
            Widget := CreateHUD(GameState, ParticipantID).Initialize()
            Canvas := MakeCanvas(Widget, HUDSettings)
            Input := if (Clickable?). ui_input_mode.All else. ui_input_mode.None
            UI.AddWidget(Canvas, player_ui_slot. InputMode := Input)

MakeCanvas(Widget:widget, Settings:canvas_settings):canvas=
    canvas:
        Slots := array:
            canvas_slot:
                Offsets := Settings.GetOffsets()
                Widget := Widget
