
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/UI
using. /UnrealEngine.com/Temporary/SpatialMath

canvas_settings<public> := class<concrete>():
    @editable HorizontalAlign<public>:horizontal_alignment = horizontal_alignment.Left
    @editable VerticalAlign<public>:vertical_alignment = vertical_alignment.Top
    @editable HorizontalPadding<public>:float = 0.0
    @editable VerticalPadding<public>:float = 0.0

    GetOffsets<public>():margin=
        Top := case(VerticalAlign):
            vertical_alignment.Top => VerticalPadding
            vertical_alignment.Bottom => -VerticalPadding
            _ => 0.0
        Left := case(HorizontalAlign):
            horizontal_alignment.Left => HorizontalPadding
            horizontal_alignment.Right => -HorizontalPadding
            horizontal_alignment.Center => HorizontalPadding
            _ => 0.0
        margin:
            Top := Top
            Left := Left
            Right := 0.0
            Bottom := 0.0

create_hud := type{_(:game_state, :string):widget}

(GameState:game_state).AddHUD<public>(
    Name:string,
    CreateHUD:create_hud,
    HUDSettings:canvas_settings,
    ?Clickable:logic = false
):void=
    HUD := hud:
        Name := Name
        Clickable := Clickable
        CreateHUD := CreateHUD
        HUDSettings := HUDSettings
    Watcher := player_watcher:
        GameState := GameState
        OnPossessed := HUD.AttachHUD
    spawn. Watcher.Start()

hud := class():
    Name<public>:string
    Clickable<public>:logic
    HUDSettings<public>:canvas_settings
    CreateHUD<public>:create_hud

    AttachHUD<public>(
        GameState:game_state,
        PlayerID:string,
        Agent:agent
    ):void=
        if (UI := GetPlayerUI[player[Agent]]):
            Widget := CreateHUD(GameState, PlayerID)
            Input := if (Clickable?). ui_input_mode.All else. ui_input_mode.None

            if (Clickable?, Canvas:= GameState.InteractiveCanvas?):
                Canvas.AddWidget(MakeWidget(Widget, HUDSettings))
            else:
                NewCanvas := canvas{}
                NewCanvas.AddWidget(MakeWidget(Widget, HUDSettings))
                UI.AddWidget(NewCanvas, player_ui_slot. InputMode := Input)
                if:
                    Clickable?
                    set GameState.InteractiveCanvas = option. NewCanvas

MakeWidget(Widget:widget, Settings:canvas_settings):canvas_slot=
    XAnchor := case(Settings.HorizontalAlign):
        horizontal_alignment.Left => 0.0
        horizontal_alignment.Right => 1.0
        horizontal_alignment.Center => 0.5
        _ => 0.5
    YAnchor := case(Settings.VerticalAlign):
        vertical_alignment.Top => 0.0
        vertical_alignment.Bottom => 1.0
        vertical_alignment.Center => 0.5
        _ => 0.5
    XAlign := case(Settings.HorizontalAlign):
        horizontal_alignment.Center => if (Settings.HorizontalPadding > 0.0):
            0.0
        else if (Settings.HorizontalPadding < 0.0):
            1.0
        else:
            0.5
        _ => XAnchor
    canvas_slot:
        Anchors := anchors:
            Minimum := vector2{X := XAnchor, Y := YAnchor}
            Maximum := vector2{X := XAnchor, Y := YAnchor}
        Offsets := Settings.GetOffsets()
        Alignment := vector2{X := XAlign, Y := YAnchor}
        SizeToContent := true
        Widget := Widget
