
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/SpatialMath

using. Numb
using. TableauResource

command<public> := class():
    Subject<public>:string = ""
    Property<public>:string = ""
    Target<public>:string = ""
    Pay<public>:load = load{}
    AfterEffects<public>:[]effect = array{}

commander<public> := class():
    FiredEvent<public>:event(command) = event(command){}
    CreatedEvent<public>:event(resource) = event(resource){}
    Fire<public>(Command:command):void = FiredEvent.Signal(Command)
    Create<public>(Resource:resource):void = CreatedEvent.Signal(Resource)

CopyCommand<public><constructor>(Old:command) := command:
    Subject := Old.Subject
    Property := Old.Property
    Target := Old.Target
    Pay := Old.Pay

CopyEvent<constructor><public>(Old:domain_event) := domain_event:
    Event := Old.Event
    SubjectType := Old.SubjectType
    Subject := Old.Subject
    TargetType := Old.TargetType
    Target := Old.Target
    Property := Old.Property

domain_event<public> := class:
    Event<public>:ev
    SubjectType<public>:entity
    Subject<public>:string
    TargetType<public>:?entity = false
    Target<public>:string = ""
    Property<public>:string = ""

    Equals<public>(Other:domain_event)<decides><transacts>:void=
        SubjectType.Name() = Other.SubjectType.Name()
        Subject = Other.Subject
        Event.Name() = Other.Event.Name()
        if (TargetType?):
            TargetType?.Name() = Other.TargetType?.Name()
            Target = Other.Target
        Property = Other.Property

(List:[]domain_event).Includes<public>(Target:domain_event)<decides><transacts>:void=
    AllEquals := for(Ev:List, Ev.Equals[Target]). Ev
    AllEquals.Length > 0

dispatcher<public> := class():
    DomainEventTriggered:event([]domain_event) := event([]domain_event){}
    DomainEvents<public>():event([]domain_event)=DomainEventTriggered

    Dispatch<public>(Event:domain_event):void = DomainEventTriggered.Signal(array. Event)
    Dispatch<public>(Events:[]domain_event):void = DomainEventTriggered.Signal(Events)

Path<public><constructor>(PropertyID:string)<transacts> := half_path. PropertyID := option. PropertyID
Path<public><constructor>(PropPath:half_path)<transacts> := half_path. PropertyPath := option. PropPath
Path<public><constructor>(ResPath:half_path, PropertyID:string)<transacts> := half_path:
    ResourcePath := option. ResPath
    PropertyID := option. PropertyID
Path<public><constructor>(ResPath:half_path, PropPath:half_path)<transacts> := half_path:
    ResourcePath := option. ResPath
    PropertyPath := option. PropPath
Path<public><constructor>(ResourceID:string, PropertyID:string)<transacts> := half_path:
    ResourceID := option. ResourceID
    PropertyID := option. PropertyID

half_path<public> := class<concrete>():
    @editable ResourceID<public>:?string = false
    @editable PropertyID<public>:?string = false
    @editable ResourcePath<public>:?half_path = false
    @editable PropertyPath<public>:?half_path = false

ToString<public>(P:prop_path):string= "[{P.ResourceID}.{P.PropertyID}]"
prop_path<public> := class<concrete>():
    @editable ResourceID<public>:string = ""
    @editable PropertyID<public>:string = ""

CopyLoad<public><constructor>(Old:load) := load:
    HalfPath := Old.HalfPath
    Prop := Old.Prop
    Str := Old.Str
    Float := Old.Float
    Num := Old.Num
    Bool := Old.Bool
Load<public><constructor>(PropPath:half_path) := load. HalfPath := option. PropPath
WithProp<public><constructor>(OldLoad:load, Prop:prop_path) := load:
    CopyLoad<constructor>(OldLoad)
    Prop := Prop

load<public> := class<concrete>():
    @editable HalfPath<public>:?half_path = false
    @editable Prop<public>:prop_path = prop_path{}
    @editable Str<public>:string = ""
    @editable Float<public>:float = 1.0
    @editable Num<public>:num = num{}
    @editable Bool<public>:logic = false

THIS<public>:string = ""
effect<public> := class<concrete>():
    @editable FN<public>:string = ""
    Focus<public>:half_path = half_path{}
    Tweak<public>:half_path = half_path{}

effector<public> := interface():
    Play<public>(Source:string, Activator:string, Focus:prop_path, Tweak:prop_path)<suspends>:?[]command

entity<public> := interface:
    Name<public>()<computes>:string

ev<public> := interface:
    Name<public>()<computes>:string

mutator<public> := interface():
    ApplyEvents<public>(Events:[]domain_event):void

prop_float<public> := class<concrete>(prop):
    @editable ID<public>:string = ""
    @editable Focus<public>:half_path = half_path{}
    @editable FN<public>:string = ""
    @editable Tweak<public>:half_path = half_path{}
    @editable Default<public>:float = 0.0
    GetType<override>()<computes>:prop_type = prop_type.Float

prop_num<public> := class<concrete>(prop):
    @editable ID<public>:string = ""
    @editable Focus<public>:half_path = half_path{}
    @editable FN<public>:string = ""
    @editable Tweak<public>:half_path = half_path{}
    @editable Default<public>:num = num{}
    GetType<override>()<computes>:prop_type = prop_type.Num

prop_str<public> := class<concrete>(prop):
    @editable ID<public>:string = ""
    @editable Focus<public>:half_path = half_path{}
    @editable FN<public>:string = ""
    @editable Tweak<public>:half_path = half_path{}
    @editable Default<public>:string = ""
    GetType<override>()<computes>:prop_type = prop_type.Str

prop_bool<public> := class<concrete>(prop):
    @editable ID<public>:string = ""
    @editable Focus<public>:half_path = half_path{}
    @editable FN<public>:string = ""
    @editable Tweak<public>:half_path = half_path{}
    @editable Default<public>:logic = false
    GetType<override>()<computes>:prop_type = prop_type.Bool

prop_vec2<public> := class<concrete>(prop):
    @editable ID<public>:string = ""
    @editable Focus<public>:half_path = half_path{}
    @editable FN<public>:string = ""
    @editable Tweak<public>:half_path = half_path{}
    @editable Default<public>:vector2 = vector2{}
    GetType<override>()<computes>:prop_type = prop_type.Vec2

prop_vec3<public> := class<concrete>(prop):
    @editable ID<public>:string = ""
    @editable Focus<public>:half_path = half_path{}
    @editable FN<public>:string = ""
    @editable Tweak<public>:half_path = half_path{}
    @editable Default<public>:vector3 = vector3{}
    GetType<override>()<computes>:prop_type = prop_type.Vec3

prop_agent<public> := class<concrete>(prop):
    @editable ID<public>:string = ""
    @editable Focus<public>:half_path = half_path{}
    @editable FN<public>:string = ""
    @editable Tweak<public>:half_path = half_path{}
    Default<public>:?agent = false
    GetType<override>()<computes>:prop_type = prop_type.Agent

prop_type<public> := enum:
    Num
    Str
    Bool
    Float
    Agent
    Vec2
    Vec3
    Unknown

prop<public> := interface. GetType<public>()<computes>:prop_type

ToString<public>(Type:prop_type):string = case(Type):
    prop_type.Num => "Num"
    prop_type.Str => "Str"
    prop_type.Bool => "Bool"
    prop_type.Float => "Float"
    prop_type.Agent => "Agent"
    prop_type.Vec2 => "Vec2"
    prop_type.Vec3 => "Vec3"
    prop_type.Unknown => "Unknown"
