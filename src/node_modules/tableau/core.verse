controller<public> := interface():
    Triage<public>()<suspends>:void

command<public> := struct:
    Subjects<public>:[]int = array{}
    Targets<public>:[]int = array{}
    Magnitudes<public>:[]num = array{}
    AfterEffects<public>:[]effect = array{}

CopyEvent<constructor><public>(Old:domain_event) := domain_event:
    Entity := Old.Entity
    EntityID := Old.EntityID
    Event := Old.Event
    SubEntity := Old.SubEntity
    SubEntityID := Old.SubEntityID

domain_event<public> := class:
    Entity<public>:entity
    EntityID<public>:int
    Event<public>:ev
    SubEntity<public>:?entity = false
    SubEntityID<public>:int = 0

    Equals<public>(Other:domain_event)<decides><transacts>:void=
        Entity.Name() = Other.Entity.Name()
        EntityID = Other.EntityID
        Event.Name() = Other.Event.Name()
        if (SubEntity?):
            SubEntity?.Name() = Other.SubEntity?.Name()
            SubEntityID = Other.SubEntityID

(List:[]domain_event).Includes<public>(Target:domain_event)<decides><transacts>:void=
    Equals := for(Ev:List, Ev.Equals[Target]). Ev
    Equals.Length > 0

dispatcher<public> := class():
    DomainEventTriggered:event([]domain_event) := event([]domain_event){}
    DomainEvents<public>():event([]domain_event)=DomainEventTriggered

    Dispatch<public>(Event:domain_event):void = DomainEventTriggered.Signal(array. Event)
    Dispatch<public>(Events:[]domain_event):void = DomainEventTriggered.Signal(Events)

effect<public> := interface():
    Play<public>(Source:command):command

entity<public> := interface:
    Name<public>()<computes>:string

ev<public> := interface:
    Name<public>()<computes>:string

event_subscription<public> := struct:
    Entity<public>:entity
    EntityID<public>:?int = false
    Event<public>:?ev = false

service<public> := interface() {}

updatable<public> := interface():
    Update<public>()<suspends>:void
    ClearState<public>()<suspends>:void
    Subscriptions<public>()<transacts>:[]event_subscription

(Updatable:updatable).FreshUpdate<public>()<suspends>:void=
    Updatable.ClearState()
    Updatable.Update()

# (Updatable:updatable).ClearState<override>()<suspends>:void = {}
# (Updatable:updatable).Subscriptions<override>()<transacts>:[]event_subscription = array{}
