
using { /Verse.org/Simulation }

controller<public> := interface():
    Triage<public>()<suspends>:void

command<public> := class():
    Subject<public>:string = ""
    Property<public>:string = ""
    Target<public>:string = ""
    Payload<public>:payload = payload{}
    AfterEffects<public>:[]effect = array{}

CopyCommand<public><constructor>(Old:command) := command:
    Subject := Old.Subject
    Property := Old.Property
    Target := Old.Target
    Payload := Old.Payload
    AfterEffects := Old.AfterEffects

CopyEvent<constructor><public>(Old:domain_event) := domain_event:
    Event := Old.Event
    SubjectType := Old.SubjectType
    Subject := Old.Subject
    TargetType := Old.TargetType
    Target := Old.Target
    Property := Old.Property

domain_event<public> := class:
    Event<public>:ev
    SubjectType<public>:entity
    Subject<public>:string
    TargetType<public>:?entity = false
    Target<public>:string = ""
    Property<public>:string = ""

    Equals<public>(Other:domain_event)<decides><transacts>:void=
        SubjectType.Name() = Other.SubjectType.Name()
        Subject = Other.Subject
        Event.Name() = Other.Event.Name()
        if (TargetType?):
            TargetType?.Name() = Other.TargetType?.Name()
            Target = Other.Target
        Property = Other.Property

(List:[]domain_event).Includes<public>(Target:domain_event)<decides><transacts>:void=
    Equals := for(Ev:List, Ev.Equals[Target]). Ev
    Equals.Length > 0

dispatcher<public> := class():
    DomainEventTriggered:event([]domain_event) := event([]domain_event){}
    DomainEvents<public>():event([]domain_event)=DomainEventTriggered

    Dispatch<public>(Event:domain_event):void = DomainEventTriggered.Signal(array. Event)
    Dispatch<public>(Events:[]domain_event):void = DomainEventTriggered.Signal(Events)

payload<public> := class<concrete>():
    @editable Str<public>:string = ""
    @editable Float<public>:float = 1.0
    @editable Num<public>:num = num{}

effect<public> := class<concrete>():
    @editable Type<public>:string = ""
    @editable Payload<public>:payload = payload{}

effector<public> := interface():
    Play<public>(Source:command, Payload:payload)<suspends>:command

entity<public> := interface:
    Name<public>()<computes>:string

ev<public> := interface:
    Name<public>()<computes>:string

event_subscription<public> := struct:
    SubjectType<public>:entity
    Subject<public>:?string = false
    Event<public>:?ev = false

service<public> := interface() {}

updatable<public> := interface():
    Update<public>()<suspends>:void
    ClearState<public>()<suspends>:void
    Subscriptions<public>()<transacts>:[]event_subscription

(Updatable:updatable).FreshUpdate<public>()<suspends>:void=
    Updatable.ClearState()
    Updatable.Update()

mutator<public> := interface():
    ApplyEvents<public>(Events:[]domain_event):void

# (Updatable:updatable).ClearState<override>()<suspends>:void = {}
# (Updatable:updatable).Subscriptions<override>()<transacts>:[]event_subscription = array{}
