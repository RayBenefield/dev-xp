
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/UI

using. Goo
using. TableauResource

game_state<public> := class():
    EffectorProvider<public>:effector_provider
    var InteractiveCanvas:[string]canvas = map{}
    var Canvas:[string]canvas = map{}

    GetInteractiveCanvas<public>(PlayerID:string)<suspends>:?canvas=
        if (C := InteractiveCanvas[PlayerID]). return option. C

        Agent := GetAgentProp(PlayerID, "Possessed By", "").Get()
        if (UI := GetPlayerUI[player[Agent?]]):
            NewCanvas := canvas{}
            UI.AddWidget(NewCanvas, player_ui_slot. InputMode := ui_input_mode.All)
            if. set InteractiveCanvas[PlayerID] = NewCanvas
            return option. NewCanvas

        return false

    GetCanvas<public>(PlayerID:string)<suspends>:?canvas=
        if (C := Canvas[PlayerID]). return option. C

        Agent := GetAgentProp(PlayerID, "Possessed By", "").Get()
        if (UI := GetPlayerUI[player[Agent?]]):
            NewCanvas := canvas{}
            UI.AddWidget(NewCanvas, player_ui_slot. InputMode := ui_input_mode.None)
            if. set Canvas[PlayerID] = NewCanvas
            return false

        return false

    var Resources<public>:[string]resource_vm = map{}
    var ResourceTemplates<public>:[string]resource = map{}
    var ResourceTypeAdded:[string]event(string) = map{}
    ResourceAdded<public>:event(string) = event(string){}
    ResourceRemoved<public>:event(string) = event(string){}

    AddResource<public>(InitialResource:resource)<suspends>:?resource_vm=
        if (InitialResource.Type <> ""):
            Type := InitialResource.Type
            if (not ResourceTemplates[Type]):
                if. set ResourceTemplates[Type] = InitialResource

        if (InitialResource.ID <> ""):
            ID := InitialResource.ID
            VM := resource_vm{ State := Self, Resource := InitialResource }
            VM.Init()
            if. set Resources[ID] = VM
            ResourceAdded.Signal(ID)

            if (InitialResource.Type <> ""):
                if (AddedEvent := ResourceTypeAdded[InitialResource.Type]):
                    AddedEvent.Signal(ID)
                else:
                    AddedEvent := event(string){}
                    if. set ResourceTypeAdded[InitialResource.Type] = AddedEvent
                    AddedEvent.Signal(ID)

            return option. VM

        return false
    CreateResource<public>(ID:string, Type:string):void=
        if (not Resources[ID], Template := ResourceTemplates[Type]):
            Resource := CreateFromTemplate(ID, Template)
            spawn. AddResource(Resource)

    var ResourceGoo:[string]string_goo = map{}
    AwaitResourceGoo<public>(ID:string):string_goo=
        if (Cached := ResourceGoo[ID]). return Cached
        Result := if (Resources[ID]):
            StrGoo(ID)
        else:
            ExistsVM := StrGoo()
            spawn. TriggerExists(ID, ExistsVM)
            ExistsVM
        if. set ResourceGoo[ID] = Result
        Result

    # TODO: Replace this with a Goo filter in the future
    TriggerExists(ID:string, VM:string_goo)<suspends>:void=
        loop:
            IncomingID := ResourceAdded.Await()
            if (ID = IncomingID):
                VM.Set(ID)
                break

    AwaitResource<public>(ID:string)<suspends>:resource_vm=
        if (Res := Resources[ID]). return Res
        loop:
            IncomingID := ResourceAdded.Await()
            if (ID = IncomingID, Res:= Resources[ID]). return Res
    ResourceAddedEvent<public>(Type:string):event(string)=
        if (AddedEvent := ResourceTypeAdded[Type]):
            return AddedEvent
        else:
            NewEvent:event(string) = event(string){}
            if. set ResourceTypeAdded[Type] = NewEvent
            return NewEvent

    ResolvePath<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:prop_path=
        PropertyID := if (ID := HalfPath.PropertyID?). ID
        else if (Unresolved := HalfPath.PropertyPath?):
            Ready := ResolvePath(Source, Unresolved, PlayerID)
            GetStrProp(Ready, PlayerID).Get()
        else. ""
        ResourceID := if (ID := HalfPath.ResourceID?). ID
        else if (Unresolved := HalfPath.ResourcePath?):
            Ready := ResolvePath(Source, Unresolved, PlayerID)
            Resolved := GetStrProp(Ready, PlayerID).Get()
            Resolved
        else. Source

        prop_path{ ResourceID := ResourceID, PropertyID := PropertyID }

    var HPBoolCache:[string]bool_goo = map{}
    var BoolCache:[string]bool_goo = map{}

    GetBoolProp<public>(PropPath:prop_path, PlayerID:string):bool_goo =
        GetBoolProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetBoolProp<public>(Source:string, HalfPath:half_path, PlayerID:string):bool_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetBoolProp(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPBoolCache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := BoolGoo(SwitchMap(ResourceIDGoo, Scoped.AwaitBool))
        if. set HPBoolCache[Key] = Result
        Result

    GetBoolProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):bool_goo=
        if (ResourceID = ""). return BoolGoo(false)

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := BoolCache[Key]). return Cached
            HardResult := Resource.Resource.GetBool(PropertyID).ValueFor(Scoped)
            if. set BoolCache[Key] = HardResult
            return HardResult

        if (Cached := HPBoolCache[Key]). return Cached

        Result := BoolGoo(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitBool))
        if. set HPBoolCache[Key] = Result
        Result

    var HPIntCache:[string]int_goo = map{}
    var IntCache:[string]int_goo = map{}

    GetIntProp<public>(PropPath:prop_path, PlayerID:string):int_goo =
        GetIntProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetIntProp<public>(Source:string, HalfPath:half_path, PlayerID:string):int_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetIntProp(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPIntCache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := IntGoo(SwitchMap(ResourceIDGoo, Scoped.AwaitInt))
        if. set HPIntCache[Key] = Result
        Result

    GetIntProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):int_goo=
        if (ResourceID = ""). return IntGoo()

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := IntCache[Key]). return Cached
            HardResult := Resource.Resource.GetInt(PropertyID).ValueFor(Scoped)
            if. set IntCache[Key] = HardResult
            return HardResult

        if (Cached := HPIntCache[Key]). return Cached

        Result := IntGoo(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitInt))
        if. set HPIntCache[Key] = Result
        Result

    var HPFloatCache:[string]float_goo = map{}
    var FloatCache:[string]float_goo = map{}

    GetFloatProp<public>(PropPath:prop_path, PlayerID:string):float_goo =
        GetFloatProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetFloatProp<public>(Source:string, HalfPath:half_path, PlayerID:string):float_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetFloatProp(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPFloatCache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := FloatGoo(SwitchMap(ResourceIDGoo, Scoped.AwaitFloat))
        if. set HPFloatCache[Key] = Result
        Result

    GetFloatProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):float_goo=
        if (ResourceID = ""). return FloatGoo()

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := FloatCache[Key]). return Cached
            HardResult := Resource.Resource.GetFloat(PropertyID).ValueFor(Scoped)
            if. set FloatCache[Key] = HardResult
            return HardResult

        if (Cached := HPFloatCache[Key]). return Cached

        Result := FloatGoo(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitFloat))
        if. set HPFloatCache[Key] = Result
        Result

    var HPNumCache:[string]num_goo = map{}
    var NumCache:[string]num_goo = map{}

    GetNumProp<public>(PropPath:prop_path, PlayerID:string):num_goo =
        GetNumProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetNumProp<public>(Source:string, HalfPath:half_path, PlayerID:string):num_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetNumProp(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPNumCache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := NumGoo(SwitchMap(ResourceIDGoo, Scoped.AwaitNum))
        if. set HPNumCache[Key] = Result
        Result

    GetNumProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):num_goo=
        if (ResourceID = ""). return NumGoo()

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := NumCache[Key]). return Cached
            HardResult := Resource.Resource.GetNum(PropertyID).ValueFor(Scoped)
            if. set NumCache[Key] = HardResult
            return HardResult

        if (Cached := HPNumCache[Key]). return Cached

        Result := NumGoo(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitNum))
        if. set HPNumCache[Key] = Result
        Result

    var HPStrCache:[string]string_goo = map{}
    var StrCache:[string]string_goo = map{}

    GetStrProp<public>(PropPath:prop_path, PlayerID:string):string_goo =
        GetStrProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetStrProp<public>(Source:string, HalfPath:half_path, PlayerID:string):string_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetStrProp(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPStrCache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := StrGoo(SwitchMap(ResourceIDGoo, Scoped.AwaitStr))
        if. set HPStrCache[Key] = Result
        Result

    GetStrProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):string_goo=
        if (ResourceID = ""). return StrGoo()

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := StrCache[Key]). return Cached
            HardResult := Resource.Resource.GetStr(PropertyID).ValueFor(Scoped)
            if. set StrCache[Key] = HardResult
            return HardResult

        if (Cached := HPStrCache[Key]). return Cached

        Result := StrGoo(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitStr))
        if. set HPStrCache[Key] = Result
        Result

    var HPAgentCache:[string]agent_goo = map{}
    var AgentCache:[string]agent_goo = map{}

    GetAgentProp<public>(PropPath:prop_path, PlayerID:string):agent_goo =
        GetAgentProp(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetAgentProp<public>(Source:string, HalfPath:half_path, PlayerID:string):agent_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetAgentProp(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPAgentCache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := AgentGooVM(SwitchMap(ResourceIDGoo, Scoped.AwaitAgent))
        if. set HPAgentCache[Key] = Result
        Result

    GetAgentProp<public>(ResourceID:string, PropertyID:string, PlayerID:string):agent_goo=
        if (ResourceID = ""). return AgentGoo(false)

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := AgentCache[Key]). return Cached
            HardResult := Resource.Resource.GetAgent(PropertyID).ValueFor(Scoped)
            if. set AgentCache[Key] = HardResult
            return HardResult

        if (Cached := HPAgentCache[Key]). return Cached

        Result := AgentGooVM(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitAgent))
        if. set HPAgentCache[Key] = Result
        Result

    var HPVec2Cache:[string]vec2_goo = map{}
    var Vec2Cache:[string]vec2_goo = map{}

    GetVec2Prop<public>(PropPath:prop_path, PlayerID:string):vec2_goo =
        GetVec2Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetVec2Prop<public>(Source:string, HalfPath:half_path, PlayerID:string):vec2_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetVec2Prop(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPVec2Cache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := Vec2Goo(SwitchMap(ResourceIDGoo, Scoped.AwaitVec2))
        if. set HPVec2Cache[Key] = Result
        Result

    GetVec2Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string):vec2_goo=
        if (ResourceID = ""). return Vec2Goo()

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := Vec2Cache[Key]). return Cached
            HardResult := Resource.Resource.GetVec2(PropertyID).ValueFor(Scoped)
            if. set Vec2Cache[Key] = HardResult
            return HardResult

        if (Cached := HPVec2Cache[Key]). return Cached

        Result := Vec2Goo(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitVec2))
        if. set HPVec2Cache[Key] = Result
        Result

    var HPVec3Cache:[string]vec3_goo = map{}
    var Vec3Cache:[string]vec3_goo = map{}

    GetVec3Prop<public>(PropPath:prop_path, PlayerID:string):vec3_goo =
        GetVec3Prop(PropPath.ResourceID, PropPath.PropertyID, PlayerID)

    GetVec3Prop<public>(Source:string, HalfPath:half_path, PlayerID:string):vec3_goo =
        if (PropPath := HalfPath.TryComplete(Source)?). return GetVec3Prop(PropPath, PlayerID)

        Key := "{Source},{HalfPath.GetKey()},{PlayerID}"
        if (Cached := HPVec3Cache[Key]). return Cached

        PropertyID := HalfPath.PropertyID? or ""
        ResourceID := HalfPath.ResourceID? or Source
        Scoped := scoped_state{ GameState := Self, Source := Source, PropertyID := PropertyID, PlayerID := PlayerID }
        ResourceIDGoo := if (RPath := HalfPath.ResourcePath?). Scoped.FindStr(RPath) else. AwaitResourceGoo(ResourceID)

        Result := Vec3Goo(SwitchMap(ResourceIDGoo, Scoped.AwaitVec3))
        if. set HPVec3Cache[Key] = Result
        Result

    GetVec3Prop<public>(ResourceID:string, PropertyID:string, PlayerID:string):vec3_goo=
        if (ResourceID = ""). return Vec3Goo()

        Key := "{ResourceID},{PropertyID},{PlayerID}"
        Scoped := scoped_state{ GameState := Self, Source := ResourceID, PropertyID := PropertyID, PlayerID := PlayerID }
        if (Resource := Resources[ResourceID]):
            if (Cached := Vec3Cache[Key]). return Cached
            HardResult := Resource.Resource.GetVec3(PropertyID).ValueFor(Scoped)
            if. set Vec3Cache[Key] = HardResult
            return HardResult

        if (Cached := HPVec3Cache[Key]). return Cached

        Result := Vec3Goo(SwitchMap(AwaitResourceGoo(ResourceID), Scoped.AwaitVec3))
        if. set HPVec3Cache[Key] = Result
        Result

scoped_state<public> := class():
    GameState<public>:game_state
    Source<public>:string
    PropertyID<public>:string
    PlayerID<public>:string

    FindStr<public>(HP:half_path):string_goo= GameState.GetStrProp(Source, HP, PlayerID)
    AwaitBool<public>(ResourceID:string):bool_goo= GameState.GetBoolProp(ResourceID, PropertyID, PlayerID)
    AwaitInt<public>(ResourceID:string):int_goo= GameState.GetIntProp(ResourceID, PropertyID, PlayerID)
    AwaitFloat<public>(ResourceID:string):float_goo= GameState.GetFloatProp(ResourceID, PropertyID, PlayerID)
    AwaitNum<public>(ResourceID:string):num_goo= GameState.GetNumProp(ResourceID, PropertyID, PlayerID)
    AwaitStr<public>(ResourceID:string):string_goo= GameState.GetStrProp(ResourceID, PropertyID, PlayerID)
    AwaitAgent<public>(ResourceID:string):agent_goo= GameState.GetAgentProp(ResourceID, PropertyID, PlayerID)
    AwaitVec2<public>(ResourceID:string):vec2_goo= GameState.GetVec2Prop(ResourceID, PropertyID, PlayerID)
    AwaitVec3<public>(ResourceID:string):vec3_goo= GameState.GetVec3Prop(ResourceID, PropertyID, PlayerID)

    ToBool<public>(HP:half_path):bool_goo= GameState.GetBoolProp(Source, HP, PlayerID)
    ToInt<public>(HP:half_path):int_goo= GameState.GetIntProp(Source, HP, PlayerID)
    ToFloat<public>(HP:half_path):float_goo= GameState.GetFloatProp(Source, HP, PlayerID)
    ToNum<public>(HP:half_path):num_goo= GameState.GetNumProp(Source, HP, PlayerID)
    ToStr<public>(HP:half_path):string_goo= GameState.GetStrProp(Source, HP, PlayerID)
    ToAgent<public>(HP:half_path):agent_goo= GameState.GetAgentProp(Source, HP, PlayerID)
    ToVec2<public>(HP:half_path):vec2_goo= GameState.GetVec2Prop(Source, HP, PlayerID)
    ToVec3<public>(HP:half_path):vec3_goo= GameState.GetVec3Prop(Source, HP, PlayerID)
