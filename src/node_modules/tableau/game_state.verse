
using. /Verse.org/Simulation
using. /UnrealEngine.com/Temporary/UI

using. Goo
using. TableauResource

game_state<public> := class():
    EffectorProvider<public>:effector_provider
    var InteractiveCanvas:[string]canvas = map{}
    var Canvas:[string]canvas = map{}

    GetInteractiveCanvas<public>(PlayerID:string)<suspends>:?canvas=
        if (C := InteractiveCanvas[PlayerID]). return option. C

        Agent := GetAgentProp(PlayerID, "Possessed By", "").Get()
        if (UI := GetPlayerUI[player[Agent?]]):
            NewCanvas := canvas{}
            UI.AddWidget(NewCanvas, player_ui_slot. InputMode := ui_input_mode.All)
            if. set InteractiveCanvas[PlayerID] = NewCanvas
            return option. NewCanvas

        return false

    GetCanvas<public>(PlayerID:string)<suspends>:?canvas=
        if (C := Canvas[PlayerID]). return option. C

        Agent := GetAgentProp(PlayerID, "Possessed By", "").Get()
        if (UI := GetPlayerUI[player[Agent?]]):
            NewCanvas := canvas{}
            UI.AddWidget(NewCanvas, player_ui_slot. InputMode := ui_input_mode.None)
            if. set Canvas[PlayerID] = NewCanvas
            return false

        return false

    var Resources<public>:[string]resource_vm = map{}
    var ResourceTemplates<public>:[string]resource = map{}
    var ResourceTypeAdded:[string]event(string) = map{}
    ResourceAdded<public>:event(string) = event(string){}
    ResourceRemoved<public>:event(string) = event(string){}
    var PropTypes<public>:[string][string]prop_type = map{}

    AddResource<public>(InitialResource:resource)<suspends>:?resource_vm=
        if. set PropTypes[InitialResource.ID] = map{}
        for (ID->P:InitialResource.Props). if. set PropTypes[InitialResource.ID][ID] = P.Type

        if (InitialResource.Type <> ""):
            Type := InitialResource.Type
            if (not ResourceTemplates[Type]):
                if. set ResourceTemplates[Type] = InitialResource

        if (InitialResource.ID <> ""):
            ID := InitialResource.ID
            VM := resource_vm{ GameState := Self, ResourceID := ID }
            spawn. VM.Init(InitialResource)
            if. set Resources[ID] = VM
            ResourceAdded.Signal(ID)

            if (InitialResource.Type <> ""):
                if (AddedEvent := ResourceTypeAdded[InitialResource.Type]):
                    AddedEvent.Signal(ID)
                else:
                    AddedEvent := event(string){}
                    if. set ResourceTypeAdded[InitialResource.Type] = AddedEvent
                    AddedEvent.Signal(ID)

            return option. VM

        return false
    CreateResource<public>(ID:string, Type:string):void=
        if (not Resources[ID], Template := ResourceTemplates[Type]):
            Resource := CreateFromTemplate(ID, Template)
            spawn. AddResource(Resource)

    var ResourceGoo:[string]string_goo = map{}
    AwaitResourceGoo<public>(ID:string):string_goo=
        if (Cached := ResourceGoo[ID]). return Cached
        Result := if (Resources[ID]):
            StrGoo()
        else:
            ExistsVM := StrGoo()
            spawn. TriggerExists(ID, ExistsVM)
            ExistsVM
        if. set ResourceGoo[ID] = Result
        Result

    # TODO: Replace this with a Goo filter in the future
    TriggerExists(ID:string, VM:string_goo)<suspends>:void=
        loop:
            IncomingID := ResourceAdded.Await()
            if (ID = IncomingID):
                VM.Set(ID)
                break

    AwaitResource<public>(ID:string)<suspends>:resource_vm=
        if (Res := Resources[ID]). return Res
        loop:
            IncomingID := ResourceAdded.Await()
            if (ID = IncomingID, Res:= Resources[ID]). return Res
    ResourceAddedEvent<public>(Type:string):event(string)=
        if (AddedEvent := ResourceTypeAdded[Type]):
            return AddedEvent
        else:
            NewEvent:event(string) = event(string){}
            if. set ResourceTypeAdded[Type] = NewEvent
            return NewEvent

    ResolvePath<public>(Source:string, HalfPath:half_path, PlayerID:string)<suspends>:prop_path=
        PropertyID := if (ID := HalfPath.PropertyID?). ID
        else if (Unresolved := HalfPath.PropertyPath?):
            Ready := ResolvePath(Source, Unresolved, PlayerID)
            GetStrProp(Ready, PlayerID).Get()
        else. ""
        ResourceID := if (ID := HalfPath.ResourceID?). ID
        else if (Unresolved := HalfPath.ResourcePath?):
            Ready := ResolvePath(Source, Unresolved, PlayerID)
            Resolved := GetStrProp(Ready, PlayerID).Get()
            Resolved
        else. Source

        prop_path{ ResourceID := ResourceID, PropertyID := PropertyID }
