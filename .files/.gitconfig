[user]
    name = Raymond Benefield
    email = raymond.benefield@gmail.com
[diff]
    tool = vimdiff
    mnemonicprefix = true
    renames = copies
    colorMoved = zebra
[difftool]
    prompt = false
[alias]
    a = add .
    l = log --oneline
    p = pull --rebase --tags
    f = fetch --all --tags --prune
    br = branch
    st = status -u
    cb = checkout -b
    co = "!f() { git checkout $(git branch | fzf); }; f"
    un = "!f() { FILE=$1; git restore --staged $FILE; }; f"
    ci = "!f() { MESSAGE=$2; echo $MESSAGE | commitlint; git commit \"$@\"; }; f"
    ls = "!f() { git ls-files; git ls-files --others --exclude-standard; }; f"
    ac = "!f() { FILE=$1; MESSAGE=$2; git add $FILE; git commit -m \"$MESSAGE\"; }; f"
    pu = "!f() { BRANCH=$(git symbolic-ref --short HEAD); git push -u origin $BRANCH $@; }; f"
    puf = "!f() { BRANCH=$(git symbolic-ref --short HEAD); git push -u origin $BRANCH --force $@; }; f"
    rw = "!f() { COMMIT=$1; BRANCH=$(git symbolic-ref --short HEAD); git stash -u; git checkout $COMMIT; git commit --amend --no-verify; git rebase HEAD $BRANCH; git checkout $BRANCH; git stash pop; }; f"
    dif = diff --staged
    fix = "!f() { COMMIT=$1; REV=$(git rev-parse $COMMIT); git commit --fixup $COMMIT; git stash -u; GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash $REV^; git stash pop; }; f"
    res = "!f() { COMMIT=$1; git branch temp; git reset --hard $COMMIT; git reset $COMMIT^; git stash -u; git rebase temp; git rebase $COMMIT --onto $COMMIT^; git stash pop; git branch -D temp; }; f"
    last = log -1 HEAD
    save = stash save -u
    cont = rebase --continue
    abort = rebase --abort
    drop = "!f() { git stash drop stash@{0}; }; f"
    check = "!f() { FILE=$1; git log --follow $FILE; }; f"
    amend = commit -a --amend --no-edit
    staged = diff --staged
    pretty = log --graph --oneline --decorate
    unstage = restore --staged .
    refresh = reset --hard @{u}
    fix-lock = "!f() { git restore --staged yarn.lock; yarn; git add yarn.lock package.json }; f"
    show-files = show --pretty="format:" --name-only
    EX-shell-var = "!f() { COMMIT=$1; BRANCH=$(git symbolic-ref --short HEAD); echo $COMMIT; echo $BRANCH; }; f"
[color "status"]
    untracked = cyan
[core]
    whitespace = trailing-space,space-before-tab
    excludesfile = ~/.gitignore
    editor = kak
    pager = diff-so-fancy | less --tabs=4 -RFX
[push]
    followTags = true
[rerere]
    enabled = true
[color "diff-highlight"]
    oldNormal = red
    oldHighlight = red 52
    newNormal = green
    newHighlight = green 22
[color "diff"]
    meta = 227
    frag = magenta bold
    commit = 227 bold
    old = red
    new = green
    whitespace = red reverse
