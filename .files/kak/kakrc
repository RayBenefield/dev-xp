source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/smarttab.kak" defer smarttab %{
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=.* expandtab
}

define-command jump -params 0..1 -shell-script-candidates %{ kd ls --json=packageNames } %{
    evaluate-commands %{
        edit %sh{
            package=${1:-$kak_selection}
            kd ls ${package} --json=structures.${package}.srcDir | awk '{print $1"/index.js"}'
        }
    }
}
map global normal <c-g> xs'\S<ret><a-i>':jump<ret>

define-command import -params 1 -shell-script-candidates %{ kd ls --json=packageNames } %{
    evaluate-commands -save-regs dquote %{
        set-register dquote %sh{
            echo $1 | cut -d'/' -f2 | sed -E 's/-(.)/\U\1/g'
        }
    }
    execute-keys "ZggOimport<space><c-r>"" from '%arg{1}'<esc><a-i>p:sort<ret>z"
}
map global normal <a-l> :import<space>@dev-xp/log<ret>

define-command sort %{
    execute-keys "|awk '{ print length, $0 }' | sort -n | cut -d' ' -f2-<ret>"
}

define-command -docstring "map-sequence <scope> <sequence> <command>: map <sequence> of keys to <command> in insert mode." \
map-sequence -params 3 %{ evaluate-commands %sh{
    keys=$(printf "%s" "$2" | sed "s/\([&|]\)/\1\1/g")
    cmd=$(printf "%s" "$3" | sed "s/\([@&|]\)/\1\1/g")
    printf "%s\n" "hook -group $2-seq $1 InsertChar ${2##${2%%?}} %|
        try %&
            execute-keys -draft h<a-B> <a-k>$keys<ret> s$keys\z<ret> d
            evaluate-commands %@$cmd@
        &
    |"
}}

define-command -docstring "unmap-sequence <scope> <sequence>: unmap <sequence> of keys in testing mode." \
unmap-sequence -params 2 %{
    remove-hooks "%arg{1}" "%arg{2}-seq"
}

map-sequence global jk %{exec <esc>}

alias global x write-quit

map global normal ^       gh
map global normal $       gl

#map global prompt <c-j>  <tab>
map global prompt <F12>   <tab>
map global prompt <c-k>   <s-tab>
map global prompt <c-l>   <c-e>
map global prompt <c-w>   <c-w><c-w>

map global prompt <c-d>   e<space>*debug*<ret>

#map global normal <c-i>  <a-i>
map global normal <F10>   <a-i>
map global normal <c-a>   <a-a>

map global normal X       <a-x>

map global normal w       wl
map global normal b       b\;
map global normal W       <a-:>?<\>w<ret><a-{>w<a-:>F<space>
map global normal B       <a-:><a-\;><a-F><space><a-?><\>w<ret>s[<\>S<\>s]*<space><ret><a-{>w

map global normal <space> <space>\;

map global normal <c-w>   :delete-buffer<ret>
map global normal <c-l>   :buffer-next<ret>
map global normal <c-b>   :buffer<space>

map global normal C       Glc
map global normal D       Gld

map global normal <c-f>   <a-f>
map global normal <c-F>   <a-F>
map global normal <c-t>   <a-t>
map global normal <c-T>   <a-T>

map global normal <a-]>   <a-o>
map global normal <a-[>   <a-O>
map global normal ]       /^$<ret>
map global normal [       <a-/>^$<ret>
map global normal }       ?^$<ret>
map global normal {       <a-?>^$<ret>

map global normal <a-w>   '|fmt --split-only --width 80<ret>' -docstring "Wrap to 80 columns"

add-highlighter global/number-lines number-lines -relative

hook global WinSetOption filetype=markdown %{
    set window autowrap_column 80
    autowrap-enable
}

# Solarized Dark
hook global WinSetOption filetype=javascript %{
    add-highlighter global/ regex \b(as|constructor|declare|enum|from|implements|interface|module|namespace|package|private|protected|public|readonly|static|type)\b 0:keyword
    add-highlighter global/ regex \b(process)\b 0:module
    add-highlighter global/ regex \b(\?|:)\b 0:keyword
    add-highlighter global/ regex "([a-zA-Z]+)\(" 1:function
    add-highlighter global/ regex "([a-zA-Z]+):" 1:value
}

evaluate-commands %sh{
    yellow='rgb:c7c400'
    lightyellow='rgb:fffc67'
    red='rgb:c91b00'
    lightred='rgb:ff6d67'
    magenta='rgb:c930c7'
    lightmagenta='rgb:ff99ff'
    blue='rgb:0225c7'
    lightblue='rgb:8a93ff'
    cyan='rgb:009db4'
    lightcyan='rgb:5ffdff'
    green='rgb:00c200'
    lightgreen='rgb:8ffc9a'
    white='rgb:ffffff'
    orange='rgb:cb4b16'
    violet='rgb:6c71c4'
    midnightblue='rgb:000106'

    base03='rgb:000106'
    base02='rgb:000106'
    base01='rgb:5ff967'
    base00='rgb:657b83'
    base0=white
    base1='rgb:93a1a1'
    base2='rgb:eee8d5'
    base3='rgb:fdf6e3'

    echo "
        # code
        face global value              ${lightblue}
        face global type               ${red}
        face global variable           ${white}
        face global module             ${magenta}
        face global function           ${lightcyan}
        face global string             ${lightmagenta}
        face global keyword            ${lightyellow}
        face global operator           ${yellow}
        face global attribute          ${violet}
        face global comment            ${cyan}
        face global documentation      comment
        face global meta               ${orange}
        face global builtin            default+b
        face global code               ${lightyellow}

        # markup
        face global title              ${blue}+b
        face global header             ${blue}
        face global mono               ${base1}
        face global block              ${cyan}
        face global link               ${base1}
        face global bullet             ${yellow}
        face global list               ${green}

        # builtin
        face global PrimarySelection   ${base03},${blue}+fg
        face global SecondarySelection ${base01},${base1}+fg
        face global PrimaryCursor      ${base03},${base0}+fg
        face global SecondaryCursor    ${base03},${base01}+fg
        face global PrimaryCursorEol   ${base03},${base2}+fg
        face global SecondaryCursorEol ${base03},${base3}+fg
        face global LineNumbers        ${lightgreen},${base02}
        face global LineNumberCursor   ${base1},${base02}
        face global LineNumbersWrapped ${base02},${base02}
        face global MenuForeground     ${base03},${yellow}
        face global MenuBackground     ${base1},${base02}
        face global MenuInfo           ${base01}
        face global Information        ${base02},${base1}
        face global Error              ${red},default+b
        face global StatusLine         ${base1},${base02}+b
        face global StatusLineMode     ${orange}
        face global StatusLineInfo     ${cyan}
        face global StatusLineValue    ${green}
        face global StatusCursor       ${base00},${base3}
        face global Prompt             ${yellow}+b
        face global MatchingChar       ${red},${base01}+b
        face global BufferPadding      ${base01},${base03}
        face global Whitespace         ${base01}+f
    "
}
